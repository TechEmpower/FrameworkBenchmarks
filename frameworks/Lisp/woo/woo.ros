#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

;; Woo is a fast non-blocking HTTP server built on top of
;; libev. Although Woo is written in Common Lisp, it aims
;; to be the fastest web server written in any programming
;; language.

;; https://github.com/fukamachi/woo

;; Quicklisp is a library manager for Common Lisp. Use
;; QuickLisp's quickload function to retrieve external
;; packages. These packages are automatically curl'd when
;; the program runs.

;; Woo - https://github.com/fukamachi/woo
;; Clack - https://github.com/fukamachi/clack
;; Alexandria - https://github.com/keithj/alexandria
;; Optima - https://github.com/m2ym/optima
;; Jonathan - https://github.com/fukamachi/jonathan

(ql:quickload '(:uiop :woo :alexandria :optima :jonathan) :silent t)
(use-package :optima)

(load "./helpers/starts-with.lisp")
(load "./helpers/parse-argv.lisp")


(defun plaintext (env)
  "Plaintext handler."
  (declare (ignore env))
  '(200 (:content-type "text/plain" :server "Woo") ("Hello, World!"))
)

(defun json (env)
  "JSON handler using Jonathan to encode JSON"
  (declare (ignore env))
  `(200 (:content-type "application/json" :server "Woo") (,(jonathan:to-json '(:message "Hello, World!"))))
)


(defun handler (env)
  "Woo router using Alexandria and Optima pattern matching."
  (optima:match env
    (
      (guard (property :path-info path) (alexandria:starts-with-subseq "/plaintext" path))
      (funcall 'plaintext env)
    )
    (
      (guard (property :path-info path) (alexandria:starts-with-subseq "/json" path))
      (funcall 'json env)
    )
  )
)


(defun main (&rest argv)
  "Create and start the server, applying argv to the env"
  (let ((args (parse-argv argv)))
    (apply #'woo:run
      (lambda (env)
        (funcall 'handler env)
      )
      :debug nil
      args
    )
  )
)
