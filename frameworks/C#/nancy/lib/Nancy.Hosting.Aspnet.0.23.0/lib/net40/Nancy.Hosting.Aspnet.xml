<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nancy.Hosting.Aspnet</name>
    </assembly>
    <members>
        <member name="T:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper">
            <summary>
            TinyIoC ASP.Net Bootstrapper
            No child container support because per-request is handled by the AsPerRequestSingleton option
            </summary>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.GetDiagnostics">
            <summary>
            Gets the diagnostics for initialisation
            </summary>
            <returns>IDiagnostics implementation</returns>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.GetApplicationStartupTasks">
            <summary>
            Gets all registered startup tasks
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IApplicationStartup"/> instances. </returns>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.RegisterAndGetRequestStartupTasks(Nancy.TinyIoc.TinyIoCContainer,System.Type[])">
            <summary>
            Resolves all request startup tasks
            </summary>
            <param name="container">Container to use</param>
            <param name="requestStartupTypes">Types to register - not used</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IRequestStartup"/> instances.</returns>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.GetRegistrationTasks">
            <summary>
            Gets all registered application registration tasks
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IRegistrations"/> instances.</returns>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.GetAllModules(Nancy.NancyContext)">
            <summary>
            Get all NancyModule implementation instances - should be multi-instance
            </summary>
            <param name="context">Current request context</param>
            <returns>IEnumerable of INancyModule</returns>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.GetModule(System.Type,Nancy.NancyContext)">
            <summary>
            Retrieves a specific <see cref="T:Nancy.INancyModule"/> implementation - should be per-request lifetime
            </summary>
            <param name="moduleType">Module type</param>
            <param name="context">The current context</param>
            <returns>The <see cref="T:Nancy.INancyModule"/> instance</returns>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.InitializeRequestPipelines(Nancy.NancyContext)">
            <summary>
            Creates and initializes the request pipelines.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> used by the request.</param>
            <returns>An <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance.</returns>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.ConfigureApplicationContainer(Nancy.TinyIoc.TinyIoCContainer)">
            <summary>
            Configures the container using AutoRegister followed by registration
            of default INancyModuleCatalog and IRouteResolver.
            </summary>
            <param name="container">Container instance</param>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.GetEngineInternal">
            <summary>
            Resolve INancyEngine
            </summary>
            <returns>INancyEngine implementation</returns>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.GetApplicationContainer">
            <summary>
            Create a default, unconfigured, container
            </summary>
            <returns>Container instance</returns>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.RegisterBootstrapperTypes(Nancy.TinyIoc.TinyIoCContainer)">
            <summary>
            Register the bootstrapper's implemented types into the container.
            This is necessary so a user can pass in a populated container but not have
            to take the responsibility of registering things like INancyModuleCatalog manually.
            </summary>
            <param name="applicationContainer">Application container to register into</param>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.RegisterTypes(Nancy.TinyIoc.TinyIoCContainer,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.TypeRegistration})">
            <summary>
            Register the default implementations of internally used types into the container as singletons
            </summary>
            <param name="container">Container to register into</param>
            <param name="typeRegistrations">Type registrations to register</param>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.RegisterCollectionTypes(Nancy.TinyIoc.TinyIoCContainer,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.CollectionTypeRegistration})">
            <summary>
            Register the various collections into the container as singletons to later be resolved
            by IEnumerable{Type} constructor dependencies.
            </summary>
            <param name="container">Container to register into</param>
            <param name="collectionTypeRegistrationsn">Collection type registrations to register</param>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.RegisterModules(Nancy.TinyIoc.TinyIoCContainer,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.ModuleRegistration})">
            <summary>
            Register the given module types into the container
            </summary>
            <param name="container">Container to register into</param>
            <param name="moduleRegistrationTypes">NancyModule types</param>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.RegisterInstances(Nancy.TinyIoc.TinyIoCContainer,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.InstanceRegistration})">
            <summary>
            Register the given instances into the container
            </summary>
            <param name="container">Container to register into</param>
            <param name="instanceRegistrations">Instance registration types</param>
        </member>
        <member name="P:Nancy.Hosting.Aspnet.DefaultNancyAspNetBootstrapper.RequestStartupTasks">
            <summary>
            Gets all request startup tasks
            </summary>
        </member>
        <member name="T:Nancy.Hosting.Aspnet.NancyHandler">
            <summary>
            Bridges the communication between Nancy and ASP.NET based hosting.
            </summary>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.NancyHandler.#ctor(Nancy.INancyEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Hosting.Aspnet.NancyHandler"/> type for the specified <paramref name="engine"/>.
            </summary>
            <param name="engine">An <see cref="T:Nancy.INancyEngine"/> instance, that should be used by the handler.</param>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.NancyHandler.ProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
            <summary>
            Processes the ASP.NET request with Nancy.
            </summary>
            <param name="context">The <see cref="T:System.Web.HttpContextBase"/> of the request.</param>
            <param name="cb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.TinyIoCAspNetExtensions.AsPerRequestSingleton(Nancy.TinyIoc.TinyIoCContainer.RegisterOptions)">
            <summary>
            Registers the dependency as per request liftime
            </summary>
            <param name="registerOptions">Register options</param>
            <returns>Register options</returns>
        </member>
        <member name="M:Nancy.Hosting.Aspnet.TinyIoCAspNetExtensions.AsPerRequestSingleton(Nancy.TinyIoc.TinyIoCContainer.MultiRegisterOptions)">
            <summary>
            Registers each item in the collection as per request lifetime
            </summary>
            <param name="registerOptions">Register options</param>
            <returns>Register options</returns>
        </member>
    </members>
</doc>
