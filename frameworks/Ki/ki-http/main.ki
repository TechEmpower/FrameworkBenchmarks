
use ki:http;
use ki:json;
use ki:async;
use ki:sys;

func handler(http:Request req) http:Response {

	@ headers = Map<String>{};
	headers.set("Server", "ki-http");
	headers.set("Date", http:get_date());

	if(req.uri == "/plaintext") {
		return http:Response.text("Hello, World!", 200, "text/plain", headers);
	} else if(req.uri == "/json") {
		@ dec = json:decode("{\"message\":\"Hello, World!\"}") or { return http:Response.error(500); };
		@ enc = json:encode(dec);
		return http:Response.text(enc, 200, "application/json", headers);
	}

	return http:Response.error(404);
}

func spawn(?ptr arg) void {
	ifnull arg { return; }
	@ s = arg -> http:Server;
	s.start() or {
		println("Failed to start http server");
		return;
	};
}

func main() i32 {

	@ s = http:Server.init("0.0.0.0", 8080, handler, 50000) or { panic "Failed to start server"; };
	s.async = false;

	@ mut core_count = (sys:CpuInfo.core_count() or value 4) - 1;
	if(core_count < 4 || core_count > 1000) {
		core_count = 4;
	}
	@ mut i = 0#u32;
	while(i < core_count) {
		i++;
		@ task = async:Thread.start(spawn, s -> ptr);
	}
	spawn(s -> ptr);

	return 0;
}
