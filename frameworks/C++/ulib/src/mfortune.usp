<!--#
Test type 4: Fortunes
TechEmpower Web Framework Benchmarks
-->
<!--#declaration
#include "fortune.h"

static UString* pencoded;
static UMongoDBClient* mc;
static Fortune* pfortune2add;
static UVector<Fortune*>* pvfortune;

static void usp_fork_mfortune()
{
   U_TRACE(5, "::usp_fork_mfortune()")

   U_NEW(UMongoDBClient, mc, UMongoDBClient);

   if (mc->connect(U_NULLPTR, 0) == false)
      {
      U_WARNING("usp_fork_mfortune(): connection failed");

      delete mc;
             mc = U_NULLPTR;

      return;
      }

   if (mc->selectCollection("hello_world", "fortune") == false)
      {
      U_WARNING("usp_fork_mfortune(): selectCollection() failed");

      delete mc;
             mc = U_NULLPTR;

      return;
      }

   U_NEW(UString, pencoded, UString(100U));
   U_NEW(UVector<Fortune*>, pvfortune, UVector<Fortune*>);
   U_NEW(Fortune, pfortune2add, Fortune(0, U_STRING_FROM_CONSTANT("Additional fortune added at request time.")));
}

#ifdef DEBUG
static void usp_end_mfortune()
{
   U_TRACE(5, "::usp_end_mfortune()")

   if (pencoded)
      {
      delete mc;
      delete pencoded;
      delete pvfortune;
      delete pfortune2add;
      }
}
#endif
-->
<!doctype html><html><head><title>Fortunes</title></head><body><table><tr><th>id</th><th>message</th></tr><!--#code
Fortune* item;
UString result;
uint32_t i, n, sz;
char* ptr = UClientImage_Base::wbuffer->pend();

U_NEW(Fortune, item, Fortune(*pfortune2add));

pvfortune->push_back(item);

(void) mc->findAll();

for (i = 0, n = mc->vitem.size(); i < n; ++i)
   {
   (void) U_JFIND(mc->vitem[i], "message", result);

   U_NEW(Fortune, item, Fortune(i+1, result));

   result.clear();

   pvfortune->push_back(item);
   }

pvfortune->sort(Fortune::cmp_obj);

for (i = 0, ++n; i < n; ++i)
   {
   Fortune* elem = (*pvfortune)[i];

   UXMLEscape::encode(elem->message, *pencoded);

   sz = pencoded->size();

   u_put_unalignedp64(ptr, U_MULTICHAR_CONSTANT64('<','t','r','>','<','t','d','>'));

   ptr = u_num2str32(elem->id, ptr+8);

   u_put_unalignedp64(ptr, U_MULTICHAR_CONSTANT64('<','/','t','d','>','<','t','d'));
                      ptr += 8;

   *ptr++ = '>';

   (void) memcpy(ptr, pencoded->data(), sz);
                 ptr +=                 sz;

   u_put_unalignedp64(ptr,   U_MULTICHAR_CONSTANT64('<','/','t','d','>','<','/','t'));
   u_put_unalignedp16(ptr+8, U_MULTICHAR_CONSTANT16('r','>'));
                      ptr += 10;
   }

UClientImage_Base::wbuffer->size_adjust(ptr);

pvfortune->clear();
--></table></body></html>
