<!--#
Test type 3: Multiple database queries
TechEmpower Web Framework Benchmarks
-->
<!--#declaration
#include "world.h"

static bson_t* query;  
static UMongoDBClient* mc;

#ifndef AS_cpoll_cppsp_DO
static UVector<World*>* pvworld_query;
#endif

static void usp_fork_mquery()
{
   U_TRACE(5, "::usp_fork_mquery()")

   U_NEW(UMongoDBClient, mc, UMongoDBClient);

   if (mc->connect(U_NULLPTR, 0) == false)
      {
      U_WARNING("usp_fork_mquery(): connection disabled or failed");

      delete mc;
             mc = U_NULLPTR;

      return;
      }

   if (mc->selectCollection("hello_world", "world") == false)
      {
      U_WARNING("usp_fork_mquery(): selectCollection() failed");

      delete mc;
             mc = U_NULLPTR;

      return;
      }

   query = (bson_t*) U_SYSCALL_NO_PARAM(bson_new);  

#ifndef AS_cpoll_cppsp_DO
   U_NEW(UVector<World*>, pvworld_query, UVector<World*>(500));
#endif
}

#ifdef DEBUG
static void usp_end_mquery()
{
   U_TRACE(5, "::usp_end_mquery()")

   if (query)
      {
      delete mc;

      U_SYSCALL_VOID(bson_destroy, "%p", query);

#  ifndef AS_cpoll_cppsp_DO
      delete pvworld_query;
#  endif
      }
}
#endif
-->
<!--#header
Content-Type: application/json
-->
<!--#code
uint32_t id;
UString rnumber;
int i = 0, num_queries = UHTTP::getFormFirstNumericValue(1, 500);

(void) UClientImage_Base::wbuffer->reserve(36U * num_queries);

#ifdef AS_cpoll_cppsp_DO
char* ptr = UClientImage_Base::wbuffer->pend();

*ptr++ = '[';
#endif

while (true)
   {
   (void) mc->findOne(id = u_get_num_random(10000-1), query);

   (void) U_JFIND(mc->vitem[0], "randomNumber", rnumber);

#ifdef AS_cpoll_cppsp_DO
   uint32_t sz = rnumber.size();

   u_put_unalignedp32(ptr,   U_MULTICHAR_CONSTANT32('{','"','i','d'));
   u_put_unalignedp16(ptr+4, U_MULTICHAR_CONSTANT16('"',':'));

   ptr = u_num2str32(id, ptr+6);

   u_put_unalignedp64(ptr,   U_MULTICHAR_CONSTANT64(',','"','r','a','n','d','o','m'));
   u_put_unalignedp64(ptr+8, U_MULTICHAR_CONSTANT64('N','u','m','b','e','r','"',':'));
                      ptr += 16;

   (void) memcpy(ptr, rnumber.data(), sz);
                 ptr +=               sz;

   *ptr++ = '}';
#else
   World* pworld;

   U_NEW(World, pworld, World(id, rnumber.strtoul()));

   pvworld_query->push_back(pworld);
#endif

   rnumber.clear();

   if (++i == num_queries) break;

#ifdef AS_cpoll_cppsp_DO
   *ptr++ = ',';
#endif
   }

#ifdef AS_cpoll_cppsp_DO
*ptr++ = ']';

UClientImage_Base::wbuffer->size_adjust(ptr);
#else
USP_OBJ_JSON_stringify(*pvworld_query);
pvworld_query->clear();
#endif
-->
