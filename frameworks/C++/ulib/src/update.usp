<!--#
Test type 5: Database updates
TechEmpower Web Framework Benchmarks
-->
<!--#declaration
#include "world.h"

static World*           pworld_update;
static UString*         pquery;
static UOrmSession*     psql_update;
static UOrmStatement*   pstmt;
static UVector<World*>* pvworld_update;

static void usp_fork_update()
{
   U_TRACE(5, "::usp_fork_update()")

   U_NEW(UOrmSession, psql_update, UOrmSession(U_CONSTANT_TO_PARAM("hello_world")));

   if (psql_update->isReady() == false)
      {
      U_WARNING("usp_fork_update(): we cound't connect to db");

      return;
      }

   U_NEW(UOrmStatement, pstmt, UOrmStatement(*psql_update, U_CONSTANT_TO_PARAM("SELECT randomNumber FROM World WHERE id = ?")));

// if (UOrmDriver::isPGSQL()) *psql_update << "SET synchronous_commit TO OFF";

   U_NEW(World, pworld_update, World);

   pstmt->use( pworld_update->id);
   pstmt->into(pworld_update->randomNumber);

   U_NEW(UString, pquery, UString(U_CAPACITY));

   U_NEW(UVector<World*>, pvworld_update, UVector<World*>(500));
}

#ifdef DEBUG
static void usp_end_update()
{
   U_TRACE(5, "::usp_end_update()")

   delete psql_update;

   if (pstmt)
      {
      delete pstmt;
      delete pquery;
      delete pworld_update;
      delete pvworld_update;
      }
}
#endif
-->
<!--#header
Content-Type: application/json
-->
<!--#code
char* ptr;
World* pworld;
char* query = pquery->data();
int i = 0, num_queries = UHTTP::getFormFirstNumericValue(1, 500);

(void) memcpy(query,          "UPDATE World SET randomNumber = v.randomNumber FROM (VALUES",
              U_CONSTANT_SIZE("UPDATE World SET randomNumber = v.randomNumber FROM (VALUES"));
ptr = query + U_CONSTANT_SIZE("UPDATE World SET randomNumber = v.randomNumber FROM (VALUES");

while (true)
   {
   pworld_update->id = u_get_num_random(10000-1);

   pstmt->execute();

   pworld_update->randomNumber = u_get_num_random(10000-1);

   U_NEW(World, pworld, World(*pworld_update));

   pvworld_update->push_back(pworld);

   if (++i == num_queries) break;
   }

pvworld_update->sort();

#ifdef AS_cpoll_cppsp_DO
USP_PUTS_CHAR('[');
#endif

i = 0;

while (true)
   {
   pworld = pvworld_update->at(i);

   *ptr++ = '(';

   ptr = u_num2str32(pworld->id, ptr);

   u_put_unalignedp16(ptr, U_MULTICHAR_CONSTANT16(',',' '));
                      ptr += 2;

   ptr = u_num2str32(pworld->randomNumber, ptr);

   u_put_unalignedp16(ptr, U_MULTICHAR_CONSTANT16(')',','));
                      ptr += 2;

#ifdef AS_cpoll_cppsp_DO
   USP_PRINTF("{\"id\":%u,\"randomNumber\":%u}", pworld->id, pworld->randomNumber);
#endif

   if (++i == num_queries) break;

#ifdef AS_cpoll_cppsp_DO
   USP_PUTS_CHAR(',');
#endif
   }

#ifdef AS_cpoll_cppsp_DO
USP_PUTS_CHAR(']');
#endif

(void) memcpy(ptr-1,                 ") AS v (id, randomNumber) WHERE World.id = v.id;",
                     U_CONSTANT_SIZE(") AS v (id, randomNumber) WHERE World.id = v.id;")+1);

*psql_update << query;

pvworld_update->clear();
-->
