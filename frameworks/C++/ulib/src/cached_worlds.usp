<!--#
Test type 7: Caching
TechEmpower Web Framework Benchmarks
-->
<!--#declaration
#include "world.h"

static UCache*        cache;
static World*         pworld_query;
static UOrmSession*   psql_query;
static UOrmStatement* pstmt_query;

#ifndef AS_cpoll_cppsp_DO
static UVector<World*>* pvworld_query;
#endif

static void usp_init_cached_worlds()
{
   U_TRACE(5, "::usp_init_cached_worlds()")

   U_NEW(UOrmSession, psql_query, UOrmSession(U_CONSTANT_TO_PARAM("hello_world")));

   if (psql_query->isReady())
      {
      U_NEW(UOrmStatement, pstmt_query, UOrmStatement(*psql_query, U_CONSTANT_TO_PARAM("SELECT randomNumber FROM World WHERE id = ?")));

      if (pstmt_query == U_NULLPTR)
         {
         U_WARNING("usp_init_cached_worlds(): we cound't connect to db");

         return;
         }

      if (UOrmDriver::isPGSQL()) *psql_query << "BEGIN TRANSACTION";

      U_NEW(World, pworld_query, World);

      pstmt_query->use( pworld_query->id);
      pstmt_query->into(pworld_query->randomNumber);

      // creat and fill the cache

      U_NEW(UCache, cache, UCache);

      (void) cache->open(U_STRING_FROM_CONSTANT("/tmp/ULib_cached_worlds.cache"), 10000 * 64, U_NULLPTR, true);

      for (uint32_t i = 1; i < 10000-1; ++i)
         {
         pworld_query->id = i;

         pstmt_query->execute();

         cache->add(pworld_query->id, pworld_query->randomNumber);
         }

      delete pstmt_query;

#  ifndef AS_cpoll_cppsp_DO
      U_NEW(UVector<World*>, pvworld_query, UVector<World*>(500));
#  endif
      }
}

#ifdef DEBUG
static void usp_end_cached_worlds()
{
   U_TRACE(5, "::usp_end_cached_worlds()")

   delete psql_query;

   if (pstmt_query)
      {
      delete cache;
      delete pworld_query;

#  ifndef AS_cpoll_cppsp_DO
      delete pvworld_query;
#  endif
      }
}
#endif
-->
<!--#header
Content-Type: application/json
-->
<!--#code
int i = 0, num_queries = UHTTP::getFormFirstNumericValue(1, 500);

#ifdef AS_cpoll_cppsp_DO
USP_PUTS_CHAR('[');
#endif

while (true)
   {
   pworld_query->randomNumber = cache->getNumber((pworld_query->id = u_get_num_random(10000-1)));

#ifdef AS_cpoll_cppsp_DO
   USP_PRINTF("{\"id\":%u,\"randomNumber\":%u}", pworld_query->id, pworld_query->randomNumber);
#else
   World* pworld;

   U_NEW(World, pworld, World(*pworld_query));

   pvworld_query->push_back(pworld);
#endif

   if (++i == num_queries) break;

#ifdef AS_cpoll_cppsp_DO
   USP_PUTS_CHAR(',');
#endif
   }

#ifdef AS_cpoll_cppsp_DO
USP_PUTS_CHAR(']');
#else
USP_OBJ_JSON_stringify(*pvworld_query);
pvworld_query->clear();
#endif
-->
