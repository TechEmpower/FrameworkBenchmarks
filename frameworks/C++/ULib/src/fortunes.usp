<!--#
Test 4: Fortunes

This test exercises the ORM, database connectivity, dynamic-size collections,
sorting, server-side templates, XSS countermeasures, and character encoding.

Requirements

1.  The recommended URI is /fortunes.

2.  A Fortune database table contains a dozen Unix-style fortune-cookie messages.

3.  The schema for Fortune is id (int, primary key) and message (varchar).

4.  Using an ORM, all Fortune objects must be fetched from the Fortune table, and placed into a list data structure.
    Tests that do not use an ORM will be classified as "raw" meaning they use the platform's raw database connectivity.

5.  The list data structure must be a dynamic-size or equivalent and should not be dimensioned using foreknowledge of
    the row-count of the database table.

6.  Within the scope of the request, a new Fortune object must be constructed and added to the list. This confirms that
    the data structure is dynamic-sized. The new fortune is not persisted to the database; it is ephemeral for the scope of the request.

7.  The new Fortune's message must be "Additional fortune added at request time."

8.  The list of Fortune objects must be sorted by the order of the message field. No ORDER BY clause is permitted in the
    database query (ordering within the query would be of negligible value anyway since a newly instantiated Fortune is
	 added to the list prior to sorting).

9.  The sorted list must be provided to a server-side template and rendered to simple HTML (see below for minimum template).
    The resulting HTML table displays each Fortune's id number and message text.

10. This test does not include external assets (CSS, JavaScript); a later test type will include assets.

11. The HTML generated by the template must be sent as a response.

12. Be aware that the message text fields are stored as UTF-8 and one of the fortune cookie messages is in Japanese.

13. The resulting HTML must be delivered using UTF-8 encoding.

14. The Japanese fortune cookie message must be displayed correctly.

15. Be aware that at least one of the message text fields includes a <script> tag.

16. The server-side template must assume the message text cannot be trusted and must escape the message text properly.

17. The implementation is encouraged to use best practices for templates such as layout inheritence, separate header and
    footer files, and so on. However, this is not required. We request that implementations do not manage assets (JavaScript,
	 CSS, images). We are deferring asset management until we can craft a more suitable test.

18. The response content type must be set to text/html.

19. The response headers must include either Content-Length or Transfer-Encoding.

20. The response headers must include Server and Date.

21. Use of an in-memory cache of Fortune objects or rows by the application is not permitted.

22. Use of prepared statements for SQL database tests (e.g., for MySQL) is encouraged but not required.

23. gzip compression is not permitted.

24. Server support for HTTP Keep-Alive is strongly encouraged but not required.

25. If HTTP Keep-Alive is enabled, no maximum Keep-Alive timeout is specified by this test.

26. The request handler will be exercised at concurrency levels ranging from 8 to 256.

27. The request handler will be exercised using GET requests.

Example request:

GET /fortunes HTTP/1.1
Host: server
User-Agent: Mozilla/5.0 (X11; Linux x86_64) Gecko/20130501 Firefox/30.0 AppleWebKit/600.00 Chrome/30.0.0000.0 Trident/10.0 Safari/600.00
Cookie: uid=12345678901234567890; __utma=1.1234567890.1234567890.1234567890.1234567890.12; wd=2560x1600
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Connection: keep-alive

Example response:

HTTP/1.1 200 OK
Content-Length: 1190
Content-Type: text/html; charset=UTF-8
Server: Example
Date: Wed, 17 Apr 2013 12:00:00 GMT

<!doctype html><html><head><title>Fortunes</title></head><body><table><tr><th>id</th><th>message</th></tr><tr><td>11</td><td>&lt;script&gt;alert(&quot;This should not be displayed in a browser alert box.&quot;);&lt;/script&gt;</td></tr><tr><td>4</td><td>A bad random number generator: 1, 1, 1, 1, 1, 4.33e+67, 1, 1, 1</td></tr><tr><td>5</td><td>A computer program does what you tell it to do, not what you want it to do.</td></tr><tr><td>2</td><td>A computer scientist is someone who fixes things that aren't broken.</td></tr><tr><td>8</td><td>A list is only as strong as its weakest link. ‚ Donald Knuth</td></tr><tr><td>0</td><td>Additional fortune added at request time.</td></tr><tr><td>3</td><td>After enough decimal places, nobody gives a damn.</td></tr><tr><td>7</td><td>Any program that runs right is obsolete.</td></tr><tr><td>10</td><td>Computers make very fast, very accurate mistakes.</td></tr><tr><td>6</td><td>Emacs is a nice operating system, but I prefer UNIX. ‚ Tom Christaensen</td></tr><tr><td>9</td><td>Feature: A bug with seniority.</td></tr><tr><td>1</td><td>fortune: No such file or directory</td></tr><tr><td>12</td><td>„¨„º„„Ø„º„Ø„Æ„„≥„„„º„Ø</td></tr></table></body></html>
-->
<!--#declaration
#include "fortune.h"

static UOrmSession*		  psql_fortune;
static UOrmStatement*	  pstmt_fortune;
static Fortune*			  pfortune;
static UString*           pmessage;
static UVector<Fortune*>* pvfortune;

static void usp_init_fortunes()
{
	U_TRACE(5, "::usp_init_fortunes()")

	psql_fortune  = U_NEW(UOrmSession(U_CONSTANT_TO_PARAM("fortune")));
	pstmt_fortune = U_NEW(UOrmStatement(*psql_fortune, U_CONSTANT_TO_PARAM("SELECT id, message FROM Fortune")));

	if (pstmt_fortune == 0) U_ERROR("usp_init_fortunes(): we cound't connect to db, exiting...");

	pfortune  = U_NEW(Fortune);
	pvfortune = U_NEW(UVector<Fortune*>);
	pmessage  = U_NEW(U_STRING_FROM_CONSTANT("Additional fortune added at request time."));

	pstmt_fortune->into(*pfortune);
}

static void usp_end_fortunes()
{
	U_TRACE(5, "::usp_end_fortunes()")

	delete pstmt_fortune;
	delete psql_fortune;
	delete pvfortune;
	delete pfortune;
	delete pmessage;
}
-->
<!doctype html><html><head><title>Fortunes</title></head><body><table><tr><th>id</th><th>message</th></tr><!--#code
Fortune* elem;
unsigned char encoded[1024];

pstmt_fortune->execute();

	  pvfortune->push_back(U_NEW(Fortune(0, *pmessage)));
do	{ pvfortune->push_back(U_NEW(Fortune(*pfortune))); } while (pstmt_fortune->nextRow());

pvfortune->sort(Fortune::cmp_obj);

for (uint32_t i = 0, n = pvfortune->size(); i < n; ++i)
	{
	elem = (*pvfortune)[i];

	(void) u_xml_encode((const unsigned char*)U_STRING_TO_PARAM(elem->message), encoded);

	USP_PRINTF_ADD(
		"<tr>"
		"<td>%d</td>"
		"<td>%s</td>"
		"</tr>",
		elem->id, encoded);
	}

pvfortune->clear();
--></table></body></html>
