<!--#
Test 2: Single database query

This test exercises the framework's object-relational mapper (ORM), random number generator, database driver, and database connection pool.

Requirements

1.  For every request, a single row from a World table must be retrieved from a database table. 

2.  The recommended URI is /db.

3.  The schema for World is id (int, primary key) and randomNumber (int).

4.  The World table is known to contain 10,000 rows.

5.  The row retrieved must be selected by its id using a random number generator (ids range from 1 to 10,000).

6.  The row should be converted to an object using an object-relational mapping (ORM) tool.
    Tests that do not use an ORM will be identified with the suffix "raw," meaning they use the platform's raw database connectivity.

7.  The object (or database row, if an ORM is not used) must be serialized to JSON.

8.  The response content length should be approximately 32 bytes.

9.  The response content type must be set to application/json.

10. The response headers must include either Content-Length or Transfer-Encoding.

11. The response headers must include Server and Date.

12. Use of an in-memory cache of World objects or rows by the application is not permitted.

13. Use of prepared statements for SQL database tests (e.g., for MySQL) is encouraged but not required.

14. gzip compression is not permitted.

15. Server support for HTTP Keep-Alive is strongly encouraged but not required.

16. If HTTP Keep-Alive is enabled, no maximum Keep-Alive timeout is specified by this test.

17. The request handler will be exercised at concurrency levels ranging from 8 to 256.

18. The request handler will be exercised using GET requests.

Example request:

GET /db HTTP/1.1
Host: server
User-Agent: Mozilla/5.0 (X11; Linux x86_64) Gecko/20130501 Firefox/30.0 AppleWebKit/600.00 Chrome/30.0.0000.0 Trident/10.0 Safari/600.00
Cookie: uid=12345678901234567890; __utma=1.1234567890.1234567890.1234567890.1234567890.12; wd=2560x1600
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Connection: keep-alive

Example response:

HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Content-Length: 32
Server: Example
Date: Wed, 17 Apr 2013 12:00:00 GMT
{"id":3217,"randomNumber":2149}
-->
<!--#declaration
#include "world.h"

#define AS_cpoll_cppsp_DO

#ifndef AS_cpoll_cppsp_DO
static UValue*	pvalue;
#endif
static World*			 pworld_db;
static UOrmSession*	 psql_db;
static UOrmStatement* pstmt_db;

static void usp_init_db()
{
	U_TRACE(5, "::usp_init_db()")

	psql_db	= U_NEW(UOrmSession(U_CONSTANT_TO_PARAM("hello_world")));
	pstmt_db	= U_NEW(UOrmStatement(*psql_db, U_CONSTANT_TO_PARAM("SELECT randomNumber FROM World WHERE id = ?")));

	if (pstmt_db == 0) U_ERROR("usp_init_db(): we cound't connect to db, exiting...");

	pworld_db = U_NEW(World);

	pstmt_db->use( pworld_db->id);
	pstmt_db->into(pworld_db->randomNumber);

#ifndef AS_cpoll_cppsp_DO
	pvalue = U_NEW(UValue(OBJECT_VALUE));
#endif
}

static void usp_end_db()
{
	U_TRACE(5, "::usp_end_db()")

	delete pstmt_db;
	delete psql_db;
	delete pworld_db;
#ifndef AS_cpoll_cppsp_DO
	delete pvalue;
#endif
}
-->
<!--#header
Content-Type: application/json; charset=UTF-8
-->
<!--#code
pworld_db->id = u_get_num_random(10000);

pstmt_db->execute();

#ifdef AS_cpoll_cppsp_DO
USP_PRINTF_ADD("{\"id\":%d,\"randomNumber\":%d}", pworld_db->id, pworld_db->randomNumber);
#else
USP_JSON_stringify(*pvalue, World, *pworld_db);
#endif
-->
