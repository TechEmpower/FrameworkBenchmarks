<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nancy</name>
    </assembly>
    <members>
        <member name="F:Nancy.AsyncNamedPipelineBase`2.pipelineItems">
            <summary>
            Pipeline items to execute
            </summary>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToStartOfPipeline(`0)">
            <summary>
            Add an item to the start of the pipeline
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToStartOfPipeline(`1)">
            <summary>
            Add an item to the start of the pipeline
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToStartOfPipeline(Nancy.PipelineItem{`0},System.Boolean)">
            <summary>
            Add an item to the start of the pipeline
            </summary>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToStartOfPipeline(Nancy.PipelineItem{`1},System.Boolean)">
            <summary>
            Add an item to the start of the pipeline
            </summary>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToEndOfPipeline(`0)">
            <summary>
            Add an item to the end of the pipeline
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToEndOfPipeline(`1)">
            <summary>
            Add an item to the end of the pipeline
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToEndOfPipeline(Nancy.PipelineItem{`0},System.Boolean)">
            <summary>
            Add an item to the end of the pipeline
            </summary>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.AddItemToEndOfPipeline(Nancy.PipelineItem{`1},System.Boolean)">
            <summary>
            Add an item to the end of the pipeline
            </summary>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertItemAtPipelineIndex(System.Int32,`0)">
            <summary>
            Add an item to a specific place in the pipeline.
            </summary>
            <param name="index">Index to add at</param>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertItemAtPipelineIndex(System.Int32,`1)">
            <summary>
            Add an item to a specific place in the pipeline.
            </summary>
            <param name="index">Index to add at</param>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertItemAtPipelineIndex(System.Int32,Nancy.PipelineItem{`0},System.Boolean)">
            <summary>
            Add an item to a specific place in the pipeline.
            </summary>
            <param name="index">Index to add at</param>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertItemAtPipelineIndex(System.Int32,Nancy.PipelineItem{`1},System.Boolean)">
            <summary>
            Add an item to a specific place in the pipeline.
            </summary>
            <param name="index">Index to add at</param>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertBefore(System.String,`0)">
            <summary>
            Insert an item before a named item.
            If the named item does not exist the item is inserted at the start of the pipeline.
            </summary>
            <param name="name">Name of the item to insert before</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertBefore(System.String,`1)">
            <summary>
            Insert an item before a named item.
            If the named item does not exist the item is inserted at the start of the pipeline.
            </summary>
            <param name="name">Name of the item to insert before</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertBefore(System.String,Nancy.PipelineItem{`0})">
            <summary>
            Insert an item before a named item.
            If the named item does not exist the item is inserted at the start of the pipeline.
            </summary>
            <param name="name">Name of the item to insert before</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertBefore(System.String,Nancy.PipelineItem{`1})">
            <summary>
            Insert an item before a named item.
            If the named item does not exist the item is inserted at the start of the pipeline.
            </summary>
            <param name="name">Name of the item to insert before</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertAfter(System.String,`0)">
            <summary>
            Insert an item after a named item.
            If the named item does not exist the item is inserted at the end of the pipeline.
            </summary>
            <param name="name">Name of the item to insert after</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertAfter(System.String,`1)">
            <summary>
            Insert an item after a named item.
            If the named item does not exist the item is inserted at the end of the pipeline.
            </summary>
            <param name="name">Name of the item to insert after</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertAfter(System.String,Nancy.PipelineItem{`0})">
            <summary>
            Insert an item after a named item.
            If the named item does not exist the item is inserted at the end of the pipeline.
            </summary>
            <param name="name">Name of the item to insert after</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.InsertAfter(System.String,Nancy.PipelineItem{`1})">
            <summary>
            Insert an item after a named item.
            If the named item does not exist the item is inserted at the end of the pipeline.
            </summary>
            <param name="name">Name of the item to insert after</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.RemoveByName(System.String)">
            <summary>
            Remove a named pipeline item
            </summary>
            <param name="name">Name</param>
            <returns>Index of item that was removed or -1 if nothing removed</returns>
        </member>
        <member name="M:Nancy.AsyncNamedPipelineBase`2.Wrap(Nancy.PipelineItem{`1})">
            <summary>
            Wraps a sync delegate into it's async form
            </summary>
            <param name="syncDelegate">Sync pipeline instance</param>
            <returns>Async pipeline instance</returns>
        </member>
        <member name="P:Nancy.AsyncNamedPipelineBase`2.PipelineItems">
            <summary>
            Gets the current pipeline items
            </summary>
        </member>
        <member name="P:Nancy.AsyncNamedPipelineBase`2.PipelineDelegates">
            <summary>
            Gets the current pipeline item delegates
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner">
            <summary>
            Scans the app domain for assemblies and types
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.nancyAssembly">
            <summary>
            Nancy core assembly
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.types">
            <summary>
            App domain type cache
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.assemblies">
            <summary>
            App domain assemblies cache
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.nancyReferencingAssembliesLoaded">
            <summary>
            Indicates whether the all Assemblies, that references a Nancy assembly, have already been loaded
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.DefaultAssembliesToScan">
            <summary>
            The default assemblies for scanning.
            Includes the nancy assembly and anything referencing a nancy assembly
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.AddAssembliesToScan(System.String[])">
            <summary>
            Add assemblies to the list of assemblies to scan for Nancy types
            </summary>
            <param name="assemblyNames">One or more assembly names</param>
        </member>
        <member name="M:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.AddAssembliesToScan(System.Reflection.Assembly[])">
            <summary>
            Add assemblies to the list of assemblies to scan for Nancy types
            </summary>
            <param name="assemblies">One of more assemblies</param>
        </member>
        <member name="M:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.AddAssembliesToScan(System.Func{System.Reflection.Assembly,System.Boolean}[])">
            <summary>
            Add predicates for determining which assemblies to scan for Nancy types
            </summary>
            <param name="predicates">One or more predicates</param>
        </member>
        <member name="M:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.LoadAssemblies(System.String)">
            <summary>
            Load assemblies from a the app domain base directory matching a given wildcard.
            Assemblies will only be loaded if they aren't already in the appdomain.
            </summary>
            <param name="wildcardFilename">Wildcard to match the assemblies to load</param>
        </member>
        <member name="M:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.LoadAssemblies(System.String,System.String)">
            <summary>
            Load assemblies from a given directory matching a given wildcard.
            Assemblies will only be loaded if they aren't already in the appdomain.
            </summary>
            <param name="containingDirectory">Directory containing the assemblies</param>
            <param name="wildcardFilename">Wildcard to match the assemblies to load</param>
        </member>
        <member name="M:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.UpdateTypes">
            <summary>
            Refreshes the type cache if additional assemblies have been loaded.
            Note: This is called automatically if assemblies are loaded using LoadAssemblies.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.UpdateAssemblies">
            <summary>
            Updates the assembly cache from the appdomain
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.LoadAssembliesWithNancyReferences">
            <summary>
            Loads any assembly that references a Nancy assembly.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.TypesOf(System.Type)">
            <summary>
            Gets all types implementing a particular interface/base class
            </summary>
            <param name="type">Type to search for</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of types.</returns>
            <remarks>Will scan with <see cref="F:Nancy.Bootstrapper.ScanMode.All"/>.</remarks>
        </member>
        <member name="M:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.TypesOf(System.Type,Nancy.Bootstrapper.ScanMode)">
            <summary>
            Gets all types implementing a particular interface/base class
            </summary>
            <param name="type">Type to search for</param>
            <param name="mode">A <see cref="T:Nancy.Bootstrapper.ScanMode"/> value to determine which type set to scan in.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of types.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.TypesOf``1">
            <summary>
            Gets all types implementing a particular interface/base class
            </summary>
            <typeparam name="TType">Type to search for</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of types.</returns>
            <remarks>Will scan with <see cref="F:Nancy.Bootstrapper.ScanMode.All"/>.</remarks>
        </member>
        <member name="M:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.TypesOf``1(Nancy.Bootstrapper.ScanMode)">
            <summary>
            Gets all types implementing a particular interface/base class
            </summary>
            <typeparam name="TType">Type to search for</typeparam>
            <param name="mode">A <see cref="T:Nancy.Bootstrapper.ScanMode"/> value to determine which type set to scan in.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of types.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.GetAssemblyDirectories">
            <summary>
            Returns the directories containing dll files. It uses the default convention as stated by microsoft.
            </summary>
            <see cref="!:http://msdn.microsoft.com/en-us/library/system.appdomainsetup.privatebinpathprobe.aspx"/>
        </member>
        <member name="P:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.AssembliesToScan">
            <summary>
            Gets or sets a set of rules for which assemblies are scanned
            Defaults to just assemblies that have references to nancy, and nancy
            itself.
            Each item in the enumerable is a delegate that takes the assembly and 
            returns true if it is to be included. Returning false doesn't mean it won't
            be included as a true from another delegate will take precedence.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.Types">
            <summary>
            Gets app domain types.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner.Assemblies">
            <summary>
            Gets app domain types.
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.IApplicationRegistrations">
            <summary>
            Provides a hook to perform registrations during application startup.
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.IRegistrations">
            <summary>
            Provides a hook to perform registrations during application startup.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.IRegistrations.TypeRegistrations">
            <summary>
            Gets the type registrations to register for this startup task
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.IRegistrations.CollectionTypeRegistrations">
            <summary>
            Gets the collection registrations to register for this startup task
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.IRegistrations.InstanceRegistrations">
            <summary>
            Gets the instance registrations to register for this startup task
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.IRequestStartup">
            <summary>
            Provides a hook to execute code during request startup.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.IRequestStartup.Initialize(Nancy.Bootstrapper.IPipelines,Nancy.NancyContext)">
            <summary>
            Perform any initialisation tasks
            </summary>
            <param name="pipelines">Application pipelines</param>
            <param name="context">The current context</param>
        </member>
        <member name="T:Nancy.Bootstrapper.Registrations">
            <summary>
            Helper class for providing application registrations
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.Register``1(Nancy.Bootstrapper.Lifetime)">
            <summary>
            Scans for the implementation of <typeparamref name="TRegistration"/> and registers it.
            </summary>
            <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to scan for and register as.</typeparam>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.RegisterAll``1(Nancy.Bootstrapper.Lifetime)">
            <summary>
            Scans for all implementations of <typeparamref name="TRegistration"/> and registers them.
            </summary>
            <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to scan for and register as.</typeparam>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.Register``1(System.Collections.Generic.IEnumerable{System.Type},Nancy.Bootstrapper.Lifetime)">
            <summary>
            Registers the types provided by the <paramref name="defaultImplementations"/> parameters
            as <typeparamref name="TRegistration"/>.
            </summary>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to register as.</typeparam>
            <param name="defaultImplementations">The types to register.</param>
            <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.Register``1(System.Type,Nancy.Bootstrapper.Lifetime)">
            <summary>
            Registers the type provided by the <paramref name="implementation"/> parameter
            as <typeparamref name="TRegistration"/>.
            </summary>
            <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to register as.</typeparam>
            <param name="implementation">The <see cref="T:System.Type"/> to register as <typeparamref name="TRegistration"/>.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.Register``1(``0)">
            <summary>
            Registers an instance as <typeparamref name="TRegistration"/>.
            </summary>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to register as.</typeparam>
            <param name="instance">The instance to register.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.RegisterWithDefault``1(System.Type,Nancy.Bootstrapper.Lifetime)">
            <summary>
            Scans for a <see cref="T:System.Type"/> that implements <typeparamref name="TRegistration"/>. If found, then it
            will be used for the registration, else it will use <paramref name="defaultImplementation"/>.
            </summary>
            <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to register as.</typeparam>
            <param name="defaultImplementation">The implementation of <typeparamref name="TRegistration"/> that will be use if no other implementation can be found.</param>
            <remarks>
            When scanning, it will exclude the assembly that the <see cref="T:Nancy.Bootstrapper.Registrations"/> instance is defined in and it will also ignore
            the type specified by <paramref name="defaultImplementation"/>.
            </remarks>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.RegisterWithDefault``1(System.Func{``0})">
            <summary>
            Scans for an implementation of <typeparamref name="TRegistration"/> and registers it if found. If no implementation could
            be found, it will retrieve an instance of <typeparamref name="TRegistration"/> using the provided <paramref name="defaultImplementationFactory"/>,
            which will be used in the registration.
            </summary>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to register as.</typeparam>
            <param name="defaultImplementationFactory">Factory that provides an instance of <typeparamref name="TRegistration"/>.</param>
            <remarks>When scanning, it will exclude the assembly that the <see cref="T:Nancy.Bootstrapper.Registrations"/> instance is defined in</remarks>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.RegisterWithDefault``1(System.Collections.Generic.IEnumerable{System.Type},Nancy.Bootstrapper.Lifetime)">
            <summary>
            Scans for all implementations of <typeparamref name="TRegistration"/>. If no implementations could be found, then it
            will register the types specified by <paramref name="defaultImplementations"/>.
            </summary>
            <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to register as.</typeparam>
            <param name="defaultImplementations">The types to register if non could be located while scanning.</param>
            <remarks>
            When scanning, it will exclude the assembly that the <see cref="T:Nancy.Bootstrapper.Registrations"/> instance is defined in and it will also ignore
            the types specified by <paramref name="defaultImplementations"/>.
            </remarks>
        </member>
        <member name="M:Nancy.Bootstrapper.Registrations.RegisterWithUserThenDefault``1(System.Collections.Generic.IEnumerable{System.Type},Nancy.Bootstrapper.Lifetime)">
            <summary>
            Scans for all implementations of <typeparamref name="TRegistration"/> and registers them, followed by the
            types defined by the <paramref name="defaultImplementations"/> parameter.
            </summary>
            <typeparam name="TRegistration">The <see cref="T:System.Type"/> to register as.</typeparam>
            <param name="defaultImplementations">The types to register last.</param>
            <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
            <remarks>
            When scanning, it will exclude the assembly that the <see cref="T:Nancy.Bootstrapper.Registrations"/> instance is defined in and it will also ignore
            the types specified by <paramref name="defaultImplementations"/>.
            </remarks>
        </member>
        <member name="P:Nancy.Bootstrapper.Registrations.CollectionTypeRegistrations">
            <summary>
            Gets the collection registrations to register for this startup task
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.Registrations.InstanceRegistrations">
            <summary>
            Gets the instance registrations to register for this startup task
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.Registrations.TypeRegistrations">
            <summary>
            Gets the type registrations to register for this startup task
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.BootstrapperException">
            <summary>
            Exception that is raised from inside the <see cref="T:Nancy.Bootstrapper.NancyBootstrapperBase`1"/> type or one of
            the inheriting types.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.BootstrapperException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.BootstrapperException"/> class, with
            the provided <paramref name="message"/>.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.BootstrapperException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.BootstrapperException"/> class, with
            the provided <paramref name="message"/> and <paramref name="innerException"/>.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.BootstrapperException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Nancy.Bootstrapper.CollectionTypeRegistration">
            <summary>
            Represents a type to be registered multiple times into the
            container to later be resolved using an IEnumerable{RegistrationType}
            constructor dependency.
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.ContainerRegistration">
            <summary>
            Base class for container registrations
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.ContainerRegistration.ValidateTypeCompatibility(System.Type[])">
            <summary>
            Checks if all implementation types are assignable from the registration type, otherwise throws an exception.
            </summary>
            <param name="types">The implementation types.</param>
            <exception cref="T:System.ArgumentException">One or more of the implementation types is not assignable from the registration type.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Nancy.Bootstrapper.ContainerRegistration.RegistrationType"/> property must be assigned before the method is invoked.</exception>
        </member>
        <member name="P:Nancy.Bootstrapper.ContainerRegistration.Lifetime">
            <summary>
            Gets the lifetime of the registration
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.ContainerRegistration.RegistrationType">
            <summary>
            Registration type i.e. IMyInterface
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.CollectionTypeRegistration.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type},Nancy.Bootstrapper.Lifetime)">
            <summary>
            Represents a type to be registered multiple times into the
            container to later be resolved using an IEnumerable{RegistrationType}
            constructor dependency.
            </summary>
            <param name="registrationType">Registration type i.e. IMyInterface</param>
            <param name="implementationTypes">Collection of implementation type i.e. MyClassThatImplementsIMyInterface</param>
            <param name="lifetime">Lifetime to register the type as</param>
        </member>
        <member name="P:Nancy.Bootstrapper.CollectionTypeRegistration.ImplementationTypes">
            <summary>
            Collection of implementation type i.e. MyClassThatImplementsIMyInterface
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.FavIconApplicationStartup">
            <summary>
            Application startup task that attempts to locate a favicon. The startup will first scan all
            folders in the path defined by the provided <see cref="T:Nancy.IRootPathProvider"/> and if it cannot
            find one, it will fall back and use the default favicon that is embedded in the Nancy.dll file.
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.IApplicationStartup">
            <summary>
            Provides a hook to execute code during application startup.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.IApplicationStartup.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Perform any initialisation tasks
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="M:Nancy.Bootstrapper.FavIconApplicationStartup.#ctor(Nancy.IRootPathProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.FavIconApplicationStartup"/> class, with the
            provided <see cref="T:Nancy.IRootPathProvider"/> instance.
            </summary>
            <param name="rootPathProvider">The <see cref="T:Nancy.IRootPathProvider"/> that should be used to scan for a favicon.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.FavIconApplicationStartup.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Perform any initialisation tasks
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="P:Nancy.Bootstrapper.FavIconApplicationStartup.FavIcon">
            <summary>
            Gets the default favicon
            </summary>
            <value>A byte array, containing a favicon.ico file.</value>
        </member>
        <member name="P:Nancy.Bootstrapper.IPipelines.BeforeRequest">
            <summary>
            <para>
            The pre-request hook
            </para>
            <para>
            The PreRequest hook is called prior to processing a request. If a hook returns
            a non-null response then processing is aborted and the response provided is
            returned.
            </para>
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.IPipelines.AfterRequest">
            <summary>
            <para>
            The post-request hook
            </para>
            <para>
            The post-request hook is called after the response is created. It can be used
            to rewrite the response or add/remove items from the context.
            </para>
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.IPipelines.OnError">
            <summary>
            <para>
            The error hook
            </para>
            <para>
            The error hook is called if an exception is thrown at any time during the pipeline.
            If no error hook exists a standard InternalServerError response is returned
            </para>
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.InstanceRegistration">
            <summary>
            Represents an instance to be registered into the container
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.InstanceRegistration.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.InstanceRegistration"/> class.
            </summary>
            <param name="registrationType">The registration type.</param>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="P:Nancy.Bootstrapper.InstanceRegistration.Implementation">
            <summary>
            Implementation object instance i.e. instance of MyClassThatImplementsIMyInterface
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.Lifetime">
            <summary>
            Represents the lifetime of a container registration
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.Lifetime.Transient">
            <summary>
            Transient lifetime - each request to the container for
            the type will result in a new version being returned.
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.Lifetime.Singleton">
            <summary>
            Singleton - each request to the container for the type
            will result in the same instance being returned.
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.Lifetime.PerRequest">
            <summary>
            PerRequest - within the context of each request each request
            for the type will result in the same instance being returned.
            Different requests will have different versions.
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException">
            <summary>
            Exception raised when the <see cref="T:Nancy.Bootstrapper.NancyBootstrapperBase`1"/> discovers more than one
            <see cref="T:Nancy.IRootPathProvider"/> implementation in the loaded assemblies.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException"/> class.
            </summary>
            <param name="providerTypes">The provider types.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.StoreProviderTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Stores the provider types.
            </summary>
            <param name="providerTypes">The provider types.</param>
        </member>
        <member name="P:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.ProviderTypes">
            <summary>
            Gets the provider types.
            </summary>
            <value>
            The provider types.
            </value>
        </member>
        <member name="P:Nancy.Bootstrapper.MultipleRootPathProvidersLocatedException.Message">
            <summary>
            Returns a more friendly and informative message if the list of providers is available.
            </summary>
            <remarks>
            Message generated will be of the format:
            <example>
            More than one IRootPathProvider was found:
               Nancy.Tests.Functional.Tests.CustomRootPathProvider2
               Nancy.Tests.Functional.Tests.CustomRootPathProvider
            and since we do not know which one you want to use, you need to override the RootPathProvider property on your bootstrapper and specify which one to use. Sorry for the inconvenience.
            </example>
            </remarks>
        </member>
        <member name="T:Nancy.Bootstrapper.NancyInternalConfiguration">
            <summary>
            Configuration class for Nancy's internals.
            Contains implementation types/configuration for Nancy that usually
            do not require overriding in "general use".
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyInternalConfiguration.WithOverrides(System.Action{Nancy.Bootstrapper.NancyInternalConfiguration})">
            <summary>
            Default Nancy configuration with specific overloads
            </summary>
            <param name="configurationBuilder">Configuration builder for overriding the default configuration properties.</param>
            <returns>Nancy configuration instance</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyInternalConfiguration.GetTypeRegistations">
            <summary>
            Returns the configuration types as a TypeRegistration collection
            </summary>
            <returns>TypeRegistration collection representing the configuration types</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyInternalConfiguration.GetCollectionTypeRegistrations">
            <summary>
            Returns the collection configuration types as a CollectionTypeRegistration collection
            </summary>
            <returns>CollectionTypeRegistration collection representing the configuration types</returns>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.Default">
            <summary>
            Gets the Nancy default configuration
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyInternalConfiguration.IsValid">
            <summary>
            Gets a value indicating whether the configuration is valid.
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.Pipelines">
            <summary>
            Default implementation of the Nancy pipelines
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.Pipelines.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.Pipelines"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.Pipelines.#ctor(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.Pipelines"/> class and clones the hooks from
            the provided <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.Pipelines.BeforeRequest">
            <summary>
            <para>
            The pre-request hook
            </para>
            <para>
            The PreRequest hook is called prior to processing a request. If a hook returns
            a non-null response then processing is aborted and the response provided is
            returned.
            </para>
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.Pipelines.AfterRequest">
            <summary>
            <para>
            The post-request hook
            </para>
            <para>
            The post-request hook is called after the response is created. It can be used
            to rewrite the response or add/remove items from the context.
            </para>
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.Pipelines.OnError">
            <summary>
            <para>
            The error hook
            </para>
            <para>
            The error hook is called if an exception is thrown at any time during the pipeline.
            If no error hook exists a standard InternalServerError response is returned
            </para>
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.ScanMode">
            <summary>
            Determines which set of types that the <see cref="T:Nancy.Bootstrapper.AppDomainAssemblyTypeScanner"/> should scan in.
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.ScanMode.All">
            <summary>
            All available types.
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.ScanMode.OnlyNancy">
            <summary>
            Only in types that are defined in the Nancy assembly.
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.ScanMode.ExcludeNancy">
            <summary>
            Only types that are defined outside the Nancy assembly.
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.ScanMode.OnlyNancyNamespace">
            <summary>
            Only Namespaces that starts with 'Nancy'
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.ScanMode.ExcludeNancyNamespace">
            <summary>
            Only Namespaces that does not start with Nancy
            </summary>
        </member>
        <member name="T:Nancy.Conventions.AcceptHeaderCoercionConventions">
            <summary>
            Collection of accept header coercions
            </summary>
        </member>
        <member name="T:Nancy.Conventions.BuiltInAcceptHeaderCoercions">
            <summary>
            Built in functions for coercing accept headers.
            <seealso cref="T:Nancy.Conventions.DefaultAcceptHeaderCoercionConventions"/>
            </summary>
        </member>
        <member name="M:Nancy.Conventions.BuiltInAcceptHeaderCoercions.CoerceBlankAcceptHeader(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Decimal}},Nancy.NancyContext)">
            <summary>
            Adds a default accept header if there isn't one.
            </summary>
            <param name="currentAcceptHeaders">Current headers</param>
            <param name="context">Context</param>
            <returns>Modified headers or original if no modification required</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInAcceptHeaderCoercions.CoerceStupidBrowsers(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Decimal}},Nancy.NancyContext)">
            <summary>
            Replaces the accept header of stupid browsers that request XML instead
            of HTML.
            </summary>
            <param name="currentAcceptHeaders">Current headers</param>
            <param name="context">Context</param>
            <returns>Modified headers or original if no modification required</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInAcceptHeaderCoercions.BoostHtml(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Decimal}},Nancy.NancyContext)">
            <summary>
            Boosts the priority of HTML for browsers that ask for xml and html with the
            same priority.
            </summary>
            <param name="currentAcceptHeaders">Current headers</param>
            <param name="context">Context</param>
            <returns>Modified headers or original if no modification required</returns>
        </member>
        <member name="T:Nancy.Conventions.BuiltInCultureConventions">
            <summary>
            Built in functions for determining current culture
            <seealso cref="T:Nancy.Conventions.DefaultCultureConventions"/>
            </summary>
        </member>
        <member name="M:Nancy.Conventions.BuiltInCultureConventions.FormCulture(Nancy.NancyContext)">
            <summary>
            Checks to see if the Form has a CurrentCulture key.
            </summary>
            <param name="context">NancyContext</param>
            <returns>CultureInfo if found in Form otherwise null</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInCultureConventions.PathCulture(Nancy.NancyContext)">
            <summary>
            Checks to see if the first argument in the Path can be used to make a CultureInfo.
            </summary>
            <param name="context">NancyContext</param>
            <returns>CultureInfo if found in Path otherwise null</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInCultureConventions.HeaderCulture(Nancy.NancyContext)">
            <summary>
            Checks to see if the AcceptLanguage in the Headers can be used to make a CultureInfo. Uses highest weighted if multiple defined.
            </summary>
            <param name="context">NancyContext</param>
            <returns>CultureInfo if found in Headers otherwise null</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInCultureConventions.SessionCulture(Nancy.NancyContext)">
            <summary>
            Checks to see if the Session has a CurrentCulture key
            </summary>
            <param name="context">NancyContext</param>
            <returns>CultureInfo if found in Session otherwise null</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInCultureConventions.CookieCulture(Nancy.NancyContext)">
            <summary>
            Checks to see if the Cookies has a CurrentCulture key
            </summary>
            <param name="context">NancyContext</param>
            <returns>CultureInfo if found in Cookies otherwise null</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInCultureConventions.ThreadCulture(Nancy.NancyContext)">
            <summary>
            Uses the Thread.CurrentThread.CurrentCulture
            </summary>
            <param name="context">NancyContext</param>
            <returns>CultureInfo from CurrentThread</returns>
        </member>
        <member name="M:Nancy.Conventions.BuiltInCultureConventions.IsValidCultureInfoName(System.String)">
            <summary>
            Validates culture name
            </summary>
            <param name="name">Culture name eg\en-GB</param>
            <returns>True/False if valid culture</returns>
        </member>
        <member name="P:Nancy.Conventions.BuiltInCultureConventions.CultureNames">
            <summary>
            Gets a set of all valid cultures
            </summary>
        </member>
        <member name="T:Nancy.Conventions.CultureConventions">
            <summary>
            Collection class for static culture conventions
            </summary>
        </member>
        <member name="M:Nancy.Conventions.CultureConventions.#ctor(System.Collections.Generic.IEnumerable{System.Func{Nancy.NancyContext,System.Globalization.CultureInfo}})">
            <summary>
            Creates a new instance of CultureConventions
            </summary>
            <param name="conventions"></param>
        </member>
        <member name="T:Nancy.Conventions.DefaultAcceptHeaderCoercionConventions">
            <summary>
            Wires up the default conventions for the accept header coercion
            </summary>
        </member>
        <member name="T:Nancy.Conventions.IConvention">
            <summary>
            Provides Nancy convention defaults and validation
            </summary>
        </member>
        <member name="M:Nancy.Conventions.IConvention.Initialise(Nancy.Conventions.NancyConventions)">
            <summary>
            Initialise any conventions this class "owns"
            </summary>
            <param name="conventions">Convention object instance</param>
        </member>
        <member name="M:Nancy.Conventions.IConvention.Validate(Nancy.Conventions.NancyConventions)">
            <summary>
            Asserts that the conventions that this class "owns" are valid
            </summary>
            <param name="conventions">Conventions object instance</param>
            <returns>Tuple containing true/false for valid/invalid, and any error messages</returns>
        </member>
        <member name="M:Nancy.Conventions.DefaultCultureConventions.Initialise(Nancy.Conventions.NancyConventions)">
            <summary>
            Initialise culture conventions
            </summary>
            <param name="conventions"></param>
        </member>
        <member name="M:Nancy.Conventions.DefaultCultureConventions.Validate(Nancy.Conventions.NancyConventions)">
            <summary>
            Determine if culture conventions are valid
            </summary>
            <param name="conventions"></param>
            <returns></returns>
        </member>
        <member name="M:Nancy.Conventions.DefaultCultureConventions.ConfigureDefaultConventions(Nancy.Conventions.NancyConventions)">
            <summary>
            Setup default conventions
            </summary>
            <param name="conventions"></param>
        </member>
        <member name="T:Nancy.Conventions.DefaultStaticContentsConventions">
            <summary>
            Defines the default static contents conventions.
            </summary>
        </member>
        <member name="M:Nancy.Conventions.DefaultStaticContentsConventions.Initialise(Nancy.Conventions.NancyConventions)">
            <summary>
            Initialise any conventions this class "owns".
            </summary>
            <param name="conventions">Convention object instance.</param>
        </member>
        <member name="M:Nancy.Conventions.DefaultStaticContentsConventions.Validate(Nancy.Conventions.NancyConventions)">
            <summary>
            Asserts that the conventions that this class "owns" are valid
            </summary>
            <param name="conventions">Conventions object instance.</param>
            <returns>Tuple containing true/false for valid/invalid, and any error messages.</returns>
        </member>
        <member name="T:Nancy.Conventions.DefaultViewLocationConventions">
            <summary>
            Defines the default static contents conventions.
            </summary>
        </member>
        <member name="M:Nancy.Conventions.DefaultViewLocationConventions.Initialise(Nancy.Conventions.NancyConventions)">
            <summary>
            Initialise any conventions this class "owns".
            </summary>
            <param name="conventions">Convention object instance.</param>
        </member>
        <member name="M:Nancy.Conventions.DefaultViewLocationConventions.Validate(Nancy.Conventions.NancyConventions)">
            <summary>
            Asserts that the conventions that this class "owns" are valid.
            </summary>
            <param name="conventions">Conventions object instance.</param>
            <returns>Tuple containing true/false for valid/invalid, and any error messages.</returns>
        </member>
        <member name="T:Nancy.Conventions.NancyConventions">
            <summary>
            Nancy configurable conventions
            </summary>
        </member>
        <member name="F:Nancy.Conventions.NancyConventions.conventions">
            <summary>
            Discovered conventions
            </summary>
        </member>
        <member name="M:Nancy.Conventions.NancyConventions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Conventions.NancyConventions"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Conventions.NancyConventions.Validate">
            <summary>
            Validates the conventions
            </summary>
            <returns>A tuple containing a flag indicating validity, and any error messages</returns>
        </member>
        <member name="M:Nancy.Conventions.NancyConventions.GetInstanceRegistrations">
            <summary>
            Gets the instance registrations for registering into the container
            </summary>
            <returns>Enumeration of InstanceRegistration types</returns>
        </member>
        <member name="M:Nancy.Conventions.NancyConventions.BuildDefaultConventions">
            <summary>
            Locates all the default conventions and calls them in
            turn to build up the default conventions.
            </summary>
        </member>
        <member name="P:Nancy.Conventions.NancyConventions.ViewLocationConventions">
            <summary>
            Gets or sets the conventions for locating view templates
            </summary>
        </member>
        <member name="P:Nancy.Conventions.NancyConventions.StaticContentsConventions">
            <summary>
            Gets or sets the conventions for locating and serving static content
            </summary>
        </member>
        <member name="P:Nancy.Conventions.NancyConventions.AcceptHeaderCoercionConventions">
            <summary>
            Gets or sets the conventions for coercing accept headers from their source
            values to the real values for content negotiation
            <seealso cref="T:Nancy.Conventions.BuiltInAcceptHeaderCoercions"/>
            </summary>
        </member>
        <member name="P:Nancy.Conventions.NancyConventions.CultureConventions">
            <summary>
            Gets or sets the conventions for determining request culture
            </summary>
        </member>
        <member name="T:Nancy.Conventions.StaticContentConventionBuilder">
            <summary>
            Helper class for defining directory-based conventions for static contents.
            </summary>
        </member>
        <member name="M:Nancy.Conventions.StaticContentConventionBuilder.AddDirectory(System.String,System.String,System.String[])">
            <summary>
            Adds a directory-based convention for static convention.
            </summary>
            <param name="requestedPath">The path that should be matched with the request.</param>
            <param name="contentPath">The path to where the content is stored in your application, relative to the root. If this is <see langword="null"/> then it will be the same as <paramref name="requestedPath"/>.</param>
            <param name="allowedExtensions">A list of extensions that is valid for the conventions. If not supplied, all extensions are valid.</param>
            <returns>A <see cref="T:Nancy.Responses.GenericFileResponse"/> instance for the requested static contents if it was found, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Nancy.Conventions.StaticContentConventionBuilder.AddFile(System.String,System.String)">
            <summary>
            Adds a file-based convention for static convention.
            </summary>
            <param name="requestedFile">The file that should be matched with the request.</param>
            <param name="contentFile">The file that should be served when the requested path is matched.</param>
        </member>
        <member name="M:Nancy.Conventions.StaticContentConventionBuilder.IsWithinContentFolder(System.String,System.String)">
            <summary>
            Returns whether the given filename is contained within the content folder
            </summary>
            <param name="contentRootPath">Content root path</param>
            <param name="fileName">Filename requested</param>
            <returns>True if contained within the content root, false otherwise</returns>
        </member>
        <member name="T:Nancy.Conventions.StaticContentConventionBuilder.ResponseFactoryCacheKey">
            <summary>
            Used to uniquely identify a request. Needed for when two Nancy applications want to serve up static content of the same
            name from within the same AppDomain.
            </summary>
        </member>
        <member name="P:Nancy.Conventions.StaticContentConventionBuilder.ResponseFactoryCacheKey.Path">
            <summary>
            The path of the static content for which this response is being issued
            </summary>
        </member>
        <member name="P:Nancy.Conventions.StaticContentConventionBuilder.ResponseFactoryCacheKey.RootPath">
            <summary>
            The root folder path of the Nancy application for which this response will be issued
            </summary>
        </member>
        <member name="T:Nancy.Conventions.StaticContentHelper">
            <summary>
            Nancy static convention helper
            </summary>
        </member>
        <member name="M:Nancy.Conventions.StaticContentHelper.MapStaticContent(Nancy.Conventions.NancyConventions,System.Action{Nancy.Conventions.StaticFileContent,Nancy.Conventions.StaticDirectoryContent})">
            <summary>
            Extension method for NancyConventions
            <code>
            conventions.MapStaticContent((File, Directory) =>
            {
                File["/page.js"] = "page.js";
                Directory["/images"] = "images";
            });
            </code>
            </summary>
            <param name="conventions">The conventions to add to.</param>
            <param name="staticConventions">The callback method allows you to describe the static content</param>
        </member>
        <member name="T:Nancy.Conventions.StaticContentsConventions">
            <summary>
            Collection class for static content conventions
            </summary>
        </member>
        <member name="T:Nancy.Conventions.StaticContentsConventionsExtensions">
            <summary>
            Extension methods to adding static content conventions.
            </summary>
        </member>
        <member name="M:Nancy.Conventions.StaticContentsConventionsExtensions.AddDirectory(System.Collections.Generic.IList{System.Func{Nancy.NancyContext,System.String,Nancy.Response}},System.String,System.String,System.String[])">
            <summary>
            Adds a directory-based convention for static convention.
            </summary>
            <param name="conventions">The conventions to add to.</param>
            <param name="requestedPath">The path that should be matched with the request.</param>
            <param name="contentPath">The path to where the content is stored in your application, relative to the root. If this is <see langword="null" /> then it will be the same as <paramref name="requestedPath"/>.</param>
            <param name="allowedExtensions">A list of extensions that is valid for the conventions. If not supplied, all extensions are valid.</param>
        </member>
        <member name="M:Nancy.Conventions.StaticContentsConventionsExtensions.AddFile(System.Collections.Generic.IList{System.Func{Nancy.NancyContext,System.String,Nancy.Response}},System.String,System.String)">
            <summary>
            Adds a directory-based convention for static convention.
            </summary>
            <param name="conventions">The conventions to add to.</param>
            <param name="requestedFile">The file that should be matched with the request.</param>
            <param name="contentFile">The file that should be served when the requested path is matched.</param>
        </member>
        <member name="T:Nancy.Conventions.StaticDirectoryContent">
            <summary>
            Nancy static directory convention helper
            </summary>
        </member>
        <member name="M:Nancy.Conventions.StaticDirectoryContent.#ctor(Nancy.Conventions.NancyConventions)">
            <summary>
            Creates a new instance of StaticDirectoryContent
            </summary>
            <param name="conventions">NancyConventions, to which static directories get added</param>
        </member>
        <member name="P:Nancy.Conventions.StaticDirectoryContent.Item(System.String,System.String[])">
            <summary>
            Adds a new static directory to the nancy conventions
            </summary>
            <param name="requestDirectory">The route of the file</param>
            <param name="allowedExtensions">A list of extensions that is valid for the conventions. If not supplied, all extensions are valid</param>
        </member>
        <member name="T:Nancy.Conventions.StaticFileContent">
            <summary>
            Nancy static file convention helper
            </summary>
        </member>
        <member name="M:Nancy.Conventions.StaticFileContent.#ctor(Nancy.Conventions.NancyConventions)">
            <summary>
            Creates a new instance of StaticFileContent
            </summary>
            <param name="conventions">NancyConventions, to which static files get added</param>
        </member>
        <member name="P:Nancy.Conventions.StaticFileContent.Item(System.String)">
            <summary>
            Adds a new static file to the nancy conventions
            </summary>
            <param name="requestFile">The route of the file</param>
        </member>
        <member name="T:Nancy.Culture.DefaultCultureService">
            <summary>
            Determines current culture for context
            </summary>
        </member>
        <member name="T:Nancy.Culture.ICultureService">
            <summary>
            Provides current culture for Nancy context
            </summary>
        </member>
        <member name="M:Nancy.Culture.ICultureService.DetermineCurrentCulture(Nancy.NancyContext)">
            <summary>
            Determine current culture for NancyContext
            </summary>
            <param name="context">NancyContext</param>
            <returns>CultureInfo</returns>
        </member>
        <member name="M:Nancy.Culture.DefaultCultureService.#ctor(Nancy.Conventions.CultureConventions)">
            <summary>
            Creates a new instance of DefaultCultureService
            </summary>
            <param name="cultureConventions">CultureConventions to use for determining culture</param>
        </member>
        <member name="M:Nancy.Culture.DefaultCultureService.DetermineCurrentCulture(Nancy.NancyContext)">
            <summary>
            Determine current culture for NancyContext
            </summary>
            <param name="context">NancyContext</param>
            <returns>CultureInfo</returns>
        </member>
        <member name="T:Nancy.DefaultResponseFormatterFactory">
            <summary>
            The default implementation of the <see cref="T:Nancy.IResponseFormatterFactory"/> interface.
            </summary>
        </member>
        <member name="T:Nancy.IResponseFormatterFactory">
            <summary>
            Defines the functionality of a <see cref="T:Nancy.IResponseFormatter"/> factory.
            </summary>
        </member>
        <member name="M:Nancy.IResponseFormatterFactory.Create(Nancy.NancyContext)">
            <summary>
            Creates a new <see cref="T:Nancy.IResponseFormatter"/> instance.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance that should be used by the response formatter.</param>
            <returns>An <see cref="T:Nancy.IResponseFormatter"/> instance.</returns>
        </member>
        <member name="M:Nancy.DefaultResponseFormatterFactory.#ctor(Nancy.IRootPathProvider,System.Collections.Generic.IEnumerable{Nancy.ISerializer})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.DefaultResponseFormatter"/> class, with the
            provided <see cref="T:Nancy.IRootPathProvider"/>.
            </summary>
            <param name="rootPathProvider"></param>
        </member>
        <member name="M:Nancy.DefaultResponseFormatterFactory.Create(Nancy.NancyContext)">
            <summary>
            Creates a new <see cref="T:Nancy.IResponseFormatter"/> instance.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance that should be used by the response formatter.</param>
            <returns>An <see cref="T:Nancy.IResponseFormatter"/> instance.</returns>
        </member>
        <member name="T:Nancy.DefaultRootPathProvider">
            <summary>
            Default implementation of <see cref="T:Nancy.IRootPathProvider"/>.
            </summary>
        </member>
        <member name="T:Nancy.IRootPathProvider">
            <summary>
            Defines the functionality to retrieve the root folder path of the current Nancy application.
            </summary>
        </member>
        <member name="T:Nancy.IHideObjectMembers">
            <summary>
            Helper interface used to hide the base <see cref="T:System.Object"/>  members from the fluent API to make it much cleaner
            in Visual Studio intellisense.
            </summary>
            <remarks>Created by Daniel Cazzulino http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx</remarks>
        </member>
        <member name="M:Nancy.IHideObjectMembers.Equals(System.Object)">
            <summary>
            Hides the <see cref="M:Nancy.IHideObjectMembers.Equals(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:Nancy.IHideObjectMembers.GetHashCode">
            <summary>
            Hides the <see cref="M:Nancy.IHideObjectMembers.GetHashCode"/> method.
            </summary>
        </member>
        <member name="M:Nancy.IHideObjectMembers.GetType">
            <summary>
            Hides the <see cref="M:Nancy.IHideObjectMembers.GetType"/> method.
            </summary>
        </member>
        <member name="M:Nancy.IHideObjectMembers.ToString">
            <summary>
            Hides the <see cref="M:Nancy.IHideObjectMembers.ToString"/> method.
            </summary>
        </member>
        <member name="M:Nancy.IRootPathProvider.GetRootPath">
            <summary>
            Returns the root folder path of the current Nancy application.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the path of the root folder.</returns>
        </member>
        <member name="M:Nancy.DefaultRootPathProvider.GetRootPath">
            <summary>
            Returns the root folder path of the current Nancy application.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the path of the root folder.</returns>
        </member>
        <member name="T:Nancy.DefaultStaticContentProvider">
            <summary>
            The default static content provider that uses <see cref="!:Nancy.Conventions.StaticContentConventions"/>
            to determine what static content to serve.
            </summary>
        </member>
        <member name="T:Nancy.IStaticContentProvider">
            <summary>
            Provides static content delivery
            </summary>
        </member>
        <member name="M:Nancy.IStaticContentProvider.GetContent(Nancy.NancyContext)">
            <summary>
            Gets the static content response, if possible.
            </summary>
            <param name="context">Current context</param>
            <returns>Response if serving content, null otherwise</returns>
        </member>
        <member name="M:Nancy.DefaultStaticContentProvider.#ctor(Nancy.IRootPathProvider,Nancy.Conventions.StaticContentsConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.DefaultStaticContentProvider"/> class, using the
            provided <paramref name="rootPathProvider"/> and <paramref name="conventions"/>.
            </summary>
            <param name="rootPathProvider">The current root path provider.</param>
            <param name="conventions">The static content conventions.</param>
        </member>
        <member name="M:Nancy.DefaultStaticContentProvider.GetContent(Nancy.NancyContext)">
            <summary>
            Gets the static content response, if possible.
            </summary>
            <param name="context">Current context</param>
            <returns>Response if serving content, null otherwise</returns>
        </member>
        <member name="T:Nancy.Diagnostics.DefaultRequestTraceFactory">
            <summary>
            Default implementation of the <see cref="T:Nancy.Diagnostics.IRequestTraceFactory"/> interface.
            </summary>
        </member>
        <member name="T:Nancy.Diagnostics.IRequestTraceFactory">
            <summary>
            Defines the functionality for creating an <see cref="T:Nancy.Diagnostics.IRequestTrace"/> instance.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.IRequestTraceFactory.Create(Nancy.Request)">
            <summary>
            Creates an <see cref="T:Nancy.Diagnostics.IRequestTrace"/> instance.
            </summary>
            <param name="request">A <see cref="T:Nancy.Request"/> instance.</param>
            <returns>An <see cref="T:Nancy.Diagnostics.IRequestTrace"/> instance.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultRequestTraceFactory.Create(Nancy.Request)">
            <summary>
            Creates an <see cref="T:Nancy.Diagnostics.IRequestTrace"/> instance.
            </summary>
            <param name="request">A <see cref="T:Nancy.Request"/> instance.</param>
            <returns>An <see cref="T:Nancy.Diagnostics.IRequestTrace"/> instance.</returns>
        </member>
        <member name="T:Nancy.Diagnostics.DefaultTraceLog">
            <summary>
            Default implementation of the <see cref="T:Nancy.Diagnostics.ITraceLog"/> interface.
            </summary>
        </member>
        <member name="T:Nancy.Diagnostics.ITraceLog">
            <summary>
            Provides request trace logging.
            Uses a delegate to write to the log, rather than creating strings regardless
            of whether the log is enabled or not.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.ITraceLog.WriteLog(System.Action{System.Text.StringBuilder})">
            <summary>
            Write to the log
            </summary>
            <param name="logDelegate">Log writing delegate</param>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultTraceLog.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Nancy.Diagnostics.DefaultTraceLog"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultTraceLog.WriteLog(System.Action{System.Text.StringBuilder})">
            <summary>
            Write to the log
            </summary>
            <param name="logDelegate">Log writing delegate</param>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultTraceLog.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Nancy.Diagnostics.DiagnosticsConfiguration">
            <summary>
            Settings for the diagnostics dashboard
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.DiagnosticsConfiguration"/> class,
            using the <see cref="!:CryptographyConfiguration.Default"/> cryptographic
            configuration.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsConfiguration.#ctor(Nancy.Cryptography.CryptographyConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Diagnostics.DiagnosticsConfiguration"/> class,
            using the <paramref name="cryptographyConfiguration"/> cryptographic
            configuration.
            </summary>
            <param name="cryptographyConfiguration">The <see cref="P:Nancy.Diagnostics.DiagnosticsConfiguration.CryptographyConfiguration"/> to use with diagnostics.</param>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsConfiguration.CookieName">
            <summary>
            Gets or sets the name of the cookie used by the diagnostics dashboard.
            </summary>
            <remarks>The default is __ncd</remarks>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsConfiguration.CryptographyConfiguration">
            <summary>
            Gets or sets the cryptography config to use for securing the diagnostics dashboard
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsConfiguration.Password">
            <summary>
            Gets or sets password for accessing the diagnostics screen.
            This should be secure :-)
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsConfiguration.Path">
            <summary>
            Gets or sets the path that the diagnostics dashboard will be accessible on.
            </summary>
            <remarks>The default is /_Nancy. The path should always start with a forward slash.</remarks>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsConfiguration.SlidingTimeout">
            <summary>
            The number of minutes that expiry of the diagnostics dashboard will be extended each time it is used.
            </summary>
            <remarks>The default is 15 minutes.</remarks>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsConfiguration.Valid">
            <summary>
            Gets a value indicating whether the configuration is valid
            </summary>
        </member>
        <member name="T:Nancy.Diagnostics.ConcurrentLimitedCollection`1">
            <summary>
            Provides a thread safe, limited size, collection of objects
            If the collection is full the oldest item gets removed.
            </summary>
            <typeparam name="T">Type to store</typeparam>
        </member>
        <member name="M:Nancy.Diagnostics.ConcurrentLimitedCollection`1.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the ConcurrentLimitedCollection class
            </summary>
            <param name="maxSize">Maximum size for the collection</param>
        </member>
        <member name="M:Nancy.Diagnostics.ConcurrentLimitedCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nancy.Diagnostics.ConcurrentLimitedCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.Diagnostics.ConcurrentLimitedCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            If the collection is full, the oldest item is removed and the new item
            is added to the end of the collection.
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.Diagnostics.ConcurrentLimitedCollection`1.Clear">
            <summary>
            Clear the collection
            </summary>
        </member>
        <member name="T:Nancy.Diagnostics.DisabledDiagnostics">
            <summary>
            Implementation of the <see cref="T:Nancy.Diagnostics.IDiagnostics"/> interface that does nothing.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.IDiagnostics.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Initialise diagnostics
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="M:Nancy.Diagnostics.DisabledDiagnostics.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Initialise diagnostics
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="T:Nancy.Diagnostics.IRequestTrace">
            <summary>
            Defines the functionality for tracing a request.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.IRequestTrace.Items">
            <summary>
            Gets or sets the generic item store.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the items.</value>
        </member>
        <member name="P:Nancy.Diagnostics.IRequestTrace.RequestData">
            <summary>
            Gets or sets the information about the request.
            </summary>
            <value>An <see cref="P:Nancy.Diagnostics.IRequestTrace.RequestData"/> instance.</value>
        </member>
        <member name="P:Nancy.Diagnostics.IRequestTrace.ResponseData">
            <summary>
            Gets or sets the information about the response.
            </summary>
            <value>An <see cref="P:Nancy.Diagnostics.IRequestTrace.ResponseData"/> instance.</value>
        </member>
        <member name="P:Nancy.Diagnostics.IRequestTrace.TraceLog">
            <summary>
            Gets the trace log.
            </summary>
            <value>A <see cref="T:Nancy.Diagnostics.ITraceLog"/> instance.</value>
        </member>
        <member name="T:Nancy.Diagnostics.NullLog">
            <summary>
            Implementation of <see cref="T:Nancy.Diagnostics.ITraceLog"/> that does not log anything.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.NullLog.WriteLog(System.Action{System.Text.StringBuilder})">
            <summary>
            Write to the log
            </summary>
            <param name="logDelegate">Log writing delegate</param>
        </member>
        <member name="M:Nancy.Diagnostics.NullLog.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Nancy.Diagnostics.RequestData">
            <summary>
            Stores request trace information about the request.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.RequestData.op_Implicit(Nancy.Request)~Nancy.Diagnostics.RequestData">
            <summary>
            Implicitly casts a <see cref="T:Nancy.Request"/> instance into a <see cref="T:Nancy.Diagnostics.RequestData"/> instance.
            </summary>
            <param name="request">A <see cref="T:Nancy.Request"/> instance.</param>
            <returns>A <see cref="T:Nancy.Diagnostics.RequestData"/> instance.</returns>
        </member>
        <member name="P:Nancy.Diagnostics.RequestData.ContentType">
            <summary>
            Gets or sets the content type of the request.
            </summary>
            <value>A <see cref="T:System.String"/> containing the content type.</value>
        </member>
        <member name="P:Nancy.Diagnostics.RequestData.Headers">
            <summary>
            Gets or sets the headers of the request.
            </summary>
            <value>A <see cref="T:Nancy.RequestHeaders"/> instance containing the headers.</value>
        </member>
        <member name="P:Nancy.Diagnostics.RequestData.Method">
            <summary>
            Gets the HTTP verb of the request.
            </summary>
            <value>A <see cref="T:System.String"/> containing the HTTP verb.</value>
        </member>
        <member name="P:Nancy.Diagnostics.RequestData.Url">
            <summary>
            Gets or sets the <see cref="P:Nancy.Diagnostics.RequestData.Url"/> that was requested.
            </summary>
        </member>
        <member name="T:Nancy.Diagnostics.ResponseData">
            <summary>
            Stores request trace information about the response.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.ResponseData.op_Implicit(Nancy.Response)~Nancy.Diagnostics.ResponseData">
            <summary>
            Implicitly casts a <see cref="T:Nancy.Response"/> instance into a <see cref="T:Nancy.Diagnostics.ResponseData"/> instance.
            </summary>
            <param name="response">A <see cref="T:Nancy.Response"/> instance.</param>
            <returns>A <see cref="T:Nancy.Diagnostics.ResponseData"/> instance.</returns>
        </member>
        <member name="P:Nancy.Diagnostics.ResponseData.ContentType">
            <summary>
            Gets or sets the content type of the response.
            </summary>
            <value>A <see cref="T:System.String"/> containing the content type.</value>
        </member>
        <member name="P:Nancy.Diagnostics.ResponseData.Headers">
            <summary>
            Gets or sets the headers of the response.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the headers.</value>
        </member>
        <member name="P:Nancy.Diagnostics.ResponseData.StatusCode">
            <summary>
            Gets or sets the <see cref="T:Nancy.HttpStatusCode"/> of the response.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.ResponseData.Type">
            <summary>
            Gets or sets the <see cref="P:Nancy.Diagnostics.ResponseData.Type"/> of the response.
            </summary>
            <value>A <see cref="P:Nancy.Diagnostics.ResponseData.Type"/> instance.</value>
        </member>
        <member name="T:Nancy.DisabledStaticContentProvider">
            <summary>
            A "disabled" static content provider - always returns null
            so no content is served.
            </summary>
        </member>
        <member name="M:Nancy.DisabledStaticContentProvider.GetContent(Nancy.NancyContext)">
            <summary>
            Gets the static content response, if possible.
            </summary>
            <param name="context">Current context</param>
            <returns>Response if serving content, null otherwise</returns>
        </member>
        <member name="T:Nancy.ErrorHandling.RouteExecutionEarlyExitException">
            <summary>
            Here Be Dragons - Using an exception for flow control to hotwire route execution.
            It can be useful to call a method inside a route definition and have that method
            immediately return a response (such as for authentication). This exception is used
            to allow that flow.
            </summary>
        </member>
        <member name="M:Nancy.ErrorHandling.RouteExecutionEarlyExitException.#ctor(Nancy.Response,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ErrorHandling.RouteExecutionEarlyExitException"/> class.
            </summary>
            <param name="response">
            The response.
            </param>
            <param name="reason">
            The reason for the early exit.
            </param>
        </member>
        <member name="P:Nancy.ErrorHandling.RouteExecutionEarlyExitException.Reason">
            <summary>
            Gets or sets the reason for the early exit
            </summary>
        </member>
        <member name="P:Nancy.ErrorHandling.RouteExecutionEarlyExitException.Response">
            <summary>
            Gets or sets the response
            </summary>
        </member>
        <member name="T:Nancy.ModelValidationResultExtensions">
            <summary>
            Containing extensions for the <see cref="P:Nancy.Validation.ModelValidationResult.Errors"/> property.
            </summary>
        </member>
        <member name="M:Nancy.ModelValidationResultExtensions.Add(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Nancy.Validation.ModelValidationError}},System.String,System.String)">
            <summary>
            Adds a new <see cref="T:Nancy.Validation.ModelValidationError"/> to the validation results.
            </summary>
            <param name="errors">A reference to the <see cref="P:Nancy.Validation.ModelValidationResult.Errors"/> property.</param>
            <param name="name">The name of the property.</param>
            <param name="errorMessage">The validation error message.</param>
            <returns>A reference to the <see cref="P:Nancy.Validation.ModelValidationResult.Errors"/> property.</returns>
        </member>
        <member name="T:Nancy.Extensions.RequestStreamExtensions">
            <summary>
            Extensions for RequestStream.
            </summary>
        </member>
        <member name="M:Nancy.Extensions.RequestStreamExtensions.AsString(Nancy.IO.RequestStream,System.Text.Encoding)">
            <summary>
            Gets the request body as a string.
            </summary>
            <param name="stream">The request body stream.</param>
            <param name="encoding">The encoding to use, <see cref="P:System.Text.Encoding.UTF8"/> by default.</param>
            <returns>The request body as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Nancy.Extensions.StreamExtensions">
            <summary>
            Containing extensions for the <see cref="T:System.IO.Stream"/> object.
            </summary>
        </member>
        <member name="F:Nancy.Extensions.StreamExtensions.BufferSize">
            <summary>
            Buffer size for copy operations
            </summary>
        </member>
        <member name="M:Nancy.Extensions.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Action{System.IO.Stream,System.IO.Stream,System.Exception})">
            <summary>
            Copies the contents between two <see cref="T:System.IO.Stream"/> instances in an async fashion.
            </summary>
            <param name="source">The source stream to copy from.</param>
            <param name="destination">The destination stream to copy to.</param>
            <param name="onComplete">Delegate that should be invoked when the operation has completed. Will pass the source, destination and exception (if one was thrown) to the function. Can pass in <see langword="null"/>.</param>
        </member>
        <member name="T:Nancy.Extensions.TypeExtensions">
            <summary>
            Containing extensions for the <see cref="T:System.Type"/> object.
            </summary>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.GetAssemblyPath(System.Type)">
            <summary>
            Gets the path of the assembly that contains the provided type.
            </summary>
            <param name="source">The <see cref="T:System.Type"/> to look up the assembly path for.</param>
            <returns>A string containing the path of the assembly that contains the type.</returns>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.IsArray(System.Type)">
            <summary>
            Checks if a type is an array or not
            </summary>
            <param name="source">The type to check.</param>
            <returns><see langword="true" /> if the type is an array, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Determines whether the <paramref name="genericType"/> is assignable from
            <paramref name="givenType"/> taking into account generic definitions
            </summary>
            <remarks>
            Borrowed from: http://tmont.com/blargh/2011/3/determining-if-an-open-generic-type-isassignablefrom-a-type
            </remarks>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.IsCollection(System.Type)">
            <summary>
            Checks if a type is an collection or not
            </summary>
            <param name="source">The type to check.</param>
            <returns><see langword="true" /> if the type is an collection, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Checks if a type is enumerable or not
            </summary>
            <param name="source">The type to check.</param>
            <returns><see langword="true" /> if the type is an enumerable, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Nancy.Extensions.TypeExtensions.IsNumeric(System.Type)">
            <summary>
            Determines if a type is numeric.  Nullable numeric types are considered numeric.
            </summary>
            <remarks>
            Boolean is not considered numeric.
            </remarks>
        </member>
        <member name="T:Nancy.Diagnostics.DefaultRequestTracing">
            <summary>
            Default implementation of the <see cref="T:Nancy.Diagnostics.IRequestTracing"/> interface.
            </summary>
        </member>
        <member name="T:Nancy.Diagnostics.IRequestTracing">
            <summary>
            Defines the functionality for request tracing.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.IRequestTracing.AddRequestDiagnosticToSession(System.Guid,Nancy.NancyContext)">
            <summary>
            Adds the <see cref="T:Nancy.Diagnostics.IRequestTrace"/>, of the provided, <see cref="T:Nancy.NancyContext"/> to the trace log.
            </summary>
            <param name="sessionId">The identifier of the trace.</param>
            <param name="context">A <see cref="T:Nancy.NancyContext"/> instance.</param>
        </member>
        <member name="M:Nancy.Diagnostics.IRequestTracing.Clear">
            <summary>
            Clears the trace log.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.IRequestTracing.CreateSession">
            <summary>
            Creates a new trace session.
            </summary>
            <returns>A <see cref="T:System.Guid"/> which represents the identifier of the new trace session.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.IRequestTracing.GetSessions">
            <summary>
            Gets all the available <see cref="T:Nancy.Diagnostics.RequestTraceSession"/> instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nancy.Diagnostics.IRequestTracing.IsValidSessionId(System.Guid)">
            <summary>
            Checks if the provided <paramref name="sessionId"/> is valid or not.
            </summary>
            <param name="sessionId">A <see cref="T:System.Guid"/> representing the session to check.</param>
            <returns><see langword="true"/> if the session is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultRequestTracing.AddRequestDiagnosticToSession(System.Guid,Nancy.NancyContext)">
            <summary>
            Adds the <see cref="T:Nancy.Diagnostics.IRequestTrace"/>, of the provided, <see cref="T:Nancy.NancyContext"/> to the trace log.
            </summary>
            <param name="sessionId">The identifier of the trace.</param>
            <param name="context">A <see cref="T:Nancy.NancyContext"/> instance.</param>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultRequestTracing.Clear">
            <summary>
            Clears the trace log.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultRequestTracing.CreateSession">
            <summary>
            Creates a new trace session.
            </summary>
            <returns>A <see cref="T:System.Guid"/> which represents the identifier of the new trace session.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultRequestTracing.GetSessions">
            <summary>
            Gets all the available <see cref="T:Nancy.Diagnostics.RequestTraceSession"/> instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultRequestTracing.IsValidSessionId(System.Guid)">
            <summary>
            Checks if the provided <paramref name="sessionId"/> is valid or not.
            </summary>
            <param name="sessionId">A <see cref="T:System.Guid"/> representing the session to check.</param>
            <returns><see langword="true"/> if the session is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Nancy.NancyModule">
            <summary>
            Basic class containing the functionality for defining routes and actions in Nancy.
            </summary>
        </member>
        <member name="T:Nancy.INancyModule">
            <summary>
            Nancy module base interface
            Defines all the properties / behaviour needed by Nancy internally
            </summary>
        </member>
        <member name="P:Nancy.INancyModule.After">
            <summary><para>
            The post-request hook
            </para><para>
            The post-request hook is called after the response is created by the route execution.
            It can be used to rewrite the response or add/remove items from the context.
            </para></summary>
        </member>
        <member name="P:Nancy.INancyModule.Before">
            <summary><para>
            The pre-request hook
            </para><para>
            The PreRequest hook is called prior to executing a route. If any item in the
            pre-request pipeline returns a response then the route is not executed and the
            response is returned.
            </para></summary>
        </member>
        <member name="P:Nancy.INancyModule.OnError">
            <summary><para>
            The error hook
            </para><para>
            The error hook is called if an exception is thrown at any time during executing
            the PreRequest hook, a route and the PostRequest hook. It can be used to set
            the response and/or finish any ongoing tasks (close database session, etc).
            </para></summary>
        </member>
        <member name="P:Nancy.INancyModule.Context">
            <summary>
            Gets or sets the current Nancy context
            </summary><value>A <see cref="T:Nancy.NancyContext" /> instance.</value>
        </member>
        <member name="P:Nancy.INancyModule.Response">
            <summary>
            An extension point for adding support for formatting response contents.
            </summary><value>This property will always return <see langword="null" /> because it acts as an extension point.</value><remarks>Extension methods to this property should always return <see cref="P:Nancy.NancyModuleBase.Response" /> or one of the types that can implicitly be types into a <see cref="P:Nancy.NancyModuleBase.Response" />.</remarks>
        </member>
        <member name="P:Nancy.INancyModule.ModelBinderLocator">
            <summary>
            Gets or sets the model binder locator
            </summary>
        </member>
        <member name="P:Nancy.INancyModule.ModelValidationResult">
            <summary>
            Gets or sets the model validation result
            </summary>
        </member>
        <member name="P:Nancy.INancyModule.ValidatorLocator">
            <summary>
            Gets or sets the validator locator.
            </summary>
        </member>
        <member name="P:Nancy.INancyModule.Request">
            <summary>
            Gets or sets an <see cref="P:Nancy.INancyModule.Request"/> instance that represents the current request.
            </summary><value>An <see cref="P:Nancy.INancyModule.Request"/> instance.</value>
        </member>
        <member name="P:Nancy.INancyModule.ViewFactory">
            <summary>
            The extension point for accessing the view engines in Nancy.
            </summary><value>An <see cref="T:Nancy.ViewEngines.IViewFactory" /> instance.</value><remarks>This is automatically set by Nancy at runtime.</remarks>
        </member>
        <member name="P:Nancy.INancyModule.ModulePath">
            <summary>
            Get the root path of the routes in the current module.
            </summary><value>A <see cref="T:System.String" /> containing the root path of the module or <see langword="null" /> if no root path should be used.</value><remarks>All routes will be relative to this root path.</remarks>
        </member>
        <member name="P:Nancy.INancyModule.Routes">
            <summary>
            Gets all declared routes by the module.
            </summary><value>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance, containing all <see cref="T:Nancy.Routing.Route" /> instances declared by the module.</value>
        </member>
        <member name="P:Nancy.INancyModule.Text">
            <summary>
            Gets or sets the dynamic object used to locate text resources.
            </summary>
        </member>
        <member name="P:Nancy.INancyModule.View">
            <summary>
            Renders a view from inside a route handler.
            </summary>
            <value>A <see cref="T:Nancy.ViewRenderer"/> instance that is used to determine which view that should be rendered.</value>
        </member>
        <member name="P:Nancy.INancyModule.Negotiate">
            <summary>
            Used to negotiate the content returned based on Accepts header.
            </summary>
            <value>A <see cref="T:Nancy.Responses.Negotiation.Negotiator"/> instance that is used to negotiate the content returned.</value>
        </member>
        <member name="M:Nancy.NancyModule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.NancyModule"/> class.
            </summary>
        </member>
        <member name="M:Nancy.NancyModule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.NancyModule"/> class.
            </summary>
            <param name="modulePath">A <see cref="T:System.String"/> containing the root relative path that all paths in the module will be a subset of.</param>
        </member>
        <member name="P:Nancy.NancyModule.ViewBag">
            <summary>
            Non-model specific data for rendering in the response
            </summary>
        </member>
        <member name="P:Nancy.NancyModule.Delete">
            <summary>
            Gets <see cref="T:Nancy.NancyModule.RouteBuilder"/> for declaring actions for DELETE requests.
            </summary>
            <value>A <see cref="T:Nancy.NancyModule.RouteBuilder"/> instance.</value>
        </member>
        <member name="P:Nancy.NancyModule.Get">
            <summary>
            Gets <see cref="T:Nancy.NancyModule.RouteBuilder"/> for declaring actions for GET requests.
            </summary>
            <value>A <see cref="T:Nancy.NancyModule.RouteBuilder"/> instance.</value>
        </member>
        <member name="P:Nancy.NancyModule.Head">
            <summary>
            Gets <see cref="T:Nancy.NancyModule.RouteBuilder"/> for declaring actions for HEAD requests.
            </summary>
            <value>A <see cref="T:Nancy.NancyModule.RouteBuilder"/> instance.</value>
        </member>
        <member name="P:Nancy.NancyModule.Options">
            <summary>
            Gets <see cref="T:Nancy.NancyModule.RouteBuilder"/> for declaring actions for OPTIONS requests.
            </summary>
            <value>A <see cref="T:Nancy.NancyModule.RouteBuilder"/> instance.</value>
        </member>
        <member name="P:Nancy.NancyModule.Patch">
            <summary>
            Gets <see cref="T:Nancy.NancyModule.RouteBuilder"/> for declaring actions for PATCH requests.
            </summary>
            <value>A <see cref="T:Nancy.NancyModule.RouteBuilder"/> instance.</value>
        </member>
        <member name="P:Nancy.NancyModule.Post">
            <summary>
            Gets <see cref="T:Nancy.NancyModule.RouteBuilder"/> for declaring actions for POST requests.
            </summary>
            <value>A <see cref="T:Nancy.NancyModule.RouteBuilder"/> instance.</value>
        </member>
        <member name="P:Nancy.NancyModule.Put">
            <summary>
            Gets <see cref="T:Nancy.NancyModule.RouteBuilder"/> for declaring actions for PUT requests.
            </summary>
            <value>A <see cref="T:Nancy.NancyModule.RouteBuilder"/> instance.</value>
        </member>
        <member name="P:Nancy.NancyModule.ModulePath">
            <summary>
            Get the root path of the routes in the current module.
            </summary>
            <value>
            A <see cref="T:System.String" /> containing the root path of the module or <see langword="null" />
            if no root path should be used.</value><remarks>All routes will be relative to this root path.
            </remarks>
        </member>
        <member name="P:Nancy.NancyModule.Routes">
            <summary>
            Gets all declared routes by the module.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing all <see cref="T:Nancy.Routing.Route"/> instances declared by the module.</value>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
        </member>
        <member name="P:Nancy.NancyModule.Session">
            <summary>
            Gets the current session.
            </summary>
        </member>
        <member name="P:Nancy.NancyModule.View">
            <summary>
            Renders a view from inside a route handler.
            </summary>
            <value>A <see cref="T:Nancy.ViewRenderer"/> instance that is used to determine which view that should be rendered.</value>
        </member>
        <member name="P:Nancy.NancyModule.Negotiate">
            <summary>
            Used to negotiate the content returned based on Accepts header.
            </summary>
            <value>A <see cref="T:Nancy.Responses.Negotiation.Negotiator"/> instance that is used to negotiate the content returned.</value>
        </member>
        <member name="P:Nancy.NancyModule.ValidatorLocator">
            <summary>
            Gets or sets the validator locator.
            </summary>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
        </member>
        <member name="P:Nancy.NancyModule.Request">
            <summary>
            Gets or sets an <see cref="P:Nancy.NancyModule.Request"/> instance that represents the current request.
            </summary>
            <value>An <see cref="P:Nancy.NancyModule.Request"/> instance.</value>
        </member>
        <member name="P:Nancy.NancyModule.ViewFactory">
            <summary>
            The extension point for accessing the view engines in Nancy.
            </summary><value>An <see cref="T:Nancy.ViewEngines.IViewFactory"/> instance.</value>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
        </member>
        <member name="P:Nancy.NancyModule.After">
            <summary><para>
            The post-request hook
            </para><para>
            The post-request hook is called after the response is created by the route execution.
            It can be used to rewrite the response or add/remove items from the context.
            </para>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
            </summary>
        </member>
        <member name="P:Nancy.NancyModule.Before">
            <summary>
            <para>
            The pre-request hook
            </para>
            <para>
            The PreRequest hook is called prior to executing a route. If any item in the
            pre-request pipeline returns a response then the route is not executed and the
            response is returned.
            </para>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
            </summary>
        </member>
        <member name="P:Nancy.NancyModule.OnError">
            <summary>
            <para>
            The error hook
            </para>
            <para>
            The error hook is called if an exception is thrown at any time during executing
            the PreRequest hook, a route and the PostRequest hook. It can be used to set
            the response and/or finish any ongoing tasks (close database session, etc).
            </para>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
            </summary>
        </member>
        <member name="P:Nancy.NancyModule.Context">
            <summary>
            Gets or sets the current Nancy context
            </summary>
            <value>A <see cref="T:Nancy.NancyContext"/> instance.</value>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
        </member>
        <member name="P:Nancy.NancyModule.Response">
            <summary>
            An extension point for adding support for formatting response contents.
            </summary><value>This property will always return <see langword="null" /> because it acts as an extension point.</value><remarks>Extension methods to this property should always return <see cref="P:Nancy.NancyModuleBase.Response" /> or one of the types that can implicitly be types into a <see cref="P:Nancy.NancyModuleBase.Response" />.</remarks>
        </member>
        <member name="P:Nancy.NancyModule.ModelBinderLocator">
            <summary>
            Gets or sets the model binder locator
            </summary>
            <remarks>This is automatically set by Nancy at runtime.</remarks>
        </member>
        <member name="P:Nancy.NancyModule.ModelValidationResult">
            <summary>
            Gets or sets the model validation result
            </summary>
            <remarks>This is automatically set by Nancy at runtime when you run validation.</remarks>
        </member>
        <member name="T:Nancy.NancyModule.RouteBuilder">
            <summary>
            Helper class for configuring a route handler in a module.
            </summary>
        </member>
        <member name="M:Nancy.NancyModule.RouteBuilder.#ctor(System.String,Nancy.NancyModule)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.NancyModule.RouteBuilder"/> class.
            </summary>
            <param name="method">The HTTP request method that the route should be available for.</param>
            <param name="parentModule">The <see cref="T:Nancy.INancyModule"/> that the route is being configured for.</param>
        </member>
        <member name="P:Nancy.NancyModule.RouteBuilder.Item(System.String)">
            <summary>
            Defines a Nancy route for the specified <paramref name="path"/>.
            </summary>
            <value>A delegate that is used to invoke the route.</value>
        </member>
        <member name="P:Nancy.NancyModule.RouteBuilder.Item(System.String,System.Func{Nancy.NancyContext,System.Boolean})">
            <summary>
            Defines a Nancy route for the specified <paramref name="path"/> and <paramref name="condition"/>.
            </summary>
            <value>A delegate that is used to invoke the route.</value>
        </member>
        <member name="P:Nancy.NancyModule.RouteBuilder.Item(System.String,System.Boolean)">
            <summary>
            Defines an async route for the specified <paramref name="path"/>
            </summary>
        </member>
        <member name="P:Nancy.NancyModule.RouteBuilder.Item(System.String,System.Func{Nancy.NancyContext,System.Boolean},System.Boolean)">
            <summary>
            Defines an async route for the specified <paramref name="path"/> and <paramref name="condition"/>.
            </summary>
        </member>
        <member name="P:Nancy.NancyModule.RouteBuilder.Item(System.String,System.String)">
            <summary>
            Defines a Nancy route for the specified <paramref name="path"/> and <paramref name="name"/>
            </summary>
            <value>A delegate that is used to invoke the route.</value>
        </member>
        <member name="P:Nancy.NancyModule.RouteBuilder.Item(System.String,System.String,System.Func{Nancy.NancyContext,System.Boolean})">
            <summary>
            Defines a Nancy route for the specified <paramref name="path"/>, <paramref name="condition"/> and <paramref name="name"/>
            </summary>
            <value>A delegate that is used to invoke the route.</value>
        </member>
        <member name="P:Nancy.NancyModule.RouteBuilder.Item(System.String,System.String,System.Boolean)">
            <summary>
            Defines an async route for the specified <paramref name="path"/> and <paramref name="name"/>
            </summary>
        </member>
        <member name="P:Nancy.NancyModule.RouteBuilder.Item(System.String,System.String,System.Func{Nancy.NancyContext,System.Boolean},System.Boolean)">
            <summary>
            Defines an async route for the specified <paramref name="path"/>, <paramref name="condition"/> and <paramref name="name"/>
            </summary>
        </member>
        <member name="T:Nancy.Routing.INancyModuleBuilder">
            <summary>
            Defines the functionality to build a fully configured NancyModule instance.
            </summary>
        </member>
        <member name="M:Nancy.Routing.INancyModuleBuilder.BuildModule(Nancy.INancyModule,Nancy.NancyContext)">
            <summary>
            Builds a fully configured <see cref="T:Nancy.INancyModule"/> instance, based upon the provided <paramref name="module"/>.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> that should be configured.</param>
            <param name="context">The current request context.</param>
            <returns>A fully configured <see cref="T:Nancy.INancyModule"/> instance.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsModuleBuilder.BuildModule(Nancy.INancyModule,Nancy.NancyContext)">
            <summary>
            Builds a fully configured <see cref="T:Nancy.INancyModule"/> instance, based upon the provided <paramref name="module"/>.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> that should be configured.</param>
            <param name="context">The current request context.</param>
            <returns>A fully configured <see cref="T:Nancy.INancyModule"/> instance.</returns>
        </member>
        <member name="T:Nancy.INancyModuleCatalog">
            <summary>
            Catalog of <see cref="T:Nancy.INancyModule"/> instances.
            </summary>
        </member>
        <member name="M:Nancy.INancyModuleCatalog.GetAllModules(Nancy.NancyContext)">
            <summary>
            Get all NancyModule implementation instances - should be per-request lifetime
            </summary>
            <param name="context">The current context</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.INancyModule"/> instances.</returns>
        </member>
        <member name="M:Nancy.INancyModuleCatalog.GetModule(System.Type,Nancy.NancyContext)">
            <summary>
            Retrieves a specific <see cref="T:Nancy.INancyModule"/> implementation - should be per-request lifetime
            </summary>
            <param name="moduleType">Module type</param>
            <param name="context">The current context</param>
            <returns>The <see cref="T:Nancy.INancyModule"/> instance</returns>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsModuleCatalog.GetAllModules(Nancy.NancyContext)">
            <summary>
            Get all NancyModule implementation instances - should be per-request lifetime
            </summary>
            <param name="context">The current context</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.INancyModule"/> instances.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsModuleCatalog.GetModule(System.Type,Nancy.NancyContext)">
            <summary>
            Retrieves a specific <see cref="T:Nancy.INancyModule"/> implementation - should be per-request lifetime
            </summary>
            <param name="moduleType">Module type</param>
            <param name="context">The current context</param>
            <returns>The <see cref="T:Nancy.INancyModule"/> instance</returns>
        </member>
        <member name="T:Nancy.Diagnostics.DefaultDiagnostics">
            <summary>
            Wires up the diagnostics support at application startup.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultDiagnostics.#ctor(Nancy.Diagnostics.DiagnosticsConfiguration,System.Collections.Generic.IEnumerable{Nancy.Diagnostics.IDiagnosticsProvider},Nancy.IRootPathProvider,Nancy.Diagnostics.IRequestTracing,Nancy.Bootstrapper.NancyInternalConfiguration,Nancy.ModelBinding.IModelBinderLocator,System.Collections.Generic.IEnumerable{Nancy.Responses.Negotiation.IResponseProcessor},System.Collections.Generic.IEnumerable{Nancy.Routing.Constraints.IRouteSegmentConstraint},Nancy.Culture.ICultureService,Nancy.Diagnostics.IRequestTraceFactory,System.Collections.Generic.IEnumerable{Nancy.Routing.IRouteMetadataProvider},Nancy.Localization.ITextResource)">
            <summary>
            Creates a new instance of the <see cref="T:Nancy.Diagnostics.DefaultDiagnostics"/> class.
            </summary>
            <param name="diagnosticsConfiguration"></param>
            <param name="diagnosticProviders"></param>
            <param name="rootPathProvider"></param>
            <param name="requestTracing"></param>
            <param name="configuration"></param>
            <param name="modelBinderLocator"></param>
            <param name="responseProcessors"></param>
            <param name="routeSegmentConstraints"></param>
            <param name="cultureService"></param>
            <param name="requestTraceFactory"></param>
            <param name="routeMetadataProviders"></param>
            <param name="textResource"></param>
        </member>
        <member name="M:Nancy.Diagnostics.DefaultDiagnostics.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Initialise diagnostics
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="T:Nancy.Diagnostics.DiagnosticsViewRenderer">
            <summary>
            Renders diagnostics views from embedded resources.
            </summary>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsViewRenderer.#ctor(Nancy.NancyContext)">
            <summary>
            Creates a new instance of the <see cref="T:Nancy.Diagnostics.DiagnosticsViewRenderer"/> class.
            </summary>
            <param name="context">A <see cref="T:Nancy.NancyContext"/> instance.</param>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsViewRenderer.Item(System.String)">
            <summary>
            Renders the diagnostics view with the provided <paramref name="name"/>.
            </summary>
            <param name="name">The name of the view to render.</param>
            <returns>A <see cref="T:Nancy.Response"/> of the rendered view.</returns>
        </member>
        <member name="P:Nancy.Diagnostics.DiagnosticsViewRenderer.Item(System.String,System.Object)">
            <summary>
            Renders the diagnostics view with the provided <paramref name="name"/> and <paramref name="model"/>.
            </summary>
            <param name="name">The name of the view to render.</param>
            <param name="model">The model that should be passed to the view engine during rendering.</param>
            <returns>A <see cref="T:Nancy.Response"/> of the rendered view.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.IViewResolver">
            <summary>
            Defines the functionality for resolving the requested view.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IViewResolver.GetViewLocation(System.String,System.Object,Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Locates a view based on the provided information.
            </summary>
            <param name="viewName">The name of the view to locate.</param>
            <param name="model">The model that will be used with the view.</param>
            <param name="viewLocationContext">A <see cref="T:Nancy.ViewEngines.ViewLocationContext"/> instance, containing information about the context for which the view is being located.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance if the view could be found, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Nancy.Diagnostics.DiagnosticsViewRenderer.DiagnosticsViewResolver.GetViewLocation(System.String,System.Object,Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Locates a view based on the provided information.
            </summary>
            <param name="viewName">The name of the view to locate.</param>
            <param name="model">The model that will be used with the view.</param>
            <param name="viewLocationContext">A <see cref="T:Nancy.ViewEngines.ViewLocationContext"/> instance, containing information about the context for which the view is being located.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance if the view could be found, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:Nancy.Localization.ITextResource">
            <summary>
            Used to return string values
            </summary>
        </member>
        <member name="P:Nancy.Localization.ITextResource.Item(System.String,Nancy.NancyContext)">
            <summary>
            Gets a translation based on the provided key.
            </summary>
            <param name="key">The key to look up the translation for.</param>
            <param name="context">The current <see cref="T:Nancy.NancyContext"/> instance.</param>
        </member>
        <member name="T:Nancy.Helpers.CacheHelpers">
            <summary>
            Helper class for caching related functions
            </summary>
        </member>
        <member name="M:Nancy.Helpers.CacheHelpers.ReturnNotModified(System.String,System.Nullable{System.DateTime},Nancy.NancyContext)">
            <summary>
            Returns whether to return a not modified response, based on the etag and last modified date
            of the resource, and the current nancy context
            </summary>
            <param name="etag">Current resource etag, or null</param>
            <param name="lastModified">Current resource last modified, or null</param>
            <param name="context">Current nancy context</param>
            <returns>True if not modified should be sent, false otherwise</returns>
        </member>
        <member name="T:Nancy.IncludeInNancyAssemblyScanningAttribute">
            <summary>
            Add this attribute to an assembly to make sure
            it is included in Nancy's assembly scanning.
            </summary>
            <example>
            Apply the attribute, typically in AssemblyInfo.(cs|fs|vb), as follows:
            <code>[assembly: IncludeInNancyAssemblyScanning]</code>
            </example>
        </member>
        <member name="T:Nancy.Localization.TextResourceFinder">
            <summary>
            Returns text from an implemented ITextResource
            </summary>
        </member>
        <member name="M:Nancy.Localization.TextResourceFinder.#ctor(Nancy.Localization.ITextResource,Nancy.NancyContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Localization.TextResourceFinder"/> class.
            </summary>
            <param name="textResource">The <see cref="T:Nancy.Localization.ITextResource"/> that should be used by the TextResourceFinder</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> that should be used by the TextResourceFinder</param>
        </member>
        <member name="M:Nancy.Localization.TextResourceFinder.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Finds text resource
            </summary>
            <param name="binder">GetMemberBinder with dynamic text key</param>
            <param name="result">Text item</param>
            <returns>Returns a value or a non existing value from the <see cref="T:Nancy.Localization.ITextResource"/> implementation</returns>
        </member>
        <member name="P:Nancy.Localization.TextResourceFinder.Resource">
            <summary>
            Gets the <see cref="T:Nancy.Localization.ITextResource"/> that is being used to locate texts.
            </summary>
            <value>An <see cref="T:Nancy.Localization.ITextResource"/> instance.</value>
        </member>
        <member name="P:Nancy.Localization.TextResourceFinder.Item(System.String)">
            <summary>
            Gets a translation based on the provided key.
            </summary>
            <param name="key">The key to look up the translation for.</param>
        </member>
        <member name="T:Nancy.ModelBinding.BindingConfig">
            <summary>
            Configurations that controls the behavior of the binder at runtime.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.BindingConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ModelBinding.BindingConfig"/> class.
            </summary>
        </member>
        <member name="F:Nancy.ModelBinding.BindingConfig.NoOverwrite">
            <summary>
            Binding configuration that permits that the binder overwrites non-default values.
            </summary>
        </member>
        <member name="F:Nancy.ModelBinding.BindingConfig.Default">
            <summary>
            Default binding configuration.
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingConfig.BodyOnly">
            <summary>
            Gets or sets whether the binder should be happy once it has bound to the request body. In this case,
            request and context parameters will not be bound to. If there is no body and this option is enabled,
            no binding will take place at all.
            </summary>
            <value><see langword="true" /> if the binder will stop once the body has been bound, otherwise <see langword="false" />.</value>
        </member>
        <member name="P:Nancy.ModelBinding.BindingConfig.IgnoreErrors">
            <summary>
            Gets or sets whether binding error should be ignored and the binder should continue with the next property.
            </summary>
            <remarks>Setting this property to <see langword="true"/> means that no <see cref="T:Nancy.ModelBinding.ModelBindingException"/> will be thrown if an error occurs.</remarks>
            <value><see langword="true"/>If the binder should ignore errors, otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:Nancy.ModelBinding.BindingConfig.Overwrite">
            <summary>
            Gets or sets whether the binder is allowed to overwrite properties that does not have a default value.
            </summary>
            <value><see langword="true" /> if the binder is allowed to overwrite non-default values, otherwise <see langword="false" />.</value>
        </member>
        <member name="T:Nancy.ModelBinding.BindingMemberInfo">
            <summary>
            Represents a bindable member of a type, which can be a property or a field.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Constructs a BindingMemberInfo instance for a property.
            </summary>
            <param name="propertyInfo">The bindable property to represent.</param>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Constructs a BindingMemberInfo instance for a field.
            </summary>
            <param name="fieldInfo">The bindable field to represent.</param>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.GetValue(System.Object)">
            <summary>
            Gets the value from a specified object associated with the property or field represented by this BindingMemberInfo.
            </summary>
            <param name="sourceObject">The object whose property or field should be retrieved.</param>
            <returns>The value for this BindingMemberInfo's property or field in the specified object.</returns>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value from a specified object associated with the property or field represented by this BindingMemberInfo.
            </summary>
            <param name="destinationObject">The object whose property or field should be assigned.</param>
            <param name="newValue">The value to assign in the specified object to this BindingMemberInfo's property or field.</param>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.Equals(System.Object)">
            <inherit-doc/>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.Equals(Nancy.ModelBinding.BindingMemberInfo)">
            <summary>
            Compares two BindingMemberInfo's with eachother on their respective values rather then their reference
            </summary>
            <param name="obj">the other BindingMemberInfo</param>
            <returns>true when they are equal and false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.GetHashCode">
            <inherit-doc/>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.Collect``1">
            <summary>
            Returns an enumerable sequence of bindable properties for the specified type.
            </summary>
            <typeparam name="T">The type to enumerate.</typeparam>
            <returns>Bindable properties.</returns>
        </member>
        <member name="M:Nancy.ModelBinding.BindingMemberInfo.Collect(System.Type)">
            <summary>
            Returns an enumerable sequence of bindable properties for the specified type.
            </summary>
            <param name="type">The type to enumerate.</param>
            <returns>Bindable properties.</returns>
        </member>
        <member name="P:Nancy.ModelBinding.BindingMemberInfo.MemberInfo">
            <summary>
            Gets a reference to the MemberInfo that this BindingMemberInfo represents. This can be a property or a field.
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingMemberInfo.Name">
            <summary>
            Gets the name of the property or field represented by this BindingMemberInfo.
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingMemberInfo.PropertyType">
            <summary>
            Gets the data type of the property or field represented by this BindingMemberInfo.
            </summary>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultConverters.DateTimeConverter">
            <summary>
            Converter for datetime types
            </summary>
        </member>
        <member name="T:Nancy.ModelBinding.ITypeConverter">
            <summary>
            Provides a way to convert from the incoming string representation
            of a type to the type itself.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.ITypeConverter.CanConvertTo(System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the converter can convert to the destination type
            </summary>
            <param name="destinationType">Destination type</param>
            <param name="context">The current binding context</param>
            <returns>True if conversion supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ITypeConverter.Convert(System.String,System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Convert the string representation to the destination type
            </summary>
            <param name="input">Input string</param>
            <param name="destinationType">Destination type</param>
            <param name="context">Current context</param>
            <returns>Converted object of the destination type</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.DateTimeConverter.CanConvertTo(System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the converter can convert to the destination type
            </summary>
            <param name="destinationType">Destination type</param>
            <param name="context">The current binding context</param>
            <returns>True if conversion supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.DateTimeConverter.Convert(System.String,System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Convert the string representation to the destination type
            </summary>
            <param name="input">Input string</param>
            <param name="destinationType">Destination type</param>
            <param name="context">Current context</param>
            <returns>Converted object of the destination type</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultConverters.NumericConverter">
            <summary>
            Converter for numeric types
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.NumericConverter.CanConvertTo(System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the converter can convert to the destination type
            </summary>
            <param name="destinationType">Destination type</param>
            <param name="context">The current binding context</param>
            <returns>True if conversion supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.NumericConverter.Convert(System.String,System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Convert the string representation to the destination type
            </summary>
            <param name="input">Input string</param>
            <param name="destinationType">Destination type</param>
            <param name="context">Current context</param>
            <returns>Converted object of the destination type</returns>
        </member>
        <member name="T:Nancy.ModelBinding.ExpressionExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Linq.Expressions.Expression"/> type.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.ExpressionExtensions.GetTargetMemberInfo(System.Linq.Expressions.Expression)">
            <summary>
            Retrieves the member that an expression is defined for.
            </summary>
            <param name="expression">The expression to retrieve the member from.</param>
            <returns>A <see cref="T:System.Reflection.MemberInfo"/> instance if the member could be found; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Nancy.ModelBinding.PropertyBindingException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates new instance
            </summary>
            <param name="propertyName">the name of the property which failed to bind</param>
            <param name="attemptedValue">the value attempted to set</param>
            <param name="innerException">the underlying exception</param>
        </member>
        <member name="P:Nancy.ModelBinding.PropertyBindingException.PropertyName">
            <summary>
            Gets the property name for which the bind failed
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.PropertyBindingException.AttemptedValue">
            <summary>
            Gets the value which was attempted to be assigned to the property
            </summary>
        </member>
        <member name="M:Nancy.NancyEngineExtensions.HandleRequest(Nancy.INancyEngine,Nancy.Request)">
            <summary>
            Handles an incoming <see cref="T:Nancy.Request"/>.
            </summary>
            <param name="nancyEngine">The <see cref="T:Nancy.INancyEngine"/> instance.</param>
            <param name="request">An <see cref="T:Nancy.Request"/> instance, containing the information about the current request.</param>
            <returns>A <see cref="T:Nancy.NancyContext"/> instance containing the request/response context.</returns>
        </member>
        <member name="M:Nancy.NancyEngineExtensions.HandleRequest(Nancy.INancyEngine,Nancy.Request,System.Func{Nancy.NancyContext,Nancy.NancyContext})">
            <summary>
            Handles an incoming <see cref="T:Nancy.Request"/>.
            </summary>
            <param name="nancyEngine">The <see cref="T:Nancy.INancyEngine"/> instance.</param>
            <param name="request">An <see cref="T:Nancy.Request"/> instance, containing the information about the current request.</param>
            <param name="preRequest">Delegate to call before the request is processed</param>
            <returns>A <see cref="T:Nancy.NancyContext"/> instance containing the request/response context.</returns>
        </member>
        <member name="M:Nancy.NancyEngineExtensions.HandleRequest(Nancy.INancyEngine,Nancy.Request,System.Func{Nancy.NancyContext,Nancy.NancyContext},System.Action{Nancy.NancyContext},System.Action{System.Exception},System.Threading.CancellationToken)">
            <summary>
            Handles an incoming <see cref="T:Nancy.Request"/> async.
            </summary>
            <param name="nancyEngine">The <see cref="T:Nancy.INancyEngine"/> instance.</param>
            <param name="request">An <see cref="T:Nancy.Request"/> instance, containing the information about the current request.</param>
            <param name="preRequest">Delegate to call before the request is processed</param>
            <param name="onComplete">Delegate to call when the request is complete</param>
            <param name="onError">Delegate to call when any errors occur</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="M:Nancy.NancyEngineExtensions.HandleRequest(Nancy.INancyEngine,Nancy.Request,System.Action{Nancy.NancyContext},System.Action{System.Exception})">
            <summary>
            Handles an incoming <see cref="T:Nancy.Request"/> async.
            </summary>
            <param name="nancyEngine">The <see cref="T:Nancy.INancyEngine"/> instance.</param>
            <param name="request">An <see cref="T:Nancy.Request"/> instance, containing the information about the current request.</param>
            <param name="onComplete">Delegate to call when the request is complete</param>
            <param name="onError">Delegate to call when any errors occur</param>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithCookie(Nancy.Responses.Negotiation.Negotiator,Nancy.Cookies.INancyCookie)">
            <summary>
            Add a cookie to the response.
            </summary>
            <param name="negotiator">The <see cref="T:Nancy.Responses.Negotiation.Negotiator"/> instance.</param>
            <param name="cookie">The <see cref="T:Nancy.Cookies.INancyCookie"/> instance that should be added.</param>
            <returns>The modified <see cref="T:Nancy.Responses.Negotiation.Negotiator"/> instance.</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithCookies(Nancy.Responses.Negotiation.Negotiator,System.Collections.Generic.IEnumerable{Nancy.Cookies.INancyCookie})">
            <summary>
            Add a collection of cookies to the response.
            </summary>
            <param name="negotiator">The <see cref="T:Nancy.Responses.Negotiation.Negotiator"/> instance.</param>
            <param name="cookies">The <see cref="T:Nancy.Cookies.INancyCookie"/> instances that should be added.</param>
            <returns>The modified <see cref="T:Nancy.Responses.Negotiation.Negotiator"/> instance.</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithHeader(Nancy.Responses.Negotiation.Negotiator,System.String,System.String)">
            <summary>
            Add a header to the response
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="header">Header name</param>
            <param name="value">Header value</param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithContentType(Nancy.Responses.Negotiation.Negotiator,System.String)">
            <summary>
            Add a content type to the response
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="contentType">Content type value</param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithHeaders(Nancy.Responses.Negotiation.Negotiator,System.Object[])">
            <summary>
            Adds headers to the response using anonymous types
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="headers">
            Array of headers - each header should be an anonymous type with two string properties
            'Header' and 'Value' to represent the header name and its value.
            </param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithHeaders(Nancy.Responses.Negotiation.Negotiator,System.Tuple{System.String,System.String}[])">
            <summary>
            Adds headers to the response using anonymous types
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="headers">
            Array of headers - each header should be a Tuple with two string elements 
            for header name and header value
            </param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithFullNegotiation(Nancy.Responses.Negotiation.Negotiator)">
            <summary>
            Allows the response to be negotiated with any processors available for any content type
            </summary>
            <param name="negotiator">Negotiator object</param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithAllowedMediaRange(Nancy.Responses.Negotiation.Negotiator,Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Allows the response to be negotiated with a specific media range
            This will remove the wildcard range if it is already specified
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="mediaRange">Media range to add</param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithModel(Nancy.Responses.Negotiation.Negotiator,System.Object)">
            <summary>
            Uses the specified model as the default model for negotiation
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="model">Model object</param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithView(Nancy.Responses.Negotiation.Negotiator,System.String)">
            <summary>
            Uses the specified view for html output
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="viewName">View name</param>
            <returns>Modified negotiator</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithMediaRangeModel(Nancy.Responses.Negotiation.Negotiator,Nancy.Responses.Negotiation.MediaRange,System.Object)">
            <summary>
            Sets the model to use for a particular media range.
            Will also add the MediaRange to the allowed list
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="range">Range to match against</param>
            <param name="model">Model object</param>
            <returns>Updated negotiator object</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithMediaRangeModel(Nancy.Responses.Negotiation.Negotiator,Nancy.Responses.Negotiation.MediaRange,System.Func{System.Object})">
            <summary>
            Sets the model to use for a particular media range.
            Will also add the MediaRange to the allowed list
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="range">Range to match against</param>
            <param name="modelFactory">Model factory for returning the model object</param>
            <returns>Updated negotiator object</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithMediaRangeResponse(Nancy.Responses.Negotiation.Negotiator,Nancy.Responses.Negotiation.MediaRange,Nancy.Response)">
            <summary>
            Sets the <see cref="T:Nancy.Response"/> to use for a particular media range.
            Will also add the MediaRange to the allowed list
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="range">Range to match against</param>
            <param name="response">A <see cref="T:Nancy.Response"/> object</param>
            <returns>Updated negotiator object</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithMediaRangeResponse(Nancy.Responses.Negotiation.Negotiator,Nancy.Responses.Negotiation.MediaRange,System.Func{Nancy.Response})">
            <summary>
            Sets the <see cref="T:Nancy.Response"/> to use for a particular media range.
            Will also add the MediaRange to the allowed list
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="range">Range to match against</param>
            <param name="responseFactory">Factory for returning the <see cref="T:Nancy.Response"/> object</param>
            <returns>Updated negotiator object</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithStatusCode(Nancy.Responses.Negotiation.Negotiator,System.Int32)">
            <summary>
            Sets the status code that should be assigned to the final response.
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="statusCode">The status code that should be used.</param>
            <returns>Updated negotiator object</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithReasonPhrase(Nancy.Responses.Negotiation.Negotiator,System.String)">
            <summary>
            Sets the description of the status code that should be assigned to the final response.
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="reasonPhrase">The status code description that should be used.</param>
            <returns>Updated negotiator object</returns>
        </member>
        <member name="M:Nancy.NegotiatorExtensions.WithStatusCode(Nancy.Responses.Negotiation.Negotiator,Nancy.HttpStatusCode)">
            <summary>
            Sets the status code that should be assigned to the final response.
            </summary>
            <param name="negotiator">Negotiator object</param>
            <param name="statusCode">The status code that should be used.</param>
            <returns>Updated negotiator object</returns>
        </member>
        <member name="T:Nancy.Owin.DelegateExtensions">
            <summary>
            OWIN extensions for the delegate-based approach.
            </summary>
        </member>
        <member name="M:Nancy.Owin.DelegateExtensions.UseNancy(System.Action{System.Func{System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task}}},System.Action{Nancy.Owin.NancyOptions})">
            <summary>
            Adds Nancy to the OWIN pipeline.
            </summary>
            <param name="builder">The application builder delegate.</param>
            <param name="action">A configuration builder action.</param>
            <returns>The application builder delegate.</returns>
        </member>
        <member name="M:Nancy.Owin.DelegateExtensions.UseNancy(System.Action{System.Func{System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task}}},Nancy.Owin.NancyOptions)">
            <summary>
            Adds Nancy to the OWIN pipeline.
            </summary>
            <param name="builder">The application builder delegate.</param>
            <param name="options">The Nancy options.</param>
            <returns>The application builder delegate.</returns>
        </member>
        <member name="T:Nancy.Owin.NancyContextExtensions">
            <summary>
            OWIN extensions for the NancyContext.
            </summary>
        </member>
        <member name="M:Nancy.Owin.NancyContextExtensions.GetOwinEnvironment(Nancy.NancyContext)">
            <summary>
            Gets the OWIN environment dictionary.
            </summary>
            <param name="context">The Nancy context.</param>
            <returns>The OWIN environment dictionary.</returns>
        </member>
        <member name="T:Nancy.Owin.NancyOptions">
            <summary>
            Options for hosting Nancy with OWIN.
            </summary>
        </member>
        <member name="P:Nancy.Owin.NancyOptions.Bootstrapper">
            <summary>
            Gets or sets the bootstrapper. If none is set, NancyBootstrapperLocator.Bootstrapper is used.
            </summary>
        </member>
        <member name="P:Nancy.Owin.NancyOptions.PerformPassThrough">
            <summary>
            Gets or sets the delegate that determines if NancyMiddleware performs pass through.
            </summary>
        </member>
        <member name="P:Nancy.Owin.NancyOptions.EnableClientCertificates">
            <summary>
            Gets or sets a value indicating whether to request a client certificate or not.
            Defaults to false.
            </summary>
        </member>
        <member name="T:Nancy.Owin.NancyOptionsExtensions">
            <summary>
            Extensions for the NancyOptions class.
            </summary>
        </member>
        <member name="M:Nancy.Owin.NancyOptionsExtensions.PassThroughWhenStatusCodesAre(Nancy.Owin.NancyOptions,Nancy.HttpStatusCode[])">
            <summary>
            Tells the NancyMiddleware to pass through when
            response has one of the given status codes.
            </summary>
            <param name="nancyOptions">The Nancy options.</param>
            <param name="httpStatusCode">The HTTP status code.</param>
        </member>
        <member name="T:Nancy.Owin.NancyMiddleware">
            <summary>
            Nancy middleware for OWIN.
            </summary>
        </member>
        <member name="F:Nancy.Owin.NancyMiddleware.RequestEnvironmentKey">
            <summary>
            The request environment key
            </summary>
        </member>
        <member name="M:Nancy.Owin.NancyMiddleware.UseNancy(System.Action{Nancy.Owin.NancyOptions})">
            <summary>
            Use Nancy in an OWIN pipeline
            </summary>
            <param name="configuration">A delegate to configure the <see cref="T:Nancy.Owin.NancyOptions"/>.</param>
            <returns>An OWIN middleware delegate.</returns>
        </member>
        <member name="M:Nancy.Owin.NancyMiddleware.UseNancy(Nancy.Owin.NancyOptions)">
            <summary>
            Use Nancy in an OWIN pipeline
            </summary>
            <param name="options">An <see cref="T:Nancy.Owin.NancyOptions"/> to configure the Nancy middleware</param>
            <returns>An OWIN middleware delegate.</returns>
        </member>
        <member name="M:Nancy.Owin.NancyMiddleware.RequestComplete(System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{Nancy.NancyContext,System.Boolean},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Threading.Tasks.TaskCompletionSource{System.Int32})">
            <summary>
            Gets a delegate to handle converting a nancy response
            to the format required by OWIN and signals that the we are
            now complete.
            </summary>
            <param name="environment">OWIN environment.</param>
            <param name="next">The next stage in the OWIN pipeline.</param>
            <param name="tcs">The task completion source to signal.</param>
            <param name="performPassThrough">A predicate that will allow the caller to determine if the request passes through to the 
            next stage in the owin pipeline.</param>
            <returns>Delegate</returns>
        </member>
        <member name="M:Nancy.Owin.NancyMiddleware.RequestErrored(System.Threading.Tasks.TaskCompletionSource{System.Int32})">
            <summary>
            Gets a delegate to handle request errors
            </summary>
            <param name="tcs">Completion source to signal</param>
            <returns>Delegate</returns>
        </member>
        <member name="M:Nancy.Owin.NancyMiddleware.CreateUrl(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates the Nancy URL
            </summary>
            <param name="owinRequestHost">OWIN Hostname</param>
            <param name="owinRequestScheme">OWIN Scheme</param>
            <param name="owinRequestPathBase">OWIN Base path</param>
            <param name="owinRequestPath">OWIN Path</param>
            <param name="owinRequestQueryString">OWIN Querystring</param>
            <returns></returns>
        </member>
        <member name="M:Nancy.Owin.NancyMiddleware.StoreEnvironment(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets a delegate to store the OWIN environment into the NancyContext
            </summary>
            <param name="environment">OWIN Environment</param>
            <returns>Delegate</returns>
        </member>
        <member name="T:Nancy.Response">
            <summary>
            Encapsulates HTTP-response information from an Nancy operation.
            </summary>
        </member>
        <member name="F:Nancy.Response.NoBody">
            <summary>
            Null object representing no body
            </summary>
        </member>
        <member name="M:Nancy.Response.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Response"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Response.PreExecute(Nancy.NancyContext)">
            <summary>
            Executes at the end of the nancy execution pipeline and before control is passed back to the hosting.
            Can be used to pre-render/validate views while still inside the main pipeline/error handling.
            </summary>
            <param name="context">Nancy context</param>
            <returns>Task for completion/erroring</returns>
        </member>
        <member name="M:Nancy.Response.AddCookie(System.String,System.String)">
            <summary>
            Adds a <see cref="T:Nancy.Cookies.INancyCookie"/> to the response.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <returns>The <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.Response.AddCookie(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Adds a <see cref="T:Nancy.Cookies.INancyCookie"/> to the response.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="expires">The expiration date of the cookie. Can be <see langword="null"/> if it should expire at the end of the session.</param>
            <returns>The <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.Response.AddCookie(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Adds a <see cref="T:Nancy.Cookies.INancyCookie"/> to the response.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="expires">The expiration date of the cookie. Can be <see langword="null"/> if it should expire at the end of the session.</param>
            <param name="domain">The domain of the cookie.</param>
            <param name="path">The path of the cookie.</param>
            <returns>The <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.Response.AddCookie(Nancy.Cookies.INancyCookie)">
            <summary>
            Adds a <see cref="T:Nancy.Cookies.INancyCookie"/> to the response.
            </summary>
            <param name="nancyCookie">A <see cref="T:Nancy.Cookies.INancyCookie"/> instance.</param>
            <returns></returns>
        </member>
        <member name="M:Nancy.Response.op_Implicit(Nancy.HttpStatusCode)~Nancy.Response">
            <summary>
            Implicitly cast an <see cref="T:Nancy.HttpStatusCode"/> value to a <see cref="T:Nancy.Response"/> instance, with the <see cref="P:Nancy.Response.StatusCode"/>
            set to the value of the <see cref="T:Nancy.HttpStatusCode"/>.
            </summary>
            <param name="statusCode">The <see cref="T:Nancy.HttpStatusCode"/> value that is being cast from.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.Response.op_Implicit(System.Int32)~Nancy.Response">
            <summary>
            Implicitly cast an int value to a <see cref="T:Nancy.Response"/> instance, with the <see cref="P:Nancy.Response.StatusCode"/>
            set to the value of the int.
            </summary>
            <param name="statusCode">The int value that is being cast from.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.Response.op_Implicit(System.String)~Nancy.Response">
            <summary>
            Implicitly cast an string instance to a <see cref="T:Nancy.Response"/> instance, with the <see cref="P:Nancy.Response.Contents"/>
            set to the value of the string.
            </summary>
            <param name="contents">The string that is being cast from.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.Response.op_Implicit(System.Action{System.IO.Stream})~Nancy.Response">
            <summary>
            Implicitly cast an <see cref="T:System.Action`1"/>, where T is a <see cref="T:System.IO.Stream"/>, instance to
            a <see cref="T:Nancy.Response"/> instance, with the <see cref="P:Nancy.Response.Contents"/> set to the value of the action.
            </summary>
            <param name="streamFactory">The <see cref="T:System.Action`1"/> instance that is being cast from.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.Response.op_Implicit(Nancy.DynamicDictionaryValue)~Nancy.Response">
            <summary>
            Implicitly cast a <see cref="T:Nancy.DynamicDictionaryValue"/> instance to a <see cref="T:Nancy.Response"/> instance,
            with the <see cref="P:Nancy.Response.Contents"/> set to the value of the <see cref="T:Nancy.DynamicDictionaryValue"/>.
            </summary>
            <param name="value">The <see cref="T:Nancy.DynamicDictionaryValue"/> instance that is being cast from.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.Response.GetStringContents(System.String)">
            <summary>
            Converts a string content value to a response action.
            </summary>
            <param name="contents">The string containing the content.</param>
            <returns>A response action that will write the content of the string to the response stream.</returns>
        </member>
        <member name="M:Nancy.Response.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>This method can be overridden in sub-classes to dispose of response specific resources.</remarks>
        </member>
        <member name="P:Nancy.Response.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>The type of the content.</value>
            <remarks>The default value is <c>text/html</c>.</remarks>
        </member>
        <member name="P:Nancy.Response.Contents">
            <summary>
            Gets the delegate that will render contents to the response stream.
            </summary>
            <value>An <see cref="T:System.Action`1"/> delegate, containing the code that will render contents to the response stream.</value>
            <remarks>The host of Nancy will pass in the output stream after the response has been handed back to it by Nancy.</remarks>
        </member>
        <member name="P:Nancy.Response.Headers">
            <summary>
            Gets the collection of HTTP response headers that should be sent back to the client.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance, containing the key/value pair of headers.</value>
        </member>
        <member name="P:Nancy.Response.StatusCode">
            <summary>
            Gets or sets the HTTP status code that should be sent back to the client.
            </summary>
            <value>A <see cref="T:Nancy.HttpStatusCode"/> value.</value>
        </member>
        <member name="P:Nancy.Response.ReasonPhrase">
            <summary>
            Gets or sets a text description of the HTTP status code returned to the client.
            </summary>
            <value>The HTTP status code description.</value>
        </member>
        <member name="P:Nancy.Response.Cookies">
            <summary>
            Gets the <see cref="T:Nancy.Cookies.INancyCookie"/> instances that are associated with the response.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.IList`1"/> instance, containing <see cref="T:Nancy.Cookies.INancyCookie"/> instances.</value>
        </member>
        <member name="T:Nancy.Diagnostics.IDiagnosticsProvider">
            <summary>
            Defines the functionality a diagnostics provider.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.IDiagnosticsProvider.Name">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the provider.</value>
        </member>
        <member name="P:Nancy.Diagnostics.IDiagnosticsProvider.Description">
            <summary>
            Gets the description of the provider.
            </summary>
            <value>A <see cref="T:System.String"/> containing the description of the provider.</value>
        </member>
        <member name="P:Nancy.Diagnostics.IDiagnosticsProvider.DiagnosticObject">
            <summary>
            Gets the object that contains the interactive diagnostics methods.
            </summary>
            <value>An instance of the interactive diagnostics object.</value>
        </member>
        <member name="P:Nancy.Diagnostics.TestingDiagnosticProvider.Name">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the provider.</value>
        </member>
        <member name="P:Nancy.Diagnostics.TestingDiagnosticProvider.Description">
            <summary>
            Gets the description of the provider.
            </summary>
            <value>A <see cref="T:System.String"/> containing the description of the provider.</value>
        </member>
        <member name="P:Nancy.Diagnostics.TestingDiagnosticProvider.DiagnosticObject">
            <summary>
            Gets the object that contains the interactive diagnostics methods.
            </summary>
            <value>An instance of the interactive diagnostics object.</value>
        </member>
        <member name="M:Nancy.Jsonp.Enable(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Enable JSONP support in the application
            </summary>
            <param name="pipelines">Application Pipeline to Hook into</param>
        </member>
        <member name="M:Nancy.Jsonp.Disable(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Disable JSONP support in the application
            </summary>
            <param name="pipelines">Application Pipeline to Hook into</param>
        </member>
        <member name="M:Nancy.Jsonp.PrepareJsonp(Nancy.NancyContext)">
            <summary>
            Transmogrify original response and apply JSONP Padding
            </summary>
            <param name="context">Current Nancy Context</param>
        </member>
        <member name="T:Nancy.JsonpApplicationStartup">
            <summary>
            Enables JSONP support at application startup.
            </summary>
        </member>
        <member name="M:Nancy.JsonpApplicationStartup.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Perform any initialisation tasks
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="T:Nancy.RequestExecutionException">
            <summary>
            Exception that is thrown when an unhandled exception occurred during
            the execution of the current request.
            </summary>
        </member>
        <member name="M:Nancy.RequestExecutionException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.RequestExecutionException"/>, with
            the specified <paramref name="innerException"/>.
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="T:Nancy.Responses.MaterialisingResponse">
            <summary>
            Takes an existing response and materialises the body.
            Can be used as a wrapper to force execution of the deferred body for
            error checking etc.
            Copies the existing response into memory, so use with caution.
            </summary>
        </member>
        <member name="T:Nancy.Responses.NegotiatedResponse">
            <summary>
            Response that indicates that the response format should be negotiated between the client and the server.
            </summary>
        </member>
        <member name="M:Nancy.Responses.NegotiatedResponse.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.NegotiatedResponse"/> response for the
            provided <paramref name="value"/>.
            </summary>
            <param name="value">The response value that should be negotiated.</param>
        </member>
        <member name="P:Nancy.Responses.NegotiatedResponse.Value">
            <summary>
            Gets or sets the value that should be negotiated.
            </summary>
        </member>
        <member name="T:Nancy.Responses.Negotiation.DefaultResponseNegotiator">
            <summary>
            The default implementation for a response negotiator.
            </summary>
        </member>
        <member name="T:Nancy.Responses.Negotiation.IResponseNegotiator">
            <summary>
            Creates a response from a given result and context.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.IResponseNegotiator.NegotiateResponse(System.Object,Nancy.NancyContext)">
            <summary>
            Negotiates the response based on the given result and context.
            </summary>
            <param name="routeResult">The route result.</param>
            <param name="context">The context.</param>
            <returns>A <see cref="T:Nancy.Response"/>.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.#ctor(System.Collections.Generic.IEnumerable{Nancy.Responses.Negotiation.IResponseProcessor},Nancy.Conventions.AcceptHeaderCoercionConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.DefaultResponseNegotiator"/> class.
            </summary>
            <param name="processors">The response processors.</param>
            <param name="coercionConventions">The Accept header coercion conventions.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.NegotiateResponse(System.Object,Nancy.NancyContext)">
            <summary>
            Negotiates the response based on the given result and context.
            </summary>
            <param name="routeResult">The route result.</param>
            <param name="context">The context.</param>
            <returns>A <see cref="T:Nancy.Response"/>.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.TryCastResultToResponse(System.Object,Nancy.Response@)">
            <summary>
            Tries to cast the dynamic result to a <see cref="T:Nancy.Response"/>.
            </summary>
            <param name="routeResult">The result.</param>
            <param name="response">The response.</param>
            <returns><c>true</c> if the result is a <see cref="T:Nancy.Response"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.GetNegotiationContext(System.Object,Nancy.NancyContext)">
            <summary>
            Gets a <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/> based on the given result and context.
            </summary>
            <param name="routeResult">The route result.</param>
            <param name="context">The context.</param>
            <returns>A <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/>.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.GetCoercedAcceptHeaders(Nancy.NancyContext)">
            <summary>
            Gets the coerced accept headers based on the <see cref="T:Nancy.Conventions.AcceptHeaderCoercionConventions"/>.
            </summary>
            <param name="context">The context.</param>
            <returns>IEnumerable{Tuple{System.String, System.Decimal}}.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.GetCompatibleProcessorsByHeader(System.String,System.Object,Nancy.NancyContext)">
            <summary>
            Gets compatible response processors by header.
            </summary>
            <param name="acceptHeader">The accept header.</param>
            <param name="model">The model.</param>
            <param name="context">The context.</param>
            <returns>IEnumerable{Tuple{IResponseProcessor, ProcessorMatch}}.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.CreateResponse(System.Collections.Generic.IList{Nancy.Responses.Negotiation.DefaultResponseNegotiator.CompatibleHeader},Nancy.Responses.Negotiation.NegotiationContext,Nancy.NancyContext)">
            <summary>
            Creates a response from the compatible headers.
            </summary>
            <param name="compatibleHeaders">The compatible headers.</param>
            <param name="negotiationContext">The negotiation context.</param>
            <param name="context">The context.</param>
            <returns>A <see cref="T:Nancy.Response"/>.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.NegotiateResponse(System.Collections.Generic.IEnumerable{Nancy.Responses.Negotiation.DefaultResponseNegotiator.CompatibleHeader},Nancy.Responses.Negotiation.NegotiationContext,Nancy.NancyContext)">
            <summary>
            Prioritizes the response processors and tries to negotiate a response.
            </summary>
            <param name="compatibleHeaders">The compatible headers.</param>
            <param name="negotiationContext">The negotiation context.</param>
            <param name="context">The context.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.AddLinkHeader(System.Collections.Generic.IEnumerable{Nancy.Responses.Negotiation.DefaultResponseNegotiator.CompatibleHeader},Nancy.Response,Nancy.Url)">
            <summary>
            Adds a link header to the <see cref="T:Nancy.Response"/>.
            </summary>
            <param name="compatibleHeaders">The compatible headers.</param>
            <param name="response">The response.</param>
            <param name="requestUrl">The request URL.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.GetLinkProcessors(System.Collections.Generic.IEnumerable{Nancy.Responses.Negotiation.DefaultResponseNegotiator.CompatibleHeader},System.String)">
            <summary>
            Gets the link processors based on the compatible headers and content-type.
            </summary>
            <param name="compatibleHeaders">The compatible headers.</param>
            <param name="contentType">The content-type of the response.</param>
            <returns>Dictionary{System.String, MediaRange}.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.CreateLinkHeader(Nancy.Url,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Nancy.Responses.Negotiation.MediaRange}})">
            <summary>
            Creates the link header with the different media ranges.
            </summary>
            <param name="requestUrl">The request URL.</param>
            <param name="linkProcessors">The link processors.</param>
            <returns>The link header.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.AddContentTypeHeader(Nancy.Responses.Negotiation.NegotiationContext,Nancy.Response)">
            <summary>
            Adds the content type header from the <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/> to the <see cref="T:Nancy.Response"/>.
            </summary>
            <param name="negotiationContext">The negotiation context.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.AddNegotiatedHeaders(Nancy.Responses.Negotiation.NegotiationContext,Nancy.Response)">
            <summary>
            Adds the negotiated headers from the <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/> to the <see cref="T:Nancy.Response"/>.
            </summary>
            <param name="negotiationContext">The negotiation context.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.SetStatusCode(Nancy.Responses.Negotiation.NegotiationContext,Nancy.Response)">
            <summary>
            Sets the status code from the <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/> on the <see cref="T:Nancy.Response"/>.
            </summary>
            <param name="negotiationContext">The negotiation context.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.SetReasonPhrase(Nancy.Responses.Negotiation.NegotiationContext,Nancy.Response)">
            <summary>
            Sets the reason phrase from the <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/> on the <see cref="T:Nancy.Response"/>.
            </summary>
            <param name="negotiationContext">The negotiation context.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.DefaultResponseNegotiator.AddCookies(Nancy.Responses.Negotiation.NegotiationContext,Nancy.Response)">
            <summary>
            Adds the cookies from the <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/> to the <see cref="T:Nancy.Response"/>.
            </summary>
            <param name="negotiationContext">The negotiation context.</param>
            <param name="response">The response.</param>
        </member>
        <member name="T:Nancy.Responses.Negotiation.IResponseProcessor">
            <summary>
            Content negotiation response processor
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.IResponseProcessor.CanProcess(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Determines whether the processor can handle a given content type and model.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Responses.Negotiation.ProcessorMatch"/> result that determines the priority of the processor.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.IResponseProcessor.Process(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Process the response.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="P:Nancy.Responses.Negotiation.IResponseProcessor.ExtensionMappings">
            <summary>
            Gets a set of mappings that map a given extension (such as .json)
            to a media range that can be sent to the client in a vary header.
            </summary>
        </member>
        <member name="T:Nancy.Responses.Negotiation.JsonProcessor">
            <summary>
            Processes the model for json media types and extension.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.JsonProcessor.#ctor(System.Collections.Generic.IEnumerable{Nancy.ISerializer})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.JsonProcessor"/> class,
            with the provided <paramref name="serializers"/>.
            </summary>
            <param name="serializers">The serializes that the processor will use to process the request.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.JsonProcessor.CanProcess(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Determines whether the processor can handle a given content type and model
            </summary>
            <param name="requestedMediaRange">Content type requested by the client</param>
            <param name="model">The model for the given media range</param>
            <param name="context">The nancy context</param>
            <returns>A ProcessorMatch result that determines the priority of the processor</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.JsonProcessor.Process(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Process the response
            </summary>
            <param name="requestedMediaRange">Content type requested by the client</param>
            <param name="model">The model for the given media range</param>
            <param name="context">The nancy context</param>
            <returns>A response</returns>
        </member>
        <member name="P:Nancy.Responses.Negotiation.JsonProcessor.ExtensionMappings">
            <summary>
            Gets a set of mappings that map a given extension (such as .json)
            to a media range that can be sent to the client in a vary header.
            </summary>
        </member>
        <member name="T:Nancy.Responses.Negotiation.MatchResult">
            <summary>
            Represents whether a processor has matched/can handle processing the response.
            Values are of increasing priority.
            </summary>
        </member>
        <member name="F:Nancy.Responses.Negotiation.MatchResult.NoMatch">
            <summary>
            No match, nothing to see here, move along
            </summary>
        </member>
        <member name="F:Nancy.Responses.Negotiation.MatchResult.DontCare">
            <summary>
            Will accept anything
            </summary>
        </member>
        <member name="F:Nancy.Responses.Negotiation.MatchResult.NonExactMatch">
            <summary>
            Matched, but in a non-specific way such as a wildcard match or fallback
            </summary>
        </member>
        <member name="F:Nancy.Responses.Negotiation.MatchResult.ExactMatch">
            <summary>
            Exact specific match
            </summary>
        </member>
        <member name="T:Nancy.Responses.Negotiation.MediaRange">
            <summary>
            Represents a media range from an accept header
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRange.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.MediaRange"/> class from a string representation of a media range
            </summary>
            <param name="contentType">the content type</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.MediaRange"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRange.Matches(Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Whether or not a media range matches another, taking into account wildcards
            </summary>
            <param name="other">Other media range</param>
            <returns>True if matching, false if not</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRange.MatchesWithParameters(Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Whether or not a media range matches another, taking into account wildcards and parameters
            </summary>
            <param name="other">Other media range</param>
            <returns>True if matching, false if not</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRange.FromString(System.String)">
            <summary>
            Creates a MediaRange from a "Type/SubType" string
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaRange.Type">
            <summary>
            Media range type
            </summary>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaRange.Subtype">
            <summary>
            Media range subtype
            </summary>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaRange.Parameters">
            <summary>
            Media range parameters
            </summary>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaRange.IsWildcard">
            <summary>
            Gets a value indicating if the media range is the */* wildcard
            </summary>
        </member>
        <member name="T:Nancy.Responses.Negotiation.MediaRangeParameters">
            <summary>
            Provides strongly-typed access to media range parameters.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRangeParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.MediaRangeParameters"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRangeParameters.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.MediaRangeParameters"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRangeParameters.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRangeParameters.Matches(Nancy.Responses.Negotiation.MediaRangeParameters)">
            <summary>
            Whether or not a set of media range parameters matches another, regardless of order
            </summary>
            <param name="other">Other media range parameters</param>
            <returns>True if matching, false if not</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRangeParameters.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaRangeParameters.FromString(System.String)">
            <summary>
            Creates a MediaRangeParameters collection from a "a=1,b=2" string
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaRangeParameters.Keys">
            <summary>
            Gets the names of the available parameters.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the names of the parameters.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaRangeParameters.Values">
            <summary>
            Gets all the parameters values.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains all the parameters values.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaRangeParameters.Item(System.String)">
            <summary>
            Gets the value for the parameter identified by the <paramref name="name"/> parameter.
            </summary>
            <param name="name">The name of the parameter to return the value for.</param>
            <returns>The value for the parameter. If the parameter is not defined then null is returned.</returns>
        </member>
        <member name="T:Nancy.Responses.Negotiation.MediaType">
            <summary>
            Represents a media type or subtype in a <see cref="T:Nancy.Responses.Negotiation.MediaRange"/>.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.MediaType"/> class for the media type part.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.MediaType.Matches(Nancy.Responses.Negotiation.MediaType)">
            <summary>
            Matched the media type with another media type.
            </summary>
            <param name="other">The media type that should be matched against.</param>
            <returns><see langword="true" /> if the media types match, otherwise <see langword="false" />.</returns>
        </member>
        <member name="P:Nancy.Responses.Negotiation.MediaType.IsWildcard">
            <summary>
            Gets a value indicating whether the media type is a wildcard or not
            </summary>
            <value><see langword="true" /> if the media type is a wildcard, otherwise <see langword="false" />.</value>
        </member>
        <member name="T:Nancy.Responses.Negotiation.NegotiationContext">
            <summary>
            Context for content negotiation.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.NegotiationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.NegotiationContext"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.NegotiationContext.GetModelForMediaRange(Nancy.Responses.Negotiation.MediaRange)">
            <summary>
            Gets the correct model for the given media range
            </summary>
            <param name="mediaRange">The <see cref="T:Nancy.Responses.Negotiation.MediaRange"/> to get the model for.</param>
            <returns>The model for the provided <paramref name="mediaRange"/> if it has been mapped, otherwise the <see cref="P:Nancy.Responses.Negotiation.NegotiationContext.DefaultModel"/> will be returned.</returns>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.Cookies">
            <summary>
            Gets or sets additional cookies to assign to the response.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Nancy.Cookies.INancyCookie"/> instances.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.DefaultModel">
            <summary>
            Gets or sets the default model that will be used if a content type specific model is not specified.
            </summary>
            <value>The default model instance.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.Headers">
            <summary>
            Gets or sets the additional response headers required.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the headers.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.MediaRangeModelMappings">
            <summary>
            Gets or sets the model mappings for media ranges.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the media range model mappings.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.ModuleName">
            <summary>
            The name of the <see cref="T:Nancy.INancyModule"/> that is locating a view.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the module.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.ModulePath">
            <summary>
            The module path of the <see cref="T:Nancy.INancyModule"/> that is locating a view.
            </summary>
            <value>A <see cref="T:System.String"/> containing the module path.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.PermissableMediaRanges">
            <summary>
            Gets or sets allowed media ranges.
            </summary>
            <value>A list of the allowed media ranges.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.StatusCode">
            <summary>
            Gets or sets the status code of the response.
            </summary>
            <value>A <see cref="T:Nancy.HttpStatusCode"/> value.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.ReasonPhrase">
            <summary>
            Gets or sets a text description of the HTTP status code returned to the client.
            </summary>
            <value>The HTTP status code description.</value>
        </member>
        <member name="P:Nancy.Responses.Negotiation.NegotiationContext.ViewName">
            <summary>
            Gets or sets the view name if one is required.
            </summary>
            <value>The name of the view that should be rendered.</value>
        </member>
        <member name="M:Nancy.Responses.Negotiation.Negotiator.#ctor(Nancy.NancyContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.Negotiator"/> class,
            with the provided <paramref name="context"/>.
            </summary>
            <param name="context">The context that should be negotiated.</param>
        </member>
        <member name="P:Nancy.Responses.Negotiation.Negotiator.NegotiationContext">
            <summary>
            Gets the <see cref="P:Nancy.Responses.Negotiation.Negotiator.NegotiationContext"/> used by the negotiator.
            </summary>
            <value>A <see cref="P:Nancy.Responses.Negotiation.Negotiator.NegotiationContext"/> instance.</value>
        </member>
        <member name="T:Nancy.Responses.Negotiation.ProcessorMatch">
            <summary>
            Represents whether a processor has matched / can handle a requested response
            </summary>
        </member>
        <member name="F:Nancy.Responses.Negotiation.ProcessorMatch.None">
            <summary>
            A <see cref="T:Nancy.Responses.Negotiation.ProcessorMatch"/> with both <see cref="P:Nancy.Responses.Negotiation.ProcessorMatch.ModelResult"/> and <see cref="P:Nancy.Responses.Negotiation.ProcessorMatch.RequestedContentTypeResult"/> set to <see cref="F:Nancy.Responses.Negotiation.MatchResult.NoMatch"/>.
            </summary>
        </member>
        <member name="P:Nancy.Responses.Negotiation.ProcessorMatch.RequestedContentTypeResult">
            <summary>
            Gets or sets the match result based on the content type
            </summary>
        </member>
        <member name="P:Nancy.Responses.Negotiation.ProcessorMatch.ModelResult">
            <summary>
            Gets or sets the match result based on the model
            </summary>
        </member>
        <member name="T:Nancy.Responses.Negotiation.ResponseProcessor">
            <summary>
            Processes negotiated responses of model type <see cref="T:Nancy.Response"/>.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.ResponseProcessor.CanProcess(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Determines whether the processor can handle a given content type and model.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Responses.Negotiation.ProcessorMatch"/> result that determines the priority of the processor.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.ResponseProcessor.Process(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Process the response.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="P:Nancy.Responses.Negotiation.ResponseProcessor.ExtensionMappings">
            <summary>
            Gets a set of mappings that map a given extension (such as .json)
            to a media range that can be sent to the client in a vary header.
            </summary>
        </member>
        <member name="T:Nancy.Responses.Negotiation.ViewProcessor">
            <summary>
            Processes the model for view requests.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.ViewProcessor.#ctor(Nancy.ViewEngines.IViewFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.ViewProcessor"/> class,
            with the provided <paramref name="viewFactory"/>.
            </summary>
            <param name="viewFactory">The view factory that should be used to render views.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.ViewProcessor.CanProcess(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Determines whether the processor can handle a given content type and model.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Responses.Negotiation.ProcessorMatch"/> result that determines the priority of the processor.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.ViewProcessor.Process(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Process the response.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="P:Nancy.Responses.Negotiation.ViewProcessor.ExtensionMappings">
            <summary>
            Gets a set of mappings that map a given extension (such as .json)
            to a media range that can be sent to the client in a vary header.
            </summary>
        </member>
        <member name="T:Nancy.Responses.Negotiation.XmlProcessor">
            <summary>
            Processes the model for xml media types and extension.
            </summary>
        </member>
        <member name="M:Nancy.Responses.Negotiation.XmlProcessor.#ctor(System.Collections.Generic.IEnumerable{Nancy.ISerializer})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.Negotiation.XmlProcessor"/> class,
            with the provided <see cref="!:serializers"/>.
            </summary>
            <param name="serializers">The serializes that the processor will use to process the request.</param>
        </member>
        <member name="M:Nancy.Responses.Negotiation.XmlProcessor.CanProcess(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Determines whether the processor can handle a given content type and model.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Responses.Negotiation.ProcessorMatch"/> result that determines the priority of the processor.</returns>
        </member>
        <member name="M:Nancy.Responses.Negotiation.XmlProcessor.Process(Nancy.Responses.Negotiation.MediaRange,System.Object,Nancy.NancyContext)">
            <summary>
            Process the response.
            </summary>
            <param name="requestedMediaRange">Content type requested by the client.</param>
            <param name="model">The model for the given media range.</param>
            <param name="context">The nancy context.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="P:Nancy.Responses.Negotiation.XmlProcessor.ExtensionMappings">
            <summary>
            Gets a set of mappings that map a given extension (such as .json)
            to a media range that can be sent to the client in a vary header.
            </summary>
        </member>
        <member name="T:Nancy.Responses.NotAcceptableResponse">
            <summary>
            Response with status code 406 (Not Acceptable).
            </summary>
        </member>
        <member name="M:Nancy.Responses.NotAcceptableResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.NotAcceptableResponse"/> class.
            </summary>
        </member>
        <member name="T:Nancy.Responses.StreamResponse">
            <summary>
            Response that returns the contents of a stream of a given content-type.
            </summary>
        </member>
        <member name="M:Nancy.Responses.StreamResponse.#ctor(System.Func{System.IO.Stream},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.StreamResponse"/> class with the
            provided stream provider and content-type.
            </summary>
            <param name="source">The value producer for the response.</param>
            <param name="contentType">The content-type of the stream contents.</param>
        </member>
        <member name="M:Nancy.Responses.StreamResponse.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Nancy.IO.UnclosableStreamWrapper">
            <summary>
            To close the unclosable stream..
            To fight the unbeatable foe..
            To bear with unbearable sorrow..
            To run where the brave dare not go..
            </summary>
        </member>
        <member name="F:Nancy.IO.UnclosableStreamWrapper.baseStream">
            <summary>
            The wrapped stream
            </summary>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.IO.UnclosableStreamWrapper"/> class.
            </summary>
            <param name="baseStream">The base stream to wrap.</param>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. </param><param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream. </param><param name="count">The maximum number of bytes to be read from the current stream. </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support reading. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. </param><param name="count">The number of bytes to be written to the current stream. </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support writing. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.
            </returns>
            <param name="buffer">The buffer to read the data into. </param><param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data read from the stream. </param><param name="count">The maximum number of bytes to read. </param><param name="callback">An optional asynchronous callback, to be called when the read is complete. </param><param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param><exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception><exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <returns>
            An IAsyncResult that represents the asynchronous write, which could still be pending.
            </returns>
            <param name="buffer">The buffer to write data from. </param><param name="offset">The byte offset in <paramref name="buffer"/> from which to begin writing. </param><param name="count">The maximum number of bytes to write. </param><param name="callback">An optional asynchronous callback, to be called when the write is complete. </param><param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests. </param><exception cref="T:System.IO.IOException">Attempted an asynchronous write past the end of the stream, or a disk error occurs. </exception><exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><exception cref="T:System.NotSupportedException">The current Stream implementation does not support the write operation. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete.
            </summary>
            <returns>
            The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.
            </returns>
            <param name="asyncResult">The reference to the pending asynchronous request to finish. </param><exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method on the current stream. </exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request. </param><exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method on the current stream. </exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an Int32, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.IO.UnclosableStreamWrapper.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.BaseStream">
            <summary>
            Gets the base stream that the wrapper is wrapping
            </summary>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out.
            </summary>
            <returns>
            A value that determines whether the current stream can time out.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.ReadTimeout">
            <summary>
            Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. 
            </summary>
            <returns>
            A value, in milliseconds, that determines how long the stream will attempt to read before timing out.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.ReadTimeout"/> method always throws an <see cref="T:System.InvalidOperationException"/>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Nancy.IO.UnclosableStreamWrapper.WriteTimeout">
            <summary>
            Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. 
            </summary>
            <returns>
            A value, in milliseconds, that determines how long the stream will attempt to write before timing out.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.WriteTimeout"/> method always throws an <see cref="T:System.InvalidOperationException"/>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.ISerializer.CanSerialize(System.String)">
            <summary>
            Whether the serializer can serialize the content type
            </summary>
            <param name="contentType">Content type to serialise</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ISerializer.Serialize``1(System.String,``0,System.IO.Stream)">
            <summary>
            Serialize the given model with the given contentType
            </summary>
            <param name="contentType">Content type to serialize into</param>
            <param name="model">Model to serialize</param>
            <param name="outputStream">Output stream to serialize to</param>
            <returns>Serialised object</returns>
        </member>
        <member name="P:Nancy.ISerializer.Extensions">
            <summary>
            Gets the list of extensions that the serializer can handle.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of extensions if any are available, otherwise an empty enumerable.</value>
        </member>
        <member name="T:Nancy.Json.JsonSettings">
            <summary>
            Json serializer settings
            </summary>
        </member>
        <member name="P:Nancy.Json.JsonSettings.MaxJsonLength">
            <summary>
            Max length of json output
            </summary>
        </member>
        <member name="P:Nancy.Json.JsonSettings.MaxRecursions">
            <summary>
            Maximum number of recursions
            </summary>
        </member>
        <member name="P:Nancy.Json.JsonSettings.DefaultCharset">
            <summary>
            Default charset for json responses.
            </summary>
        </member>
        <member name="P:Nancy.Json.JsonSettings.RetainCasing">
            <summary>
            Set to true to retain the casing used in the C# code in produced JSON.
            Set to false to use camelCasing in the produced JSON.
            False by default.
            </summary>
        </member>
        <member name="P:Nancy.Json.JsonSettings.ISO8601DateFormat">
            <summary>
            Serialized date format
            </summary>
        </member>
        <member name="M:Nancy.Responses.DefaultJsonSerializer.CanSerialize(System.String)">
            <summary>
            Whether the serializer can serialize the content type
            </summary>
            <param name="contentType">Content type to serialise</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.Responses.DefaultJsonSerializer.Serialize``1(System.String,``0,System.IO.Stream)">
            <summary>
            Serialize the given model with the given contentType
            </summary>
            <param name="contentType">Content type to serialize into</param>
            <param name="model">Model to serialize</param>
            <param name="outputStream">Stream to serialize to</param>
            <returns>Serialised object</returns>
        </member>
        <member name="M:Nancy.Responses.DefaultJsonSerializer.IsJsonType(System.String)">
            <summary>
            Attempts to detect if the content type is JSON.
            Supports:
              application/json
              text/json
              application/vnd[something]+json
            Matches are case insentitive to try and be as "accepting" as possible.
            </summary>
            <param name="contentType">Request content type</param>
            <returns>True if content type is JSON, false otherwise</returns>
        </member>
        <member name="P:Nancy.Responses.DefaultJsonSerializer.Extensions">
            <summary>
            Gets the list of extensions that the serializer can handle.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of extensions if any are available, otherwise an empty enumerable.</value>
        </member>
        <member name="P:Nancy.Responses.DefaultJsonSerializer.RetainCasing">
            <summary>
            Set to true to retain the casing used in the C# code in produced JSON.
            Set to false to use camelCasig in the produced JSON.
            False by default.
            </summary>
        </member>
        <member name="P:Nancy.Responses.DefaultJsonSerializer.ISO8601DateFormat">
            <summary>
            Set to true to use the ISO8601 format for datetimes in produced JSON.
            Set to false to use the WCF \/Date()\/ format in the produced JSON.
            True by default.
            </summary>
        </member>
        <member name="M:Nancy.Responses.DefaultXmlSerializer.CanSerialize(System.String)">
            <summary>
            Whether the serializer can serialize the content type
            </summary>
            <param name="contentType">Content type to serialise</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.Responses.DefaultXmlSerializer.Serialize``1(System.String,``0,System.IO.Stream)">
            <summary>
            Serialize the given model with the given contentType
            </summary>
            <param name="contentType">Content type to serialize into</param>
            <param name="model">Model to serialize</param>
            <param name="outputStream">Output stream to serialize to</param>
            <returns>Serialised object</returns>
        </member>
        <member name="P:Nancy.Responses.DefaultXmlSerializer.Extensions">
            <summary>
            Gets the list of extensions that the serializer can handle.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of extensions if any are available, otherwise an empty enumerable.</value>
        </member>
        <member name="T:Nancy.Responses.TextResponse">
            <summary>
            Represents a text (text/plain) response
            </summary>
        </member>
        <member name="M:Nancy.Responses.TextResponse.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new instance of the TextResponse class
            </summary>
            <param name="contents">Text content - defaults to empty if null</param>
            <param name="contentType">Content Type - defaults to text/plain</param>
            <param name="encoding">String encoding - UTF8 if null</param>
        </member>
        <member name="M:Nancy.Responses.TextResponse.#ctor(Nancy.HttpStatusCode,System.String,System.Text.Encoding,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Nancy.Cookies.INancyCookie})">
            <summary>
            Creates a new instance of the TextResponse class
            </summary>
            <param name="statusCode">Status code - defaults to OK</param>
            <param name="contents">Text content - defaults to empty if null</param>
            <param name="encoding">String encoding - UTF8 if null</param>
            <param name="headers">Headers if required</param>
            <param name="cookies">Cookies if required</param>
        </member>
        <member name="T:Nancy.Routing.Constraints.AlphaRouteSegmentConstraint">
            <summary>
            Constraint for alphabetical route segments.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Constraints.RouteSegmentConstraintBase`1">
            <summary>
            Convenience class for implementing a route segment constraint.
            </summary>
            <typeparam name="T">The type of parameter to capture.</typeparam>
        </member>
        <member name="T:Nancy.Routing.Constraints.IRouteSegmentConstraint">
            <summary>
            Defines the functionality to constrain route matching.
            </summary>
        </member>
        <member name="M:Nancy.Routing.Constraints.IRouteSegmentConstraint.Matches(System.String)">
            <summary>
            Determines whether the given constraint should be matched.
            </summary>
            <param name="constraint">The route constraint.</param>
            <returns><c>true</c> if the constraint matches, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nancy.Routing.Constraints.IRouteSegmentConstraint.GetMatch(System.String,System.String,System.String)">
            <summary>
            Matches the segment and parameter name against the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="segment">The segment.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> containing information about the captured parameters.</returns>
        </member>
        <member name="M:Nancy.Routing.Constraints.RouteSegmentConstraintBase`1.TryMatch(System.String,System.String,`0@)">
            <summary>
            Tries to match the given segment against the constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="segment">The segment to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns><c>true</c> if the segment matches the constraint, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Nancy.Routing.Constraints.RouteSegmentConstraintBase`1.Name">
            <summary>
            Gets the name of the constraint, i.e. "int".
            </summary>
            <value>The constraint's name.</value>
        </member>
        <member name="T:Nancy.Routing.Constraints.BoolRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Boolean"/> route segments.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Constraints.CustomDateTimeRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.DateTime"/> route segments with custom format.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Constraints.ParameterizedRouteSegmentConstraintBase`1">
            <summary>
            Convenience class for implementing a route segment constraint that expects parameters.
            </summary>
            <typeparam name="T">The type of parameter to capture.</typeparam>
        </member>
        <member name="M:Nancy.Routing.Constraints.ParameterizedRouteSegmentConstraintBase`1.TryParseInt(System.String,System.Int32@)">
            <summary>
            Tries to parse an integer using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="string">The string value.</param>
            <param name="result">The resulting integer.</param>
            <returns><c>true</c> if the parsing was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nancy.Routing.Constraints.ParameterizedRouteSegmentConstraintBase`1.TryMatch(System.String,System.String[],`0@)">
            <summary>
            Tries to match the given segment and parameters against the constraint.
            </summary>
            <param name="segment">The segment to match.</param>
            <param name="parameters">The parameters to match.</param>
            <param name="matchedValue">The matched value.</param>
            <returns><c>true</c> if the segment and parameters matches the constraint, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Nancy.Routing.Constraints.DateTimeRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.DateTime"/> route segments.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Constraints.DecimalRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Decimal"/> route segments.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Constraints.GuidRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Guid"/> route segments.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Constraints.LongRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Int64"/> route segments.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Constraints.IntRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Int32"/> route segments.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Constraints.LengthRouteSegmentConstraint">
            <summary>
            Constraint for route segments with a specific length.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Constraints.MaxLengthRouteSegmentConstraint">
            <summary>
            Constraint for route segments with a maximum length.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Constraints.MaxRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Int32"/> route segments with a maximum value.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Constraints.MinLengthRouteSegmentConstraint">
            <summary>
            Constraint for route segments with a minimum length.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Constraints.MinRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Int32"/> route segments with a minimum length.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Constraints.RangeRouteSegmentConstraint">
            <summary>
            Constraint for <see cref="T:System.Int32"/> route segments with value within a specified range.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Constraints.VersionRouteSegmentConstraint">
            <summary>
            Constraint for version route segments.
            </summary>
        </member>
        <member name="T:Nancy.Routing.DefaultRequestDispatcher">
            <summary>
            Default implementation of a request dispatcher.
            </summary>
        </member>
        <member name="T:Nancy.Routing.IRequestDispatcher">
            <summary>
            Functionality for processing an incoming request.
            </summary>
        </member>
        <member name="M:Nancy.Routing.IRequestDispatcher.Dispatch(Nancy.NancyContext,System.Threading.CancellationToken)">
            <summary>
            Dispatches a requests.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> for the current request.</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Nancy.Routing.DefaultRequestDispatcher.#ctor(Nancy.Routing.IRouteResolver,System.Collections.Generic.IEnumerable{Nancy.Responses.Negotiation.IResponseProcessor},Nancy.Routing.IRouteInvoker)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.DefaultRequestDispatcher"/> class, with
            the provided <paramref name="routeResolver"/>, <paramref name="responseProcessors"/> and <paramref name="routeInvoker"/>.
            </summary>
            <param name="routeResolver"></param>
            <param name="responseProcessors"></param>
            <param name="routeInvoker"></param>
        </member>
        <member name="M:Nancy.Routing.DefaultRequestDispatcher.Dispatch(Nancy.NancyContext,System.Threading.CancellationToken)">
            <summary>
            Dispatches a requests.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> for the current request.</param>
        </member>
        <member name="T:Nancy.Routing.DefaultRouteDescriptionProvider">
            <summary>
            Default implementation of the <see cref="T:Nancy.Routing.IRouteDescriptionProvider"/> interface. Will look for
            route descriptions in resource files. The resource files should have the same name as the module
            for which it defines routes.
            </summary>
        </member>
        <member name="T:Nancy.Routing.IRouteDescriptionProvider">
            <summary>
            Defines the functionality for retrieving a description for a specific route.
            </summary>
        </member>
        <member name="M:Nancy.Routing.IRouteDescriptionProvider.GetDescription(Nancy.INancyModule,System.String)">
            <summary>
            Get the description for a route.
            </summary>
            <param name="module">The module that the route is defined in.</param>
            <param name="path">The path of the route that the description should be retrieved for.</param>
            <returns>A <see cref="T:System.String"/> containing the description of the route if it could be found, otherwise <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteDescriptionProvider.GetDescription(Nancy.INancyModule,System.String)">
            <summary>
            Get the description for a route.
            </summary>
            <param name="module">The module that the route is defined in.</param>
            <param name="path">The path of the route that the description should be retrieved for.</param>
            <returns>A <see cref="T:System.String"/> containing the description of the route if it could be found, otherwise <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="T:Nancy.Routing.DefaultRouteInvoker">
            <summary>
            Default route invoker implementation.
            </summary>
        </member>
        <member name="T:Nancy.Routing.IRouteInvoker">
            <summary>
            Defines the functionality for invoking a <see cref="T:Nancy.Routing.Route"/> and returning a <see cref="T:Nancy.Response"/>
            </summary>
        </member>
        <member name="M:Nancy.Routing.IRouteInvoker.Invoke(Nancy.Routing.Route,System.Threading.CancellationToken,Nancy.DynamicDictionary,Nancy.NancyContext)">
            <summary>
            Invokes the specified <paramref name="route"/> with the provided <paramref name="parameters"/>.
            </summary>
            <param name="route">The route that should be invoked.</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="parameters">The parameters that the route should be invoked with.</param>
            <param name="context">The context of the route that is being invoked.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance that represents the result of the invoked route.</returns>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteInvoker.#ctor(Nancy.Responses.Negotiation.IResponseNegotiator)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.DefaultRouteInvoker"/> class.
            </summary>
            <param name="negotiator">The response negotiator.</param>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteInvoker.Invoke(Nancy.Routing.Route,System.Threading.CancellationToken,Nancy.DynamicDictionary,Nancy.NancyContext)">
            <summary>
            Invokes the specified <paramref name="route"/> with the provided <paramref name="parameters"/>.
            </summary>
            <param name="route">The route that should be invoked.</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="parameters">The parameters that the route should be invoked with.</param>
            <param name="context">The context of the route that is being invoked.</param>
            <returns>A <see cref="T:Nancy.Response"/> instance that represents the result of the invoked route.</returns>
        </member>
        <member name="T:Nancy.Routing.DefaultRouteSegmentExtractor">
            <summary>
            Default implementation of the <see cref="T:Nancy.Routing.IRouteSegmentExtractor"/> interface.
            </summary>
        </member>
        <member name="T:Nancy.Routing.IRouteSegmentExtractor">
            <summary>
            Defines the functionality for extracting the individual segments from a route path.
            </summary>
        </member>
        <member name="M:Nancy.Routing.IRouteSegmentExtractor.Extract(System.String)">
            <summary>
            Extracts the segments from the <paramref name="path"/>;
            </summary>
            <param name="path">The path that the segments should be extracted from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, containing the extracted segments.</returns>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteSegmentExtractor.Extract(System.String)">
            <summary>
            Extracts the segments from the <paramref name="path"/>;
            </summary>
            <param name="path">The path that the segments should be extracted from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, containing the extracted segments.</returns>
        </member>
        <member name="T:Nancy.Routing.IRouteMetadataProvider">
            <summary>
            Defines the functionality for retrieving metadata for routes.
            </summary>
        </member>
        <member name="M:Nancy.Routing.IRouteMetadataProvider.GetMetadataType(Nancy.INancyModule,Nancy.Routing.RouteDescription)">
            <summary>
            Gets the <see cref="T:System.Type"/> of the metadata that is created by the provider.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> instance that the route is declared in.</param>
            <param name="routeDescription">A <see cref="T:Nancy.Routing.RouteDescription"/> for the route.</param>
            <returns>A <see cref="T:System.Type"/> instance, or <see langword="null"/> if nothing is found.</returns>
        </member>
        <member name="M:Nancy.Routing.IRouteMetadataProvider.GetMetadata(Nancy.INancyModule,Nancy.Routing.RouteDescription)">
            <summary>
            Gets the metadata for the provided route.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> instance that the route is declared in.</param>
            <param name="routeDescription">A <see cref="T:Nancy.Routing.RouteDescription"/> for the route.</param>
            <returns>An object representing the metadata for the given route, or <see langword="null"/> if nothing is found.</returns>
        </member>
        <member name="T:Nancy.Routing.ParameterSegmentInformation">
            <summary>
            Information about a segment parameter.
            </summary>
        </member>
        <member name="M:Nancy.Routing.ParameterSegmentInformation.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.ParameterSegmentInformation"/> class.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="defaultValue">The default value, if any, of the parameter.</param>
            <param name="isOptional"><see langword="true"/> if the parameter is optional, otherwise <see langword="false"/>.</param>
        </member>
        <member name="P:Nancy.Routing.ParameterSegmentInformation.DefaultValue">
            <summary>
            Gets the default value for the parameter.
            </summary>
        </member>
        <member name="P:Nancy.Routing.ParameterSegmentInformation.FullSegmentName">
            <summary>
            Gets the full name of the segment.
            </summary>
            <remarks>Returns a string in one of the formats: {name}, {name?}, {name?defaultValue} depending on the kind of parameter.</remarks>
        </member>
        <member name="P:Nancy.Routing.ParameterSegmentInformation.IsOptional">
            <summary>
            Gets whether or not the parameter is optional.
            </summary>
            <value><see langword="true"/> if the parameter is optional, otherwise <see langword="false" />.</value>
        </member>
        <member name="P:Nancy.Routing.ParameterSegmentInformation.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="T:Nancy.Routing.ResolveResult">
            <summary>
            A class representing a route resolution result
            </summary>
        </member>
        <member name="P:Nancy.Routing.ResolveResult.Route">
            <summary>
            Gets or sets the route
            </summary>
        </member>
        <member name="P:Nancy.Routing.ResolveResult.Parameters">
            <summary>
            Gets or sets the captured parameters
            </summary>
        </member>
        <member name="P:Nancy.Routing.ResolveResult.Before">
            <summary>
            Gets or sets the before module pipeline
            </summary>
        </member>
        <member name="P:Nancy.Routing.ResolveResult.After">
            <summary>
            Gets or sets the after module pipeline
            </summary>
        </member>
        <member name="P:Nancy.Routing.ResolveResult.OnError">
            <summary>
            Gets or sets the on error module pipeline
            </summary>
        </member>
        <member name="T:Nancy.Routing.OptionsRoute">
            <summary>
            Route that is returned when the path could be matched but, the method was OPTIONS and there was no user defined handler for OPTIONS.
            </summary>
        </member>
        <member name="T:Nancy.Routing.Route">
            <summary>
            Stores information about a declared route in Nancy.
            </summary>
        </member>
        <member name="M:Nancy.Routing.Route.#ctor(Nancy.Routing.RouteDescription,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Route"/> type, with the specified <see cref="T:Nancy.Routing.RouteDescription"/>.
            </summary>
            <param name="description"></param>
            <param name="action">The action that should take place when the route is invoked.</param>
        </member>
        <member name="M:Nancy.Routing.Route.#ctor(System.String,System.String,System.String,System.Func{Nancy.NancyContext,System.Boolean},System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Route"/> type, with the specified definition.
            </summary>
            <param name="name">Route name</param>
            <param name="method">The HTTP method that the route is declared for.</param>
            <param name="path">The path that the route is declared for.</param>
            <param name="condition">A condition that needs to be satisfied inorder for the route to be eligible for invocation.</param>
            <param name="action">The action that should take place when the route is invoked.</param>
        </member>
        <member name="M:Nancy.Routing.Route.#ctor(System.String,System.String,System.Func{Nancy.NancyContext,System.Boolean},System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Route"/> type, with the specified definition.
            </summary>
            <param name="method">The HTTP method that the route is declared for.</param>
            <param name="path">The path that the route is declared for.</param>
            <param name="condition">A condition that needs to be satisfied inorder for the route to be eligiable for invocation.</param>
            <param name="action">The action that should take place when the route is invoked.</param>
        </member>
        <member name="M:Nancy.Routing.Route.Invoke(Nancy.DynamicDictionary,System.Threading.CancellationToken)">
            <summary>
            Invokes the route with the provided <paramref name="parameters"/>.
            </summary>
            <param name="parameters">A <see cref="T:Nancy.DynamicDictionary"/> that contains the parameters that should be passed to the route.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A (hot) task of <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.Routing.Route.FromSync(Nancy.Routing.RouteDescription,System.Func{System.Object,System.Object})">
            <summary>
            Creates a route from a sync delegate signature
            </summary>
            <param name="description"></param>
            <param name="syncFunc">The action that should take place when the route is invoked.</param>
            <returns>A Route instance</returns>
        </member>
        <member name="M:Nancy.Routing.Route.FromSync(System.String,System.String,System.Func{Nancy.NancyContext,System.Boolean},System.Func{System.Object,System.Object})">
            <summary>
            Creates a route from a sync delegate signature
            </summary>
            <param name="method">The HTTP method that the route is declared for.</param>
            <param name="path">The path that the route is declared for.</param>
            <param name="condition">A condition that needs to be satisfied inorder for the route to be eligiable for invocation.</param>
            <param name="syncFunc">The action that should take place when the route is invoked.</param>
            <returns>A Route instance</returns>
        </member>
        <member name="M:Nancy.Routing.Route.FromSync(System.String,System.String,System.String,System.Func{Nancy.NancyContext,System.Boolean},System.Func{System.Object,System.Object})">
            <summary>
            Creates a route from a sync delegate signature
            </summary>
            <param name="name">Route name</param>
            <param name="method">The HTTP method that the route is declared for.</param>
            <param name="path">The path that the route is declared for.</param>
            <param name="condition">A condition that needs to be satisfied inorder for the route to be eligible for invocation.</param>
            <param name="syncFunc">The action that should take place when the route is invoked.</param>
            <returns>A Route instance</returns>
        </member>
        <member name="M:Nancy.Routing.Route.Wrap(System.Func{System.Object,System.Object})">
            <summary>
            Wraps a sync delegate in a delegate that returns a task
            </summary>
            <param name="syncFunc">Sync delegate</param>
            <returns>Task wrapped version</returns>
        </member>
        <member name="P:Nancy.Routing.Route.Action">
            <summary>
            Gets or sets the action that should take place when the route is invoked.
            </summary>
            <value>A <see cref="T:System.Func`2"/> that represents the action of the route.</value>
        </member>
        <member name="P:Nancy.Routing.Route.Description">
            <summary>
            Gets the description of the route.
            </summary>
            <value>A <see cref="T:Nancy.Routing.RouteDescription"/> instance.</value>
        </member>
        <member name="T:Nancy.Routing.RouteCacheExtensions">
            <summary>
            Contains extensions for the <see cref="T:Nancy.Routing.IRouteCache"/> type.
            </summary>
        </member>
        <member name="M:Nancy.Routing.RouteCacheExtensions.RetrieveMetadata``1(System.Collections.Generic.IDictionary{System.Type,System.Collections.Generic.List{System.Tuple{System.Int32,Nancy.Routing.RouteDescription}}})">
            <summary>
            Retrieves metadata for all declared routes.
            </summary>
            <typeparam name="TMetadata">The type of the metadata to retrieve.</typeparam>
            <param name="cache">The <see cref="T:Nancy.Routing.IRouteCache"/> to retrieve the metadata.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing instances of the <typeparamref name="TMetadata"/> type.</returns>
        </member>
        <member name="T:Nancy.Routing.RouteMetadata">
            <summary>
            Stores metadata created by <see cref="T:Nancy.Routing.IRouteMetadataProvider"/> instances.
            </summary>
        </member>
        <member name="M:Nancy.Routing.RouteMetadata.#ctor(System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Creates a new instance of the <see cref="T:Nancy.Routing.RouteMetadata"/> class.
            </summary>
            <param name="metadata">An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the metadata, organised by the type that it is stored in.</param>
        </member>
        <member name="M:Nancy.Routing.RouteMetadata.Has``1">
            <summary>
            Gets a boolean that indicates if the specific type of metadata is stored.
            </summary>
            <typeparam name="TMetadata">The type of the metadata to check for.</typeparam>
            <returns><see langword="true"/> if metadata, of the requested type is stored, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Nancy.Routing.RouteMetadata.Retrieve``1">
            <summary>
            Retrieves metadata of the provided type.
            </summary>
            <typeparam name="TMetadata">The type of the metadata to retrieve.</typeparam>
            <returns>The metadata instance if available, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="P:Nancy.Routing.RouteMetadata.Raw">
            <summary>
            Gets the raw metadata <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance.</value>
        </member>
        <member name="T:Nancy.Routing.RouteMetadataProvider`1">
            <summary>
            Defines the functionality for retrieving metadata for routes.
            </summary>
            <typeparam name="TMetadata">The metadata type.</typeparam>
        </member>
        <member name="M:Nancy.Routing.RouteMetadataProvider`1.GetMetadataType(Nancy.INancyModule,Nancy.Routing.RouteDescription)">
            <summary>
            Gets the <see cref="T:System.Type"/> of the metadata that is created by the provider.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> instance that the route is declared in.</param>
            <param name="routeDescription">A <see cref="T:Nancy.Routing.RouteDescription"/> for the route.</param>
            <returns>A <see cref="T:System.Type"/> instance, or null if none are found.</returns>
        </member>
        <member name="M:Nancy.Routing.RouteMetadataProvider`1.GetMetadata(Nancy.INancyModule,Nancy.Routing.RouteDescription)">
            <summary>
            Gets the metadata for the provided route.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> instance that the route is declared in.</param>
            <param name="routeDescription">A <see cref="T:Nancy.Routing.RouteDescription"/> for the route.</param>
            <returns>An instance of <typeparamref name="TMetadata"/>.</returns>
        </member>
        <member name="M:Nancy.Routing.RouteMetadataProvider`1.GetRouteMetadata(Nancy.INancyModule,Nancy.Routing.RouteDescription)">
            <summary>
            Gets the metadata for the provided route.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> instance that the route is declared in.</param>
            <param name="routeDescription">A <see cref="T:Nancy.Routing.RouteDescription"/> for the route.</param>
            <returns>An instance of <typeparamref name="TMetadata"/>.</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.IRouteResolverTrie">
            <summary>
            Trie structure for resolving routes
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.IRouteResolverTrie.BuildTrie(Nancy.Routing.IRouteCache)">
            <summary>
            Build the trie from the route cache
            </summary>
            <param name="cache">The route cache</param>
        </member>
        <member name="M:Nancy.Routing.Trie.IRouteResolverTrie.GetMatches(System.String,System.String,Nancy.NancyContext)">
            <summary>
            Get all matches for the given method and path
            </summary>
            <param name="method">HTTP method</param>
            <param name="path">Requested path</param>
            <param name="context">Current Nancy context</param>
            <returns>An array of <see cref="T:Nancy.Routing.Trie.MatchResult"/> elements</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.IRouteResolverTrie.GetOptions(System.String,Nancy.NancyContext)">
            <summary>
            Get all method options for the given path
            </summary>
            <param name="path">Requested path</param>
            <param name="context">Current Nancy context</param>
            <returns>A collection of strings, each representing an allowed method</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.ITrieNodeFactory">
            <summary>
            Factory for creating trie nodes from route definition segments
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.ITrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode,System.String)">
            <summary>
            Gets the correct Trie node type for the given segment
            </summary>
            <param name="parent">Parent node</param>
            <param name="segment">Segment</param>
            <returns>Corresponding TrieNode instance</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.MatchResult">
            <summary>
            Match result for a matched route
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.NodeData">
            <summary>
            Represents a route that ends at a particular node.
            We store/calculate as much as we can at build time to save
            time during route matching.
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.NodeData.ModuleType">
            <summary>
            Gets or sets the module type from the matching module
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.NodeData.Method">
            <summary>
            Gets or sets the route method
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.NodeData.RouteIndex">
            <summary>
            Gets or sets the index in the module routing table
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.NodeData.RouteLength">
            <summary>
            Gets or sets the number of segments in the route
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.NodeData.Score">
            <summary>
            Gets or sets the route score
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.NodeData.Condition">
            <summary>
            Gets or sets the route condition delegate
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.MatchResult.CompareTo(Nancy.Routing.Trie.MatchResult)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:Nancy.Routing.Trie.MatchResult.Parameters">
            <summary>
            Gets or sets the captured parameters
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.MatchResult.NoMatch">
            <summary>
            Gets the "no match" <see cref="T:Nancy.Routing.Trie.MatchResult"/>
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.MatchResult.NoMatches">
            <summary>
            Gets the "no matches" <see cref="T:Nancy.Routing.Trie.MatchResult"/> collection
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.NodeDataExtensions">
            <summary>
            Helpers methods for NodeData
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.NodeDataExtensions.ToResult(Nancy.Routing.Trie.NodeData,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts a <see cref="T:Nancy.Routing.Trie.NodeData"/> instance into a <see cref="T:Nancy.Routing.Trie.MatchResult"/>
            </summary>
            <param name="data">Node data</param>
            <param name="parameters">Captured parameters</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.MatchResult"/> instance</returns>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.CaptureNode">
            <summary>
            A node for standard captures e.g. {foo}
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.TrieNode">
            <summary>
            A base class representing a node in the route trie
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.#ctor(Nancy.Routing.Trie.Nodes.TrieNode,System.String,Nancy.Routing.Trie.ITrieNodeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.Trie.Nodes.TrieNode"/> class
            </summary>
            <param name="parent">Parent node</param>
            <param name="segment">Segment of the route definition</param>
            <param name="nodeFactory">Factory for creating new nodes</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.Add(System.String[],System.Type,System.Int32,Nancy.Routing.RouteDescription)">
            <summary>
            Add a new route to the trie
            </summary>
            <param name="segments">The segments of the route definition</param>
            <param name="moduleType">The module key the route comes from</param>
            <param name="routeIndex">The route index in the module</param>
            <param name="routeDescription">The route description</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.Add(System.String[],System.Int32,System.Int32,System.Int32,System.Type,System.Int32,Nancy.Routing.RouteDescription)">
            <summary>
            Add a new route to the trie
            </summary>
            <param name="segments">The segments of the route definition</param>
            <param name="currentIndex">Current index in the segments array</param>
            <param name="currentScore">Current score for this route</param>
            <param name="nodeCount">Number of nodes added for this route</param>
            <param name="moduleType">The module key the route comes from</param>
            <param name="routeIndex">The route index in the module</param>
            <param name="routeDescription">The route description</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.GetMatches(System.String[],Nancy.NancyContext)">
            <summary>
            Gets all matches for a given requested route
            </summary>
            <param name="segments">Requested route segments</param>
            <param name="context">Current Nancy context</param>
            <returns>A collection of <see cref="T:Nancy.Routing.Trie.MatchResult"/> objects</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.GetMatches(System.String[],System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object},Nancy.NancyContext)">
            <summary>
            Gets all matches for a given requested route
            </summary>
            <param name="segments">Requested route segments</param>
            <param name="currentIndex">Current index in the route segments</param>
            <param name="capturedParameters">Currently captured parameters</param>
            <param name="context">Current Nancy context</param>
            <returns>A collection of <see cref="T:Nancy.Routing.Trie.MatchResult"/> objects</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.GetRoutes">
            <summary>
            Gets a string representation of all routes
            </summary>
            <returns>Collection of strings, each representing a route</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.BuildNodeData(System.Int32,System.Int32,System.Type,System.Int32,Nancy.Routing.RouteDescription)">
            <summary>
            Build the node data that will be used to create the <see cref="T:Nancy.Routing.Trie.MatchResult"/>
            We calculate/store as much as possible at build time to reduce match time.
            </summary>
            <param name="nodeCount">Number of nodes in the route</param>
            <param name="score">Score for the route</param>
            <param name="moduleType">The module key the route comes from</param>
            <param name="routeIndex">The route index in the module</param>
            <param name="routeDescription">The route description</param>
            <returns>A NodeData instance</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.NoMoreSegments(System.String[],System.Int32)">
            <summary>
            Returns whether we are at the end of the segments
            </summary>
            <param name="segments">Route segments</param>
            <param name="currentIndex">Current index</param>
            <returns>True if no more segments left, false otherwise</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.BuildResults(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Build the results collection from the captured parameters if
            this node is the end result
            </summary>
            <param name="capturedParameters">Currently captured parameters</param>
            <param name="localCaptures">Parameters captured by the local matching</param>
            <returns>Array of <see cref="T:Nancy.Routing.Trie.MatchResult"/> objects corresponding to each set of <see cref="P:Nancy.Routing.Trie.Nodes.TrieNode.NodeData"/> stored at this node</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.GetMatchingChildren(System.String[],System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},Nancy.NancyContext)">
            <summary>
            Gets all the matches from this node's children
            </summary>
            <param name="segments">Requested route segments</param>
            <param name="currentIndex">Current index</param>
            <param name="capturedParameters">Currently captured parameters</param>
            <param name="localCaptures">Parameters captured by the local matching</param>
            <param name="context">Current Nancy context</param>
            <returns>Collection of <see cref="T:Nancy.Routing.Trie.MatchResult"/> objects</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.TrieNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.TrieNode.Parent">
            <summary>
            Gets or sets the parent node
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.TrieNode.RouteDefinitionSegment">
            <summary>
            Gets or sets the segment from the route definition that this node represents
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.TrieNode.Children">
            <summary>
            Gets or sets the children of this node
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.TrieNode.NodeData">
            <summary>
            Gets or sets the node data stored at this node, which will be converted
            into the <see cref="T:Nancy.Routing.Trie.MatchResult"/> if a match is found
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.TrieNode.AdditionalParameters">
            <summary>
            Additional parameters to set that can be determined at trie build time
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.TrieNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.CaptureNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.CaptureNodeWithConstraint">
            <summary>
            A node for constraint captures e.g. {foo:alpha}, {foo:datetime}
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithConstraint.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.CaptureNodeWithConstraint.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.CaptureNodeWithDefaultValue">
            <summary>
            A capture node with a default value e.g. {foo?default}
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithDefaultValue.Add(System.String[],System.Int32,System.Int32,System.Int32,System.Type,System.Int32,Nancy.Routing.RouteDescription)">
            <summary>
            Add a new route to the trie
            Adds itself as a normal capture node, but also sets a default capture
            on the parent and adds this node's children as children of the parent
            too (so it can effectively be "skipped" during matching)
            </summary>
            <param name="segments">The segments of the route definition</param>
            <param name="currentIndex">Current index in the segments array</param>
            <param name="currentScore">Current score for this route</param>
            <param name="nodeCount">Number of nodes added for this route</param>
            <param name="moduleType">The module key the route comes from</param>
            <param name="routeIndex">The route index in the module</param>
            <param name="routeDescription">The route description</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithDefaultValue.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.CaptureNodeWithDefaultValue.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters">
            <summary>
            A node multiple standard captures combined with a literal e.g. {id}.png.{thing}.{otherthing}
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.#ctor(Nancy.Routing.Trie.Nodes.TrieNode,System.String,Nancy.Routing.Trie.ITrieNodeFactory,System.Collections.Generic.IEnumerable{Nancy.Routing.Constraints.IRouteSegmentConstraint})">
            <summary>
            Captures parameters within segments that contain literals.
                i.e:
                    /{file}.{name}
                    /{file}.html
                    /{major}.{minor}.{revision}B{build}
            </summary>
            <param name="parent">The parent node</param>
            <param name="segment">The segment to match upon</param>
            <param name="nodeFactory">The factory</param>
            <param name="routeSegmentConstraints"></param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.IsMatch(System.String)">
            <summary>
            Determines whether this TrieNode should be used for the given segment.
            </summary>
            <param name="segment">The route segment</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.ExtractParameterNames">
            <summary>
            Extracts the parameter name and the literals for the segment
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.CaptureNodeWithMultipleParameters.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.GreedyRegExCaptureNode">
            <summary>
            A greedy regular expression capture node e.g. ^(?&lt;id>\d{0,100})$
            For use on an entire route path, regular expression must be surrounded by ^( )$
            e.g. @"^(?:(?&lt;id>videos/\d{1,10})(?:/{0,1}(?&lt;slug>.*)))$"
            This will match for a Url like /videos/123/some-random-slug
            and capture 'videos/123' and 'some-random-slug'
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.GreedyRegExCaptureNode.GetMatches(System.String[],System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object},Nancy.NancyContext)">
            <summary>
            Gets all matches for a given requested route
            Overridden to handle greedy capturing
            </summary>
            <param name="segments">Requested route segments</param>
            <param name="currentIndex">Current index in the route segments</param>
            <param name="capturedParameters">Currently captured parameters</param>
            <param name="context">Current Nancy context</param>
            <returns>A collection of <see cref="T:Nancy.Routing.Trie.MatchResult"/> objects</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.GreedyRegExCaptureNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            Not-required or called for this node type
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.GreedyRegExCaptureNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.GreedyCaptureNode">
            <summary>
            A greedy capture node e.g. {greedy*}
            e.g. /foo/bar/{greedy*} - this node will be hit for /foo/bar/[anything that doesn't match another route], but
            not for just /foo/bar
            e.g. /foo/{greedy*}/bar - this node will be hit for /foo/[anything that doesn't match another route]/bar
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.GreedyCaptureNode.GetMatches(System.String[],System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object},Nancy.NancyContext)">
            <summary>
            Gets all matches for a given requested route
            Overridden to handle greedy capturing
            </summary>
            <param name="segments">Requested route segments</param>
            <param name="currentIndex">Current index in the route segments</param>
            <param name="capturedParameters">Currently captured parameters</param>
            <param name="context">Current Nancy context</param>
            <returns>A collection of <see cref="T:Nancy.Routing.Trie.MatchResult"/> objects</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.GreedyCaptureNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            Not-required or called for this node type
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.GreedyCaptureNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.LiteralNode">
            <summary>
            Literal string node e.g. goo
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.LiteralNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.LiteralNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.OptionalCaptureNode">
            <summary>
            An optional capture node e.g. {foo?}
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.OptionalCaptureNode.Add(System.String[],System.Int32,System.Int32,System.Int32,System.Type,System.Int32,Nancy.Routing.RouteDescription)">
            <summary>
            Add a new route to the trie
            Adds itself as a normal capture node, but also adds this node's
            children as children of the parent too
            (so it can effectively be "skipped" during matching)
            </summary>
            <param name="segments">The segments of the route definition</param>
            <param name="currentIndex">Current index in the segments array</param>
            <param name="currentScore">Current score for this route</param>
            <param name="nodeCount">Number of nodes added for this route</param>
            <param name="moduleType">The module key the route comes from</param>
            <param name="routeIndex">The route index in the module</param>
            <param name="routeDescription">The route description</param>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.OptionalCaptureNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.OptionalCaptureNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.RegExNode">
            <summary>
            A regular expression capture node e.g. (?&lt;foo>\d{2,4})
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.RegExNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.RegExNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.Nodes.RootNode">
            <summary>
            Root node of a trie
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.RootNode.GetMatches(System.String[],System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object},Nancy.NancyContext)">
            <summary>
            Gets all matches for a given requested route
            </summary>
            <param name="segments">Requested route segments</param>
            <param name="currentIndex">Current index in the route segments</param>
            <param name="capturedParameters">Currently captured parameters</param>
            <param name="context">Current Nancy context</param>
            <returns>A collection of <see cref="T:Nancy.Routing.Trie.MatchResult"/> objects</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.Nodes.RootNode.Match(System.String)">
            <summary>
            Matches the segment for a requested route
            </summary>
            <param name="segment">Segment string</param>
            <returns>A <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> instance representing the result of the match</returns>
        </member>
        <member name="P:Nancy.Routing.Trie.Nodes.RootNode.Score">
            <summary>
            Score for this node
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.RouteResolverTrie">
            <summary>
            The default route resolution trie
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.RouteResolverTrie.BuildTrie(Nancy.Routing.IRouteCache)">
            <summary>
            Build the trie from the route cache
            </summary>
            <param name="cache">The route cache</param>
        </member>
        <member name="M:Nancy.Routing.Trie.RouteResolverTrie.GetMatches(System.String,System.String,Nancy.NancyContext)">
            <summary>
            Get all matches for the given method and path
            </summary>
            <param name="method">HTTP method</param>
            <param name="path">Requested path</param>
            <param name="context">Current Nancy context</param>
            <returns>An array of <see cref="T:Nancy.Routing.Trie.MatchResult"/> elements</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.RouteResolverTrie.GetOptions(System.String,Nancy.NancyContext)">
            <summary>
            Get all method options for the given path
            </summary>
            <param name="path">Requested path</param>
            <param name="context">Current Nancy context</param>
            <returns>A collection of strings, each representing an allowed method</returns>
        </member>
        <member name="M:Nancy.Routing.Trie.RouteResolverTrie.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Nancy.Routing.Trie.SegmentMatch">
            <summary>
            A segment match result
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.SegmentMatch.Matches">
            <summary>
            Gets a value indicating whether the match was successful or not
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.SegmentMatch.NoMatch">
            <summary>
            Gets a <see cref="T:Nancy.Routing.Trie.SegmentMatch"/> representing "no match"
            </summary>
        </member>
        <member name="P:Nancy.Routing.Trie.SegmentMatch.CapturedParameters">
            <summary>
            Gets the captured parameters from the match, if the match was successful
            </summary>
        </member>
        <member name="T:Nancy.Routing.Trie.TrieNodeFactory">
            <summary>
            Factory for creating the correct type of TrieNode
            </summary>
        </member>
        <member name="M:Nancy.Routing.Trie.TrieNodeFactory.GetNodeForSegment(Nancy.Routing.Trie.Nodes.TrieNode,System.String)">
            <summary>
            Gets the correct Trie node type for the given segment
            </summary>
            <param name="parent">Parent node</param>
            <param name="segment">Segment</param>
            <returns>TrieNode instance</returns>
        </member>
        <member name="T:Nancy.Security.SSLProxy">
            <summary>
            Allows a BeforeRequest hook to change Url to HTTPS if X-Forwarded-Proto header present
            </summary>
        </member>
        <member name="M:Nancy.Security.SSLProxy.RewriteSchemeUsingForwardedHeaders(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Checks for Forwarded or X-Forwarded-Proto header and if so makes current url scheme https
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="T:Nancy.Session.CookieBasedSessionsConfiguration">
            <summary>
            Configuration options for cookie based sessions
            </summary>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessionsConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Session.CookieBasedSessionsConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessionsConfiguration.#ctor(Nancy.Cryptography.CryptographyConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Session.CookieBasedSessionsConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Nancy.Session.CookieBasedSessionsConfiguration.CryptographyConfiguration">
            <summary>
            Gets or sets the cryptography configuration
            </summary>
        </member>
        <member name="P:Nancy.Session.CookieBasedSessionsConfiguration.Serializer">
            <summary>
            Formatter for de/serializing the session objects
            </summary>
        </member>
        <member name="P:Nancy.Session.CookieBasedSessionsConfiguration.CookieName">
            <summary>
            Cookie name for storing session information
            </summary>
        </member>
        <member name="P:Nancy.Session.CookieBasedSessionsConfiguration.Domain">
            <summary>
            Gets or sets the domain of the session cookie
            </summary>
        </member>
        <member name="P:Nancy.Session.CookieBasedSessionsConfiguration.Path">
            <summary>
            Gets or sets the path of the session cookie
            </summary>
        </member>
        <member name="P:Nancy.Session.CookieBasedSessionsConfiguration.IsValid">
            <summary>
            Gets a value indicating whether the configuration is valid or not.
            </summary>
        </member>
        <member name="T:Nancy.StaticContent">
            <summary>
            Registers the static contents hook in the application pipeline at startup.
            </summary>
        </member>
        <member name="M:Nancy.StaticContent.#ctor(Nancy.IRootPathProvider,Nancy.Conventions.StaticContentsConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.StaticContent"/> class, using the
            provided <paramref name="rootPathProvider"/> and <paramref name="conventions"/>.
            </summary>
            <param name="rootPathProvider">The current root path provider.</param>
            <param name="conventions">The static content conventions.</param>
        </member>
        <member name="M:Nancy.StaticContent.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Perform any initialisation tasks
            </summary>
        </member>
        <member name="M:Nancy.StaticContent.Enable(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Enable "manual" static content.
            Only use this if you want to manually configure a pipeline hook to have static
            content server, for example, after authentication.
            </summary>
            <param name="pipelines">The pipelines to hook into</param>
        </member>
        <member name="T:Nancy.Conventions.ViewLocationConventions">
            <summary>
            This is a wrapper around the type
            <c>IEnumerable&lt;Func&lt;string, object, ViewLocationContext, string&gt;&gt;</c> and its
            only purpose is to make Ninject happy which was throwing an exception
            when constructor injecting this type.
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.Base64Helpers.GetBase64Length(System.Int32)">
            <summary>
            Calculates how long a byte array of X length will be after base64 encoding
            </summary>
            <param name="normalLength">The normal, 8bit per byte, length of the byte array</param>
            <returns>Base64 encoded length</returns>
        </member>
        <member name="T:Nancy.Cryptography.CryptographyConfiguration">
            <summary>
            Cryptographic setup for classes that use encryption and HMAC
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.CryptographyConfiguration.#ctor(Nancy.Cryptography.IEncryptionProvider,Nancy.Cryptography.IHmacProvider)">
            <summary>
            Creates a new instance of the CryptographyConfiguration class
            </summary>
            <param name="encryptionProvider">Encryption provider</param>
            <param name="hmacProvider">HMAC provider</param>
        </member>
        <member name="P:Nancy.Cryptography.CryptographyConfiguration.Default">
            <summary>
            Gets the default configuration - Rijndael encryption, HMACSHA256 HMAC, random keys
            </summary>
        </member>
        <member name="P:Nancy.Cryptography.CryptographyConfiguration.NoEncryption">
            <summary>
            Gets configuration with no encryption and HMACSHA256 HMAC with a random key
            </summary>
        </member>
        <member name="P:Nancy.Cryptography.CryptographyConfiguration.EncryptionProvider">
            <summary>
            Gets the encryption provider
            </summary>
        </member>
        <member name="P:Nancy.Cryptography.CryptographyConfiguration.HmacProvider">
            <summary>
            Gets the hmac provider
            </summary>
        </member>
        <member name="T:Nancy.Cryptography.DefaultHmacProvider">
            <summary>
            Provides SHA-256 HMACs
            </summary>
        </member>
        <member name="T:Nancy.Cryptography.IHmacProvider">
            <summary>
            Creates Hash-based Message Authentication Codes (HMACs)
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.IHmacProvider.GenerateHmac(System.String)">
            <summary>
            Create a hmac from the given data
            </summary>
            <param name="data">Data to create hmac from</param>
            <returns>Hmac bytes</returns>
        </member>
        <member name="M:Nancy.Cryptography.IHmacProvider.GenerateHmac(System.Byte[])">
            <summary>
            Create a hmac from the given data
            </summary>
            <param name="data">Data to create hmac from</param>
            <returns>Hmac bytes</returns>
        </member>
        <member name="P:Nancy.Cryptography.IHmacProvider.HmacLength">
            <summary>
            Gets the length of the HMAC signature in bytes
            </summary>
        </member>
        <member name="F:Nancy.Cryptography.DefaultHmacProvider.PreferredKeySize">
            <summary>
            Preferred key size for HMACSHA256
            </summary>
        </member>
        <member name="F:Nancy.Cryptography.DefaultHmacProvider.hmacLength">
            <summary>
            HMAC length
            </summary>
        </member>
        <member name="F:Nancy.Cryptography.DefaultHmacProvider.key">
            <summary>
            Key
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.DefaultHmacProvider.#ctor(Nancy.Cryptography.IKeyGenerator)">
            <summary>
            Creates a new instance of the DefaultHmacProvider type
            </summary>
            <param name="keyGenerator">Key generator to use to generate the key</param>
        </member>
        <member name="M:Nancy.Cryptography.DefaultHmacProvider.GenerateHmac(System.String)">
            <summary>
            Create a hmac from the given data using the given passPhrase
            </summary>
            <param name="data">Data to create hmac from</param>
            <returns>String representation of the hmac</returns>
        </member>
        <member name="M:Nancy.Cryptography.DefaultHmacProvider.GenerateHmac(System.Byte[])">
            <summary>
            Create a hmac from the given data
            </summary>
            <param name="data">Data to create hmac from</param>
            <returns>Hmac bytes</returns>
        </member>
        <member name="P:Nancy.Cryptography.DefaultHmacProvider.HmacLength">
            <summary>
            Gets the length of the HMAC signature
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.HmacComparer.Compare(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Compare two hmac byte arrays without any early exits
            </summary>
            <param name="hmac1">First hmac</param>
            <param name="hmac2">Second hmac</param>
            <param name="hashLength">Expected length of the hash</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="T:Nancy.Cryptography.IKeyGenerator">
            <summary>
            Provides key byte generation
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.IKeyGenerator.GetBytes(System.Int32)">
            <summary>
            Generate a sequence of bytes
            </summary>
            <param name="count">Number of bytes to return</param>
            <returns>Array <see cref="!:count"/> bytes</returns>
        </member>
        <member name="T:Nancy.Cryptography.NoEncryptionProvider">
            <summary>
            A "no op" encryption provider
            Useful for debugging or performance.
            </summary>
        </member>
        <member name="T:Nancy.Cryptography.IEncryptionProvider">
            <summary>
            Provides symmetrical encryption support
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.IEncryptionProvider.Encrypt(System.String)">
            <summary>
            Encrypt and base64 encode the string
            </summary>
            <param name="data">Data to encrypt</param>
            <returns>Encrypted string</returns>
        </member>
        <member name="M:Nancy.Cryptography.IEncryptionProvider.Decrypt(System.String)">
            <summary>
            Decrypt string
            </summary>
            <param name="data">Data to decrypt</param>
            <returns>Decrypted string</returns>
        </member>
        <member name="M:Nancy.Cryptography.NoEncryptionProvider.Encrypt(System.String)">
            <summary>
            Encrypt data
            </summary>
            <param name="data">Data to encrypt</param>
            <returns>Encrypted string</returns>
        </member>
        <member name="M:Nancy.Cryptography.NoEncryptionProvider.Decrypt(System.String)">
            <summary>
            Decrypt string
            </summary>
            <param name="data">Data to decrypt</param>
            <returns>Decrypted string</returns>
        </member>
        <member name="T:Nancy.Cryptography.PassphraseKeyGenerator">
            <summary>
            Provides key generation using PBKDF2 / Rfc2898
            NOTE: the salt is static so the passphrase should be long and complex
            (As the bytes are generated at app startup, because it's too slow to do per
            request, so the salt cannot be randomly generated and stored)
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.PassphraseKeyGenerator.#ctor(System.String,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Cryptography.PassphraseKeyGenerator"/> class, with
            the provided <paramref name="passphrase"/>, <paramref name="salt"/> and optional
            number of <paramref name="iterations"/>
            </summary>
            <param name="passphrase">The passphrase that should be used.</param>
            <param name="salt">The salt</param>
            <param name="iterations">The number of iterations. The default value is 10000.</param>
        </member>
        <member name="M:Nancy.Cryptography.PassphraseKeyGenerator.GetBytes(System.Int32)">
            <summary>
            Generate a sequence of bytes
            </summary>
            <param name="count">Number of bytes to return</param>
            <returns>Array <see cref="!:count"/> bytes</returns>
        </member>
        <member name="T:Nancy.Cryptography.RandomKeyGenerator">
            <summary>
            Generates random secure keys using RNGCryptoServiceProvider
            </summary>
        </member>
        <member name="T:Nancy.DefaultNancyContextFactory">
            <summary>
            Creates NancyContext instances
            </summary>
        </member>
        <member name="T:Nancy.INancyContextFactory">
            <summary>
            Creates NancyContext instances
            </summary>
        </member>
        <member name="M:Nancy.INancyContextFactory.Create(Nancy.Request)">
            <summary>
            Create a new NancyContext
            </summary>
            <returns>NancyContext instance</returns>
        </member>
        <member name="M:Nancy.DefaultNancyContextFactory.#ctor(Nancy.Culture.ICultureService,Nancy.Diagnostics.IRequestTraceFactory,Nancy.Localization.ITextResource)">
            <summary>
            Creates a new instance of the <see cref="T:Nancy.DefaultNancyContextFactory"/> class.
            </summary>
            <param name="cultureService">An <see cref="T:Nancy.Culture.ICultureService"/> instance.</param>
            <param name="requestTraceFactory">An <see cref="T:Nancy.Diagnostics.IRequestTraceFactory"/> instance.</param>
            <param name="textResource">An <see cref="T:Nancy.Localization.ITextResource"/> instance.</param>
        </member>
        <member name="M:Nancy.DefaultNancyContextFactory.Create(Nancy.Request)">
            <summary>
            Create a new <see cref="T:Nancy.NancyContext"/> instance.
            </summary>
            <returns>A <see cref="T:Nancy.NancyContext"/> instance.</returns>
        </member>
        <member name="T:Nancy.Diagnostics.DefaultRequestTrace">
            <summary>
            The default implementation of the <see cref="T:Nancy.Diagnostics.IRequestTrace"/> interface.
            </summary>
        </member>
        <member name="P:Nancy.Diagnostics.DefaultRequestTrace.Items">
            <summary>
            Gets the generic item store.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the items.</value>
        </member>
        <member name="P:Nancy.Diagnostics.DefaultRequestTrace.RequestData">
            <summary>
            Gets or sets the information about the request.
            </summary>
            <value>An <see cref="P:Nancy.Diagnostics.DefaultRequestTrace.RequestData"/> instance.</value>
        </member>
        <member name="P:Nancy.Diagnostics.DefaultRequestTrace.ResponseData">
            <summary>
            Gets or sets the information about the response.
            </summary>
            <value>An <see cref="P:Nancy.Diagnostics.DefaultRequestTrace.ResponseData"/> instance.</value>
        </member>
        <member name="P:Nancy.Diagnostics.DefaultRequestTrace.TraceLog">
            <summary>
            Gets or sets the trace log.
            </summary>
            <value>A <see cref="T:Nancy.Diagnostics.ITraceLog"/> instance.</value>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.DynamicDictionaryValue"/> class.
            </summary>
            <param name="value">The value to store in the instance</param>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.Default``1(``0)">
            <summary>
            Returns a default value if Value is null
            </summary>
            <typeparam name="T">When no default value is supplied, required to supply the default type</typeparam>
            <param name="defaultValue">Optional parameter for default value, if not given it returns default of type T</param>
            <returns>If value is not null, value is returned, else default value is returned</returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.TryParse``1(``0)">
            <summary>
            Attempts to convert the value to type of T, failing to do so will return the defaultValue.
            </summary>
            <typeparam name="T">When no default value is supplied, required to supply the default type</typeparam>
            <param name="defaultValue">Optional parameter for default value, if not given it returns default of type T</param>
            <returns>If value is not null, value is returned, else default value is returned</returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.Equals(Nancy.DynamicDictionaryValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns><c>true</c> if the current object is equal to the <paramref name="compareValue"/> parameter; otherwise, <c>false</c>.
            </returns>
            <param name="compareValue">An <see cref="T:Nancy.DynamicDictionaryValue"/> to compare with this instance.</param>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Nancy.DynamicDictionaryValue"/>; otherwise, <c>false</c>.</returns>
            <param name="compareValue">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Nancy.DynamicDictionaryValue"/>.</param>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current instance.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
            <summary>
            Provides implementation for binary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as addition and multiplication.
            </summary>
            <returns><c>true</c> if the operation is successful; otherwise, <c>false</c>. If this method returns <c>false</c>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
            <param name="binder">Provides information about the binary operation. The binder.Operation property returns an <see cref="T:System.Linq.Expressions.ExpressionType"/> object. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, binder.Operation returns ExpressionType.Add.</param><param name="arg">The right operand for the binary operation. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, <paramref name="arg"/> is equal to second.</param><param name="result">The result of the binary operation.</param>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
            <returns><c>true</c> if the operation is successful; otherwise, <c>false</c>. If this method returns <c>false</c>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
            <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Type returns the <see cref="T:System.String"/> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param><param name="result">The result of the type conversion operation.</param>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for this instance.
            </summary>
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"/> of the class or value type that implements this interface.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.String"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.DynamicDictionaryValue.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"/> of the specified <see cref="T:System.Type"/> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is equivalent to the value of this instance.
            </returns>
            <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted. </param><param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="P:Nancy.DynamicDictionaryValue.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
            <remarks><see langword="null"/> is considered as not being a value.</remarks>
        </member>
        <member name="P:Nancy.DynamicDictionaryValue.Value">
            <summary>
            Gets the inner value
            </summary>
        </member>
        <member name="T:Nancy.ErrorHandling.DefaultStatusCodeHandler">
            <summary>
            Default error handler
            </summary>
        </member>
        <member name="T:Nancy.ErrorHandling.IStatusCodeHandler">
            <summary>
            Provides informative responses for particular HTTP status codes
            </summary>
        </member>
        <member name="M:Nancy.ErrorHandling.IStatusCodeHandler.HandlesStatusCode(Nancy.HttpStatusCode,Nancy.NancyContext)">
            <summary>
            Check if the error handler can handle errors of the provided status code.
            </summary>
            <param name="statusCode">Status code</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance of the current request.</param>
            <returns>True if handled, false otherwise</returns>
        </member>
        <member name="M:Nancy.ErrorHandling.IStatusCodeHandler.Handle(Nancy.HttpStatusCode,Nancy.NancyContext)">
            <summary>
            Handle the error code
            </summary>
            <param name="statusCode">Status code</param>
            <param name="context">Current context</param>
        </member>
        <member name="M:Nancy.ErrorHandling.DefaultStatusCodeHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ErrorHandling.DefaultStatusCodeHandler"/> type.
            </summary>
        </member>
        <member name="M:Nancy.ErrorHandling.DefaultStatusCodeHandler.HandlesStatusCode(Nancy.HttpStatusCode,Nancy.NancyContext)">
            <summary>
            Whether then
            </summary>
            <param name="statusCode">Status code</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance of the current request.</param>
            <returns>True if handled, false otherwise</returns>
        </member>
        <member name="M:Nancy.ErrorHandling.DefaultStatusCodeHandler.Handle(Nancy.HttpStatusCode,Nancy.NancyContext)">
            <summary>
            Handle the error code
            </summary>
            <param name="statusCode">Status code</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance of the current request.</param>
            <returns>Nancy Response</returns>
        </member>
        <member name="T:Nancy.ErrorPipeline">
            <summary>
            <para>
            A simple pipeline for on-error hooks.
            Hooks will be executed until either a hook returns a response, or every
            hook has been executed.
            </para>
            <para>
            Can be implictly cast to/from the on-error hook delegate signature
            (Func NancyContext, Exception, Response) for assigning to NancyEngine or for building
            composite pipelines.
            </para>
            </summary>
        </member>
        <member name="F:Nancy.NamedPipelineBase`1.pipelineItems">
            <summary>
            Pipeline items to execute
            </summary>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.AddItemToStartOfPipeline(`0)">
            <summary>
            Add an item to the start of the pipeline
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.AddItemToStartOfPipeline(Nancy.PipelineItem{`0},System.Boolean)">
            <summary>
            Add an item to the start of the pipeline
            </summary>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.AddItemToEndOfPipeline(`0)">
            <summary>
            Add an item to the end of the pipeline
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.AddItemToEndOfPipeline(Nancy.PipelineItem{`0},System.Boolean)">
            <summary>
            Add an item to the end of the pipeline
            </summary>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.InsertItemAtPipelineIndex(System.Int32,`0)">
            <summary>
            Add an item to a specific place in the pipeline.
            </summary>
            <param name="index">Index to add at</param>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.InsertItemAtPipelineIndex(System.Int32,Nancy.PipelineItem{`0},System.Boolean)">
            <summary>
            Add an item to a specific place in the pipeline.
            </summary>
            <param name="index">Index to add at</param>
            <param name="item">Item to add</param>
            <param name="replaceInPlace">
            Whether to replace an existing item with the same name in its current place,
            rather than at the position requested. Defaults to false.
            </param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.InsertBefore(System.String,`0)">
            <summary>
            Insert an item before a named item.
            If the named item does not exist the item is inserted at the start of the pipeline.
            </summary>
            <param name="name">Name of the item to insert before</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.InsertBefore(System.String,Nancy.PipelineItem{`0})">
            <summary>
            Insert an item before a named item.
            If the named item does not exist the item is inserted at the start of the pipeline.
            </summary>
            <param name="name">Name of the item to insert before</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.InsertAfter(System.String,`0)">
            <summary>
            Insert an item after a named item.
            If the named item does not exist the item is inserted at the end of the pipeline.
            </summary>
            <param name="name">Name of the item to insert after</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.InsertAfter(System.String,Nancy.PipelineItem{`0})">
            <summary>
            Insert an item after a named item.
            If the named item does not exist the item is inserted at the end of the pipeline.
            </summary>
            <param name="name">Name of the item to insert after</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Nancy.NamedPipelineBase`1.RemoveByName(System.String)">
            <summary>
            Remove a named pipeline item
            </summary>
            <param name="name">Name</param>
            <returns>Index of item that was removed or -1 if nothing removed</returns>
        </member>
        <member name="P:Nancy.NamedPipelineBase`1.PipelineItems">
            <summary>
            Gets the current pipeline items
            </summary>
        </member>
        <member name="P:Nancy.NamedPipelineBase`1.PipelineDelegates">
            <summary>
            Gets the current pipeline item delegates
            </summary>
        </member>
        <member name="M:Nancy.ErrorPipeline.Invoke(Nancy.NancyContext,System.Exception)">
            <summary>
            Invoke the pipeline. Each item will be invoked in turn until either an
            item returns a Response, or all items have been invoked.
            </summary>
            <param name="context">
            The current context to pass to the items.
            </param>
            <param name="ex">
            The exception currently being handled by the error pipeline
            </param>
            <returns>
            Response from an item invocation, or null if no response was generated.
            </returns>
        </member>
        <member name="T:Nancy.Extensions.AssemblyExtensions">
            <summary>
            Assembly extension methods
            </summary>
        </member>
        <member name="M:Nancy.Extensions.AssemblyExtensions.SafeGetExportedTypes(System.Reflection.Assembly)">
            <summary>
            Gets exported types from an assembly and catches common errors
            that occur when running under test runners.
            </summary>
            <param name="assembly">Assembly to retrieve from</param>
            <returns>An array of types</returns>
        </member>
        <member name="T:Nancy.Bootstrapper.INancyBootstrapper">
            <summary>
            Bootstrapper for the Nancy Engine
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.INancyBootstrapper.Initialise">
            <summary>
            Initialise the bootstrapper. Must be called prior to GetEngine.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.INancyBootstrapper.GetEngine">
            <summary>
            Gets the configured INancyEngine
            </summary>
            <returns>Configured INancyEngine</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.ModuleRegistration.#ctor(System.Type)">
            <summary>
            Represents a module type for registration into a container
            </summary>
            <param name="moduleType">Type of the module</param>
        </member>
        <member name="T:Nancy.Bootstrapper.NancyBootstrapperBase`1">
            <summary>
            Nancy bootstrapper base class
            </summary>
            <typeparam name="TContainer">IoC container type</typeparam>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperBase`1.initialised">
            <summary>
            Stores whether the bootstrapper has been initialised
            prior to calling GetEngine.
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperBase`1.disposing">
            <summary>
            Stores whether the bootstrapper is in the process of
            being disposed.
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperBase`1.rootPathProvider">
            <summary>
            Stores the <see cref="T:Nancy.IRootPathProvider"/> used by Nancy
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperBase`1.conventions">
            <summary>
            Default Nancy conventions
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperBase`1.internalConfiguration">
            <summary>
            Internal configuration
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperBase`1.modules">
            <summary>
            Nancy modules - built on startup from the app domain scanner
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Bootstrapper.NancyBootstrapperBase`1"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.Initialise">
            <summary>
            Initialise the bootstrapper. Must be called prior to GetEngine.
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetDiagnostics">
            <summary>
            Gets the diagnostics for initialisation
            </summary>
            <returns>IDiagnostics implementation</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetApplicationStartupTasks">
            <summary>
            Gets all registered application startup tasks
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IApplicationStartup"/> instances.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterAndGetRequestStartupTasks(`0,System.Type[])">
            <summary>
            Registers and resolves all request startup tasks
            </summary>
            <param name="container">Container to use</param>
            <param name="requestStartupTypes">Types to register</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IRequestStartup"/> instances.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetRegistrationTasks">
            <summary>
            Gets all registered application registration tasks
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IRegistrations"/> instances.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetAllModules(Nancy.NancyContext)">
            <summary>
            Get all NancyModule implementation instances
            </summary>
            <param name="context">The current context</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.INancyModule"/> instances.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetModule(System.Type,Nancy.NancyContext)">
            <summary>
            Retrieves a specific <see cref="T:Nancy.INancyModule"/> implementation - should be per-request lifetime
            </summary>
            <param name="moduleType">Module type</param>
            <param name="context">The current context</param>
            <returns>The <see cref="T:Nancy.INancyModule"/> instance</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetEngine">
            <summary>
            Gets the configured INancyEngine
            </summary>
            <returns>Configured INancyEngine</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.Equals(System.Object)">
            <summary>
            Hides Equals from the overrides list
            </summary>
            <param name="obj">Object to compare</param>
            <returns>Boolean indicating equality</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetHashCode">
            <summary>
            Hides GetHashCode from the overrides list
            </summary>
            <returns>Hash code integer</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.InitializeRequestPipelines(Nancy.NancyContext)">
            <summary>
            Creates and initializes the request pipelines.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> used by the request.</param>
            <returns>An <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.ToString">
            <summary>
            Hides ToString from the overrides list
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.ApplicationStartup(`0,Nancy.Bootstrapper.IPipelines)">
            <summary>
            Initialise the bootstrapper - can be used for adding pre/post hooks and
            any other initialisation tasks that aren't specifically container setup
            related
            </summary>
            <param name="container">Container instance for resolving types if required.</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RequestStartup(`0,Nancy.Bootstrapper.IPipelines,Nancy.NancyContext)">
            <summary>
            Initialise the request - can be used for adding pre/post hooks and
            any other per-request initialisation tasks that aren't specifically container setup
            related
            </summary>
            <param name="container">Container</param>
            <param name="pipelines">Current pipelines</param>
            <param name="context">Current context</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.ConfigureApplicationContainer(`0)">
            <summary>
            Configure the application level container with any additional registrations.
            </summary>
            <param name="existingContainer">Container instance</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.ConfigureConventions(Nancy.Conventions.NancyConventions)">
            <summary>
            Overrides/configures Nancy's conventions
            </summary>
            <param name="nancyConventions">Convention object instance</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetEngineInternal">
            <summary>
            Resolve INancyEngine
            </summary>
            <returns>INancyEngine implementation</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetApplicationContainer">
            <summary>
            Gets the application level container
            </summary>
            <returns>Container instance</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterBootstrapperTypes(`0)">
            <summary>
            Register the bootstrapper's implemented types into the container.
            This is necessary so a user can pass in a populated container but not have
            to take the responsibility of registering things like INancyModuleCatalog manually.
            </summary>
            <param name="applicationContainer">Application container to register into</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterTypes(`0,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.TypeRegistration})">
            <summary>
            Register the default implementations of internally used types into the container as singletons
            </summary>
            <param name="container">Container to register into</param>
            <param name="typeRegistrations">Type registrations to register</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterCollectionTypes(`0,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.CollectionTypeRegistration})">
            <summary>
            Register the various collections into the container as singletons to later be resolved
            by IEnumerable{Type} constructor dependencies.
            </summary>
            <param name="container">Container to register into</param>
            <param name="collectionTypeRegistrationsn">Collection type registrations to register</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterModules(`0,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.ModuleRegistration})">
            <summary>
            Register the given module types into the container
            </summary>
            <param name="container">Container to register into</param>
            <param name="moduleRegistrationTypes">NancyModule types</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterInstances(`0,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.InstanceRegistration})">
            <summary>
            Register the given instances into the container
            </summary>
            <param name="container">Container to register into</param>
            <param name="instanceRegistrations">Instance registration types</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetAdditionalTypes">
            <summary>
            Gets additional required type registrations
            that don't form part of the core Nancy configuration
            </summary>
            <returns>Collection of TypeRegistration types</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetAdditionalInstances">
            <summary>
            Gets any additional instance registrations that need to
            be registered into the container
            </summary>
            <returns>Collection of InstanceRegistration types</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.GetApplicationCollections">
            <summary>
            Creates a list of types for the collection types that are
            required to be registered in the application scope.
            </summary>
            <returns>Collection of CollectionTypeRegistration types</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegisterRegistrationTasks(System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.IRegistrations})">
            <summary>
            Takes the registration tasks and calls the relevant methods to register them
            </summary>
            <param name="registrationTasks">Registration tasks</param>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.ApplicationPipelines">
            <summary>
            Application pipelines.
            Pipelines are "cloned" per request so they can be modified
            at the request level.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.RequestStartupTaskTypeCache">
            <summary>
            Cache of request startup task types
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.ApplicationContainer">
            <summary>
            Gets the Container instance - automatically set during initialise.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.InternalConfiguration">
            <summary>
            Nancy internal configuration
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.Conventions">
            <summary>
            Nancy conventions
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.Modules">
            <summary>
            Gets all available module types
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.ViewEngines">
            <summary>
            Gets the available view engine types
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.ModelBinders">
            <summary>
            Gets the available custom model binders
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.TypeConverters">
            <summary>
            Gets the available custom type converters
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.BodyDeserializers">
            <summary>
            Gets the available custom body deserializers
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.ApplicationStartupTasks">
            <summary>
            Gets all application startup tasks
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.RequestStartupTasks">
            <summary>
            Gets all request startup tasks
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.RegistrationTasks">
            <summary>
            Gets all registration tasks
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.RootPathProvider">
            <summary>
            Gets the root path provider
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.ModelValidatorFactories">
            <summary>
            Gets the validator factories.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.FavIcon">
            <summary>
            Gets the default favicon
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.CryptographyConfiguration">
            <summary>
            Gets the cryptography configuration
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperBase`1.DiagnosticsConfiguration">
            <summary>
            Gets the diagnostics / dashboard configuration (password etc)
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.NancyBootstrapperLocator">
            <summary>
            Class for locating an INancyBootstrapper implementation.
            
            Will search the app domain for a non-abstract one, and if it can't find one
            it will use the default nancy one that uses TinyIoC.
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperLocator.Bootstrapper">
            <summary>
            Gets the located bootstrapper
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.TypeRegistration">
            <summary>
            Represents a type to be registered into the container
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.TypeRegistration.#ctor(System.Type,System.Type,Nancy.Bootstrapper.Lifetime)">
            <summary>
            Represents a type to be registered into the container
            </summary>
            <param name="registrationType">Registration type i.e. IMyInterface</param>
            <param name="implementationType">Implementation type i.e. MyClassThatImplementsIMyInterface</param>
            <param name="lifetime">Lifetime to register the type as</param>
        </member>
        <member name="P:Nancy.Bootstrapper.TypeRegistration.ImplementationType">
            <summary>
            Implementation type i.e. MyClassThatImplementsIMyInterface
            </summary>
        </member>
        <member name="T:Nancy.Cookies.NancyCookie">
            <summary>
            Default cookie implementation for Nancy.
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.Domain">
            <summary>
            The domain to restrict the cookie to
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.Expires">
            <summary>
            When the cookie should expire
            </summary>
            <value>A <see cref="T:System.DateTime"/> instance containing the date and time when the cookie should expire; otherwise <see langword="null"/> if it should expire at the end of the session.</value>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.Name">
            <summary>
            The name of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.EncodedName">
            <summary>
            Gets the encoded name of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.Path">
            <summary>
            The path to restrict the cookie to
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.Value">
            <summary>
            The value of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.EncodedValue">
            <summary>
            Gets the encoded value of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.HttpOnly">
            <summary>
            Whether the cookie is http only
            </summary>
        </member>
        <member name="P:Nancy.Cookies.INancyCookie.Secure">
            <summary>
            Whether the cookie is secure (i.e. HTTPS only)
            </summary>
        </member>
        <member name="M:Nancy.Cookies.NancyCookie.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Cookies.NancyCookie"/> class.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
        </member>
        <member name="M:Nancy.Cookies.NancyCookie.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Cookies.NancyCookie"/> class.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="expires">The expiration date of the cookie. Can be <see langword="null"/> if it should expire at the end of the session.</param>
        </member>
        <member name="M:Nancy.Cookies.NancyCookie.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Cookies.NancyCookie"/> class.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="httpOnly">Whether the cookie is http only.</param>
        </member>
        <member name="M:Nancy.Cookies.NancyCookie.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Cookies.NancyCookie"/> class.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="httpOnly">Whether the cookie is http only.</param>
            <param name="secure">Whether the cookie is secure (i.e. HTTPS only).</param>
        </member>
        <member name="M:Nancy.Cookies.NancyCookie.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Cookies.NancyCookie"/> class.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="httpOnly">Whether the cookie is http only.</param>
            <param name="secure">Whether the cookie is secure (i.e. HTTPS only).</param>
            <param name="expires">The expiration date of the cookie. Can be <see langword="null"/> if it should expire at the end of the session.</param>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.Domain">
            <summary>
            The domain to restrict the cookie to
            </summary>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.Expires">
            <summary>
            When the cookie should expire
            </summary>
            <value>A <see cref="T:System.DateTime"/> instance containing the date and time when the cookie should expire; otherwise <see langword="null"/> if it should expire at the end of the session.</value>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.Name">
            <summary>
            The name of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.EncodedName">
            <summary>
            Gets the encoded name of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.Path">
            <summary>
            The path to restrict the cookie to
            </summary>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.Value">
            <summary>
            The value of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.EncodedValue">
            <summary>
            Gets the encoded value of the cookie
            </summary>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.HttpOnly">
            <summary>
            Whether the cookie is http only
            </summary>
        </member>
        <member name="P:Nancy.Cookies.NancyCookie.Secure">
            <summary>
            Whether the cookie is secure (i.e. HTTPS only)
            </summary>
        </member>
        <member name="T:Nancy.DefaultNancyBootstrapper">
            <summary>
            TinyIoC bootstrapper - registers default route resolver and registers itself as
            INancyModuleCatalog for resolving modules but behaviour can be overridden if required.
            </summary>
        </member>
        <member name="T:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1">
            <summary>
            Nancy bootstrapper base with per-request container support.
            Stores/retrieves the child container in the context to ensure that
            only one child container is stored per request, and that the child
            container will be disposed at the end of the request.
            </summary>
            <typeparam name="TContainer">IoC container type</typeparam>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.contextKey">
            <summary>
            Context key for storing the child container in the context
            </summary>
        </member>
        <member name="F:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.moduleRegistrationTypeCache">
            <summary>
            Stores the module registrations to be registered into the request container
            </summary>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.GetAllModules(Nancy.NancyContext)">
            <summary>
            Get all <see cref="T:Nancy.INancyModule"/> implementation instances
            </summary>
            <param name="context">The current context</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.INancyModule"/> instances.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.GetModule(System.Type,Nancy.NancyContext)">
            <summary>
            Retrieves a specific <see cref="T:Nancy.INancyModule"/> implementation - should be per-request lifetime
            </summary>
            <param name="moduleType">Module type</param>
            <param name="context">The current context</param>
            <returns>The <see cref="T:Nancy.INancyModule"/> instance</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.InitializeRequestPipelines(Nancy.NancyContext)">
            <summary>
            Creates and initializes the request pipelines.
            </summary>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> used by the request.</param>
            <returns>An <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance.</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.RegisterRegistrationTasks(System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.IRegistrations})">
            <summary>
            Takes the registration tasks and calls the relevant methods to register them
            </summary>
            <param name="registrationTasks">Registration tasks</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.GetConfiguredRequestContainer(Nancy.NancyContext)">
            <summary>
            Gets the per-request container
            </summary>
            <param name="context">Current context</param>
            <returns>Request container instance</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.ConfigureRequestContainer(`0,Nancy.NancyContext)">
            <summary>
            Configure the request container
            </summary>
            <param name="container">Request container instance</param>
            <param name="context"></param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.RegisterModules(`0,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.ModuleRegistration})">
            <summary>
            Register the given module types into the container
            </summary>
            <param name="container">Container to register into</param>
            <param name="moduleRegistrationTypes">NancyModule types</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.CreateRequestContainer(Nancy.NancyContext)">
            <summary>
            Creates a per request child/nested container
            </summary>
            <param name="context">Current context</param>
            <returns>Request container instance</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.RegisterRequestContainerModules(`0,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.ModuleRegistration})">
            <summary>
            Register the given module types into the request container
            </summary>
            <param name="container">Container to register into</param>
            <param name="moduleRegistrationTypes">NancyModule types</param>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.GetAllModules(`0)">
            <summary>
            Retrieve all module instances from the container
            </summary>
            <param name="container">Container to use</param>
            <returns>Collection of NancyModule instances</returns>
        </member>
        <member name="M:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.GetModule(`0,System.Type)">
            <summary>
            Retrieve a specific module instance from the container
            </summary>
            <param name="container">Container to use</param>
            <param name="moduleType">Type of the module</param>
            <returns>NancyModule instance</returns>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.RequestScopedTypes">
            <summary>
            Stores the per-request type registrations
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.RequestScopedCollectionTypes">
            <summary>
            Stores the per-request collection registrations
            </summary>
        </member>
        <member name="P:Nancy.Bootstrapper.NancyBootstrapperWithRequestContainerBase`1.ContextKey">
            <summary>
            Gets the context key for storing the child container in the context
            </summary>
        </member>
        <member name="F:Nancy.DefaultNancyBootstrapper.DefaultAutoRegisterIgnoredAssemblies">
            <summary>
            Default assemblies that are ignored for autoregister
            </summary>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.ConfigureApplicationContainer(Nancy.TinyIoc.TinyIoCContainer)">
            <summary>
            Configures the container using AutoRegister followed by registration
            of default INancyModuleCatalog and IRouteResolver.
            </summary>
            <param name="container">Container instance</param>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetEngineInternal">
            <summary>
            Resolve INancyEngine
            </summary>
            <returns>INancyEngine implementation</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetApplicationContainer">
            <summary>
            Create a default, unconfigured, container
            </summary>
            <returns>Container instance</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.RegisterBootstrapperTypes(Nancy.TinyIoc.TinyIoCContainer)">
            <summary>
            Register the bootstrapper's implemented types into the container.
            This is necessary so a user can pass in a populated container but not have
            to take the responsibility of registering things like INancyModuleCatalog manually.
            </summary>
            <param name="applicationContainer">Application container to register into</param>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.RegisterTypes(Nancy.TinyIoc.TinyIoCContainer,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.TypeRegistration})">
            <summary>
            Register the default implementations of internally used types into the container as singletons
            </summary>
            <param name="container">Container to register into</param>
            <param name="typeRegistrations">Type registrations to register</param>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.RegisterCollectionTypes(Nancy.TinyIoc.TinyIoCContainer,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.CollectionTypeRegistration})">
            <summary>
            Register the various collections into the container as singletons to later be resolved
            by IEnumerable{Type} constructor dependencies.
            </summary>
            <param name="container">Container to register into</param>
            <param name="collectionTypeRegistrations">Collection type registrations to register</param>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.RegisterRequestContainerModules(Nancy.TinyIoc.TinyIoCContainer,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.ModuleRegistration})">
            <summary>
            Register the given module types into the container
            </summary>
            <param name="container">Container to register into</param>
            <param name="moduleRegistrationTypes">NancyModule types</param>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.RegisterInstances(Nancy.TinyIoc.TinyIoCContainer,System.Collections.Generic.IEnumerable{Nancy.Bootstrapper.InstanceRegistration})">
            <summary>
            Register the given instances into the container
            </summary>
            <param name="container">Container to register into</param>
            <param name="instanceRegistrations">Instance registration types</param>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.CreateRequestContainer(Nancy.NancyContext)">
            <summary>
            Creates a per request child/nested container
            </summary>
            <param name="context">Current context</param>
            <returns>Request container instance</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetDiagnostics">
            <summary>
            Gets the diagnostics for initialisation
            </summary>
            <returns>IDiagnostics implementation</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetApplicationStartupTasks">
            <summary>
            Gets all registered startup tasks
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IApplicationStartup"/> instances. </returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.RegisterAndGetRequestStartupTasks(Nancy.TinyIoc.TinyIoCContainer,System.Type[])">
            <summary>
            Gets all registered request startup tasks
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IRequestStartup"/> instances.</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetRegistrationTasks">
            <summary>
            Gets all registered application registration tasks
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:Nancy.Bootstrapper.IRegistrations"/> instances.</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetAllModules(Nancy.TinyIoc.TinyIoCContainer)">
            <summary>
            Retrieve all module instances from the container
            </summary>
            <param name="container">Container to use</param>
            <returns>Collection of NancyModule instances</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.GetModule(Nancy.TinyIoc.TinyIoCContainer,System.Type)">
            <summary>
            Retrieve a specific module instance from the container
            </summary>
            <param name="container">Container to use</param>
            <param name="moduleType">Type of the module</param>
            <returns>NancyModule instance</returns>
        </member>
        <member name="M:Nancy.DefaultNancyBootstrapper.AutoRegister(Nancy.TinyIoc.TinyIoCContainer,System.Collections.Generic.IEnumerable{System.Func{System.Reflection.Assembly,System.Boolean}})">
            <summary>
            Executes auto registation with the given container.
            </summary>
            <param name="container">Container instance</param>
        </member>
        <member name="P:Nancy.DefaultNancyBootstrapper.AutoRegisterIgnoredAssemblies">
            <summary>
            Gets the assemblies to ignore when autoregistering the application container
            Return true from the delegate to ignore that particular assembly, returning true
            does not mean the assembly *will* be included, a false from another delegate will
            take precedence.
            </summary>
        </member>
        <member name="T:Nancy.Extensions.ContextExtensions">
            <summary>
            Containing extensions for the <see cref="T:Nancy.NancyContext"/> object
            </summary>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.IsAjaxRequest(Nancy.NancyContext)">
            <summary>
            Ascertains if a request originated from an Ajax request or not.
            </summary>
            <param name="context">The current nancy context</param>
            <returns>True if the request was done using ajax, false otherwise</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.ToFullPath(Nancy.NancyContext,System.String)">
            <summary>
            Expands a path to take into account a base path (if any)
            </summary>
            <param name="context">Nancy context</param>
            <param name="path">Path to expand</param>
            <returns>Expanded path</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.GetRedirect(Nancy.NancyContext,System.String)">
            <summary>
            Returns a redirect response with the redirect path expanded to take into
            account a base path (if any)
            </summary>
            <param name="context">Nancy context</param>
            <param name="path">Path to redirect to</param>
            <returns>Redirect response</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.GetExceptionDetails(Nancy.NancyContext)">
            <summary>
            Retrieves exception details from the context, if any exist
            </summary>
            <param name="context">Nancy context</param>
            <returns>Exception details</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.GetException(Nancy.NancyContext)">
            <summary>
            Get a thrown exception from the context.
            </summary>
            <param name="context">The context.</param>
            <returns>The thrown exception or <c>null</c> if not exception has been thrown.</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.GetException``1(Nancy.NancyContext)">
            <summary>
            Get a thrown exception of the given type from the context.
            </summary>
            <typeparam name="T">The type of exception to get.</typeparam>
            <param name="context">The context.</param>
            <returns>The thrown exception or <c>null</c> if not exception has been thrown.</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.TryGetException(Nancy.NancyContext,System.Exception@)">
            <summary>
            Tries to get a thrown exception from the context.
            </summary>
            <param name="context">The context.</param>
            <param name="exception">The thrown exception.</param>
            <returns><c>true</c> if an exception has been thrown during the request, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.TryGetException``1(Nancy.NancyContext,``0@)">
            <summary>
            Tries to get a thrown exception of the given type from the context.
            </summary>
            <typeparam name="T">The type of exception to get.</typeparam>
            <param name="context">The context.</param>
            <param name="exception">The thrown exception.</param>
            <returns><c>true</c> if an exception of the given type has been thrown during the request, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.WriteTraceLog(Nancy.NancyContext,System.Action{System.Text.StringBuilder})">
            <summary>
            Shortcut extension method for writing trace information
            </summary>
            <param name="context">Nancy context</param>
            <param name="logDelegate">Log delegate</param>
        </member>
        <member name="M:Nancy.Extensions.ContextExtensions.IsLocalUrl(Nancy.NancyContext,System.String)">
            <summary>
            Returns a boolean indicating whether a given url string is local or not
            </summary>
            <param name="context">Nancy context</param>
            <param name="url">Url string (relative or absolute)</param>
            <returns>True if local, false otherwise</returns>
        </member>
        <member name="T:Nancy.Extensions.ModuleExtensions">
            <summary>
            Containing extensions for <see cref="T:Nancy.INancyModule"/> implementations.
            </summary>
        </member>
        <member name="F:Nancy.Extensions.ModuleExtensions.ModuleNameExpression">
            <summary>
            A regular expression used to manipulate parameterized route segments.
            </summary>
            <value>A <see cref="T:System.Text.RegularExpressions.Regex"/> object.</value>
        </member>
        <member name="M:Nancy.Extensions.ModuleExtensions.GetModuleName(Nancy.INancyModule)">
            <summary>
            Extracts the friendly name of a Nancy module given its type.
            </summary>
            <param name="module">The module instance</param>
            <returns>A string containing the name of the parameter.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Nancy.Extensions.ModuleExtensions.RouteExecuting(Nancy.INancyModule)">
            <summary>
            Returns a boolean indicating whether the route is executing, or whether the module is
            being constructed.
            </summary>
            <param name="module">The module instance</param>
            <returns>True if the route is being executed, false if the module is being constructed</returns>
        </member>
        <member name="M:Nancy.Extensions.ModuleExtensions.AddBeforeHookOrExecute(Nancy.INancyModule,System.Func{Nancy.NancyContext,Nancy.Response},System.String)">
            <summary>
            Adds the before delegate to the Before pipeline if the module is not currently executing,
            or executes the delegate directly and returns any response returned if it is.
            Uses <see cref="T:Nancy.ErrorHandling.RouteExecutionEarlyExitException"/>
            </summary>
            <param name="module">Current module</param>
            <param name="beforeDelegate">Delegate to add or execute</param>
            <param name="earlyExitReason">Optional reason for the early exit (if necessary)</param>
        </member>
        <member name="T:Nancy.Extensions.RequestExtensions">
            <summary>
            Containing extensions for the <see cref="T:Nancy.Request"/> object
            </summary>
        </member>
        <member name="M:Nancy.Extensions.RequestExtensions.IsAjaxRequest(Nancy.Request)">
            <summary>
            An extension method making it easy to check if the request was done using ajax
            </summary>
            <param name="request">The request made by client</param>
            <returns><see langword="true" /> if the request was done using ajax, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Nancy.Extensions.RequestExtensions.IsLocal(Nancy.Request)">
            <summary>
            Gets a value indicating whether the request is local.
            </summary>
            <param name="request">The request made by client</param>
            <returns><see langword="true" /> if the request is local, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Nancy.Extensions.StringExtensions">
            <summary>
            Containing extensions for the <see cref="T:System.String"/> object.
            </summary>
        </member>
        <member name="F:Nancy.Extensions.StringExtensions.ParameterExpression">
            <summary>
            A regular expression used to manipulate parameterized route segments.
            </summary>
            <value>A <see cref="T:System.Text.RegularExpressions.Regex"/> object.</value>
        </member>
        <member name="M:Nancy.Extensions.StringExtensions.GetParameterDetails(System.String)">
            <summary>
            Extracts information about the parameters in the <paramref name="segment"/>.
            </summary>
            <param name="segment">The segment that the information should be extracted from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, containing <see cref="T:Nancy.Routing.ParameterSegmentInformation"/> instances for the parameters in the segment.</returns>
        </member>
        <member name="M:Nancy.Extensions.StringExtensions.IsParameterized(System.String)">
            <summary>
            Checks if a segment contains any parameters.
            </summary>
            <param name="segment">The segment to check for parameters.</param>
            <returns>true if the segment contains a parameter; otherwise false.</returns>
            <remarks>A parameter is defined as a string which is surrounded by a pair of curly brackets.</remarks>
            <exception cref="T:System.ArgumentException">The provided value for the segment parameter was null or empty.</exception>
        </member>
        <member name="M:Nancy.Extensions.StringExtensions.AsQueryDictionary(System.String)">
            <summary>
            Gets a dynamic dictionary back from a Uri query string
            </summary>
            <param name="queryString">The query string to extract values from</param>
            <returns>A dynamic dictionary containing the query string values</returns>
        </member>
        <member name="M:Nancy.Extensions.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the value from PascalCase to camelCase.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Nancy.Extensions.StringExtensions.ToPascalCase(System.String)">
            <summary>
            Converts the value from camelCase to PascalCase.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Nancy.RequestHeaders">
            <summary>
            Provides strongly-typed access to HTTP request headers.
            </summary>
        </member>
        <member name="M:Nancy.RequestHeaders.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.RequestHeaders"/> class.
            </summary>
            <param name="headers">The headers.</param>
        </member>
        <member name="M:Nancy.RequestHeaders.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Nancy.RequestHeaders.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Nancy.RequestHeaders.Accept">
            <summary>
            Content-types that are acceptable.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the header values if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.AcceptCharset">
            <summary>
            Character sets that are acceptable.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the header values if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.AcceptEncoding">
            <summary>
            Acceptable encodings.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the header values if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.AcceptLanguage">
            <summary>
            Acceptable languages for response.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the header values if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Authorization">
            <summary>
            Authorization header value for request.
            </summary>
            <value>A <see cref="T:System.String"/> containing the header value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.CacheControl">
            <summary>
            Used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the header values if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Cookie">
            <summary>
            Contains name/value pairs of information stored for that URL.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains <see cref="T:Nancy.Cookies.INancyCookie"/> instances if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Connection">
            <summary>
            What type of connection the user-agent would prefer.
            </summary>
            <value>A <see cref="T:System.String"/> containing the header value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.ContentLength">
            <summary>
            The length of the request body in octets (8-bit bytes).
            </summary>
            <value>The length of the contents if it is available; otherwise 0.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.ContentType">
            <summary>
            The mime type of the body of the request (used with POST and PUT requests).
            </summary>
            <value>A <see cref="T:System.String"/> containing the header value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Date">
            <summary>
            The date and time that the message was sent.
            </summary>
            <value>A <see cref="T:System.DateTime"/> instance that specifies when the message was sent. If not available then <see cref="F:System.DateTime.MinValue"/> will be returned.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Host">
            <summary>
            The domain name of the server (for virtual hosting), mandatory since HTTP/1.1
            </summary>
            <value>A <see cref="T:System.String"/> containing the header value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.IfMatch">
            <summary>
            Only perform the action if the client supplied entity matches the same entity on the server. This is mainly for methods like PUT to only update a resource if it has not been modified since the user last updated it.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the header values if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.IfModifiedSince">
            <summary>
            Allows a 304 Not Modified to be returned if content is unchanged
            </summary>
            <value>A <see cref="T:System.DateTime"/> instance that specifies when the requested resource must have been changed since. If not available then <see cref="F:System.DateTime.MinValue"/> will be returned.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.IfNoneMatch">
            <summary>
            Allows a 304 Not Modified to be returned if content is unchanged
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the header values if they are available; otherwise it will be empty.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.IfRange">
            <summary>
            If the entity is unchanged, send me the part(s) that I am missing; otherwise, send me the entire new entity.
            </summary>
            <value>A <see cref="T:System.String"/> containing the header value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.IfUnmodifiedSince">
            <summary>
            Only send the response if the entity has not been modified since a specific time.
            </summary>
            <value>A <see cref="T:System.DateTime"/> instance that specifies when the requested resource may not have been changed since. If not available then <see cref="F:System.DateTime.MinValue"/> will be returned.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Keys">
            <summary>
            Gets the names of the available request headers.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the names of the headers.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.MaxForwards">
            <summary>
            Limit the number of times the message can be forwarded through proxies or gateways.
            </summary>
            <value>The number of the maximum allowed number of forwards if it is available; otherwise 0.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Referrer">
            <summary>
            This is the address of the previous web page from which a link to the currently requested page was followed.
            </summary>
            <value>A <see cref="T:System.String"/> containing the header value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.UserAgent">
            <summary>
            The user agent string of the user agent
            </summary>
            <value>A <see cref="T:System.String"/> containing the header value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Values">
            <summary>
            Gets all the header values.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains all the header values.</value>
        </member>
        <member name="P:Nancy.RequestHeaders.Item(System.String)">
            <summary>
            Gets the values for the header identified by the <paramref name="name"/> parameter.
            </summary>
            <param name="name">The name of the header to return the values for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the values for the header. If the header is not defined then <see cref="M:System.Linq.Enumerable.Empty``1"/> is returned.</returns>
        </member>
        <member name="T:Nancy.Responses.HtmlResponse">
            <summary>
            Represents a HTML (text/html) response
            </summary>
        </member>
        <member name="M:Nancy.Responses.HtmlResponse.#ctor(Nancy.HttpStatusCode,System.Action{System.IO.Stream},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Nancy.Cookies.INancyCookie})">
            <summary>
            Creates a new instance of the HtmlResponse class
            </summary>
            <param name="statusCode">Status code - defaults to OK</param>
            <param name="contents">Response body delegate - defaults to empty if null</param>
            <param name="headers">Headers if required</param>
            <param name="cookies">Cookies if required</param>
        </member>
        <member name="T:Nancy.Security.Csrf">
            <summary>
            Csrf protection methods
            </summary>
        </member>
        <member name="M:Nancy.Security.Csrf.Enable(Nancy.Bootstrapper.IPipelines,Nancy.Cryptography.CryptographyConfiguration)">
            <summary>
            Enables Csrf token generation.
            This is disabled by default.
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="M:Nancy.Security.Csrf.Disable(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Disable csrf token generation
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="M:Nancy.Security.Csrf.CreateNewCsrfToken(Nancy.INancyModule,Nancy.Cryptography.CryptographyConfiguration)">
            <summary>
            Creates a new csrf token for this response with an optional salt.
            Only necessary if a particular route requires a new token for each request.
            </summary>
            <param name="module">Nancy module</param>
            <returns></returns>
        </member>
        <member name="M:Nancy.Security.Csrf.ValidateCsrfToken(Nancy.INancyModule,System.Nullable{System.TimeSpan})">
            <summary>
            Validate that the incoming request has valid CSRF tokens.
            Throws <see cref="T:Nancy.Security.CsrfValidationException"/> if validation fails.
            </summary>
            <param name="module">Module object</param>
            <param name="validityPeriod">Optional validity period before it times out</param>
            <exception cref="T:Nancy.Security.CsrfValidationException">If validation fails</exception>
        </member>
        <member name="T:Nancy.Security.CsrfApplicationStartup">
            <summary>
            Wires up the CSRF (anti-forgery token) support at application startup.
            </summary>
        </member>
        <member name="M:Nancy.Security.CsrfApplicationStartup.#ctor(Nancy.Cryptography.CryptographyConfiguration,Nancy.IObjectSerializer,Nancy.Security.ICsrfTokenValidator)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Security.CsrfApplicationStartup"/> class, using the
            provided <paramref name="cryptographyConfiguration"/>, <paramref name="objectSerializer"/> and <paramref name="tokenValidator"/>.
            </summary>
            <param name="cryptographyConfiguration">The cryptographic configuration to use.</param>
            <param name="objectSerializer">The serializer that should be used.</param>
            <param name="tokenValidator">The token validator that should be used.</param>
        </member>
        <member name="M:Nancy.Security.CsrfApplicationStartup.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Perform any initialisation tasks
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="P:Nancy.Security.CsrfApplicationStartup.CryptographyConfiguration">
            <summary>
            Gets the configured crypto config
            </summary>
        </member>
        <member name="P:Nancy.Security.CsrfApplicationStartup.ObjectSerializer">
            <summary>
            Gets the configured object serialiser
            </summary>
        </member>
        <member name="P:Nancy.Security.CsrfApplicationStartup.TokenValidator">
            <summary>
            Gets the configured token validator
            </summary>
        </member>
        <member name="T:Nancy.Security.CsrfToken">
            <summary>
            Represents a Csrf protection token
            </summary>
        </member>
        <member name="F:Nancy.Security.CsrfToken.DEFAULT_CSRF_KEY">
            <summary>
            The default key for the csrf cookie/form value/querystring value
            </summary>
        </member>
        <member name="M:Nancy.Security.CsrfToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.Security.CsrfToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Nancy.Security.CsrfToken.RandomBytes">
            <summary>
            Randomly generated bytes
            </summary>
        </member>
        <member name="P:Nancy.Security.CsrfToken.CreatedDate">
            <summary>
            Date and time the token was created
            </summary>
        </member>
        <member name="P:Nancy.Security.CsrfToken.Hmac">
            <summary>
            Tamper prevention hmac
            </summary>
        </member>
        <member name="M:Nancy.Security.CsrfTokenExtensions.GetCsrfTokenBytes(Nancy.Security.CsrfToken)">
            <summary>
            Gets a byte array representation of the csrf token for generating
            hmacs
            </summary>
            <param name="token">Token</param>
            <returns>Byte array representing the token</returns>
        </member>
        <member name="M:Nancy.Security.CsrfTokenExtensions.CreateHmac(Nancy.Security.CsrfToken,Nancy.Cryptography.IHmacProvider)">
            <summary>
            Calculates and sets the Hmac property on a given token
            </summary>
            <param name="token">Token</param>
            <param name="hmacProvider">Hmac provider to use</param>
            <returns>Hmac bytes</returns>
        </member>
        <member name="M:Nancy.Security.CsrfTokenExtensions.CreateRandomBytes(Nancy.Security.CsrfToken)">
            <summary>
            Creates random bytes for the csrf token
            </summary>
            <returns>Random byte array</returns>
        </member>
        <member name="T:Nancy.Security.DefaultCsrfTokenValidator">
            <summary>
            The default implementation of the <see cref="T:Nancy.Security.ICsrfTokenValidator"/> interface.
            </summary>
        </member>
        <member name="T:Nancy.Security.ICsrfTokenValidator">
            <summary>
            Validates Csrf tokens
            </summary>
        </member>
        <member name="M:Nancy.Security.ICsrfTokenValidator.Validate(Nancy.Security.CsrfToken,Nancy.Security.CsrfToken,System.Nullable{System.TimeSpan})">
            <summary>
            Validates a pair of tokens
            </summary>
            <param name="tokenOne">First token (usually from either a form post or querystring)</param>
            <param name="tokenTwo">Second token (usually from a cookie)</param>
            <param name="validityPeriod">Optional period that the tokens are valid for</param>
            <returns>Token validation result</returns>
        </member>
        <member name="M:Nancy.Security.ICsrfTokenValidator.CookieTokenStillValid(Nancy.Security.CsrfToken)">
            <summary>
            Validates that a cookie token is still valid with the current configuration / keys
            </summary>
            <param name="cookieToken">Token to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:Nancy.Security.DefaultCsrfTokenValidator.#ctor(Nancy.Cryptography.CryptographyConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Security.DefaultCsrfTokenValidator"/> class,
            using the provided <paramref name="cryptoConfig"/>.
            </summary>
            <param name="cryptoConfig">The <see cref="T:Nancy.Cryptography.CryptographyConfiguration"/> that should be used.</param>
        </member>
        <member name="M:Nancy.Security.DefaultCsrfTokenValidator.Validate(Nancy.Security.CsrfToken,Nancy.Security.CsrfToken,System.Nullable{System.TimeSpan})">
            <summary>
            Validates a pair of tokens
            </summary>
            <param name="tokenOne">First token (usually from either a form post or querystring)</param>
            <param name="tokenTwo">Second token (usually from a cookie)</param>
            <param name="validityPeriod">Optional period that the tokens are valid for</param>
            <returns>Token validation result</returns>
        </member>
        <member name="M:Nancy.Security.DefaultCsrfTokenValidator.CookieTokenStillValid(Nancy.Security.CsrfToken)">
            <summary>
            Validates that a cookie token is still valid with the current configuration / keys
            </summary>
            <param name="cookieToken">Token to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="T:Nancy.Security.CsrfTokenValidationResult">
            <summary>
            Result of Csrf Token validation
            </summary>
        </member>
        <member name="F:Nancy.Security.CsrfTokenValidationResult.Ok">
            <summary>
            Validated ok
            </summary>
        </member>
        <member name="F:Nancy.Security.CsrfTokenValidationResult.TokenTamperedWith">
            <summary>
            One or both of the tokens appears to have been tampered with
            </summary>
        </member>
        <member name="F:Nancy.Security.CsrfTokenValidationResult.TokenMissing">
            <summary>
            One or both of the tokens are missing
            </summary>
        </member>
        <member name="F:Nancy.Security.CsrfTokenValidationResult.TokenMismatch">
            <summary>
            Tokens to not match
            </summary>
        </member>
        <member name="F:Nancy.Security.CsrfTokenValidationResult.TokenExpired">
            <summary>
            Token is valid, but has expired
            </summary>
        </member>
        <member name="T:Nancy.ResponseExtensions">
            <summary>
            Containing extensions for the <see cref="T:Nancy.Response"/> object.
            </summary>
        </member>
        <member name="M:Nancy.ResponseExtensions.AsAttachment(Nancy.Response,System.String,System.String)">
            <summary>
            Force the response to be downloaded as an attachment
            </summary>
            <param name="response">Response object</param>
            <param name="fileName">Filename for the download</param>
            <param name="contentType">Optional content type</param>
            <returns>Modified Response object</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithCookie(Nancy.Response,System.String,System.String)">
            <summary>
            Adds a <see cref="T:Nancy.Cookies.INancyCookie"/> to the response.
            </summary>
            <param name="response">Response object</param>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <returns>The <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithCookie(Nancy.Response,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Adds a <see cref="T:Nancy.Cookies.INancyCookie"/> to the response.
            </summary>
            <param name="response">Response object</param>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="expires">The expiration date of the cookie. Can be <see langword="null"/> if it should expire at the end of the session.</param>
            <returns>The <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithCookie(Nancy.Response,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Adds a <see cref="T:Nancy.Cookies.INancyCookie"/> to the response.
            </summary>
            <param name="response">Response object</param>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="expires">The expiration date of the cookie. Can be <see langword="null"/> if it should expire at the end of the session.</param>
            <param name="domain">The domain of the cookie.</param>
            <param name="path">The path of the cookie.</param>
            <returns>The <see cref="T:Nancy.Response"/> instance.</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithCookie(Nancy.Response,Nancy.Cookies.INancyCookie)">
            <summary>
            Adds a <see cref="T:Nancy.Cookies.INancyCookie"/> to the response.
            </summary>
            <param name="response">Response object</param>
            <param name="nancyCookie">A <see cref="T:Nancy.Cookies.INancyCookie"/> instance.</param>
            <returns></returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithHeader(Nancy.Response,System.String,System.String)">
            <summary>
            Add a header to the response
            </summary>
            <param name="response">Response object</param>
            <param name="header">Header name</param>
            <param name="value">Header value</param>
            <returns>Modified response</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithHeaders(Nancy.Response,System.Object[])">
            <summary>
            Adds headers to the response using anonymous types
            </summary>
            <param name="response">Response object</param>
            <param name="headers">
            Array of headers - each header should be an anonymous type with two string properties 
            'Header' and 'Value' to represent the header name and its value.
            </param>
            <returns>Modified response</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithHeaders(Nancy.Response,System.Tuple{System.String,System.String}[])">
            <summary>
            Adds headers to the response using anonymous types
            </summary>
            <param name="response">Response object</param>
            <param name="headers">
            Array of headers - each header should be a Tuple with two string elements 
            for header name and header value
            </param>
            <returns>Modified response</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithContentType(Nancy.Response,System.String)">
            <summary>
            Sets the content type of the response
            </summary>
            <param name="response">Response object</param>
            <param name="contentType">The type of the content</param>
            <returns>Modified response</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithStatusCode(Nancy.Response,Nancy.HttpStatusCode)">
            <summary>
            Sets the status code of the response
            </summary>
            <param name="response">Response object</param>
            <param name="statusCode">The http status code</param>
            <returns>Modified response</returns>
        </member>
        <member name="M:Nancy.ResponseExtensions.WithStatusCode(Nancy.Response,System.Int32)">
            <summary>
            Sets the status code of the response
            </summary>
            <param name="response">Response object</param>
            <param name="statusCode">The http status code</param>
            <returns>Modified response</returns>
        </member>
        <member name="T:Nancy.RootPathApplicationStartup">
            <summary>
            Assigns the root path of the application whom ever needs it.
            </summary>
            <remarks>This task is run at application startup.</remarks>
        </member>
        <member name="M:Nancy.RootPathApplicationStartup.#ctor(Nancy.IRootPathProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.RootPathApplicationStartup"/> class.
            </summary>
            <param name="rootPathProvider">An <see cref="T:Nancy.IRootPathProvider"/> instance.</param>
        </member>
        <member name="M:Nancy.RootPathApplicationStartup.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Perform any initialisation tasks
            </summary>
        </member>
        <member name="T:Nancy.Security.IUserIdentity">
            <summary>
            Defines the core functionality of an identity
            </summary>
        </member>
        <member name="P:Nancy.Security.IUserIdentity.UserName">
            <summary>
            The username of the authenticated user.
            </summary>
            <value>A <see cref="T:System.String"/> containing the username.</value>
        </member>
        <member name="P:Nancy.Security.IUserIdentity.Claims">
            <summary>
            The claims of the authenticated user.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, containing the claims.</value>
        </member>
        <member name="P:Nancy.StaticConfiguration.DisableErrorTraces">
            <summary>
            Gets or sets a value indicating whether or not to disable traces in error messages
            </summary>
        </member>
        <member name="P:Nancy.StaticConfiguration.DisableMethodNotAllowedResponses">
            <summary>
            Gets or sets a value indicating whether or not to respond with 405 responses
            </summary>
        </member>
        <member name="P:Nancy.StaticConfiguration.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether or not to enable case sensitivity in query, parameters (DynamicDictionary) and model binding. Enable this to conform with RFC3986.
            </summary>
        </member>
        <member name="P:Nancy.StaticConfiguration.EnableHeadRouting">
            <summary>
            Gets or sets a value indicating whether or not to route HEAD requests explicitly.
            </summary>
        </member>
        <member name="P:Nancy.StaticConfiguration.IsRunningDebug">
            <summary>
            Gets a value indicating whether we are running in debug mode or not.
            Checks the entry assembly to see whether it has been built in debug mode.
            If anything goes wrong it returns false.
            </summary>
        </member>
        <member name="P:Nancy.StaticConfiguration.RequestQueryFormMultipartLimit">
            <summary>
            Gets or sets the limit on the number of query string variables, form fields,
            or multipart sections in a request.
            </summary>
        </member>
        <member name="P:Nancy.StaticConfiguration.EnableRequestTracing">
            <summary>
            Gets or sets a value indicating whether or not to enable request tracing
            </summary>
        </member>
        <member name="P:Nancy.StaticConfiguration.Caching.EnableRuntimeViewDiscovery">
            <summary>
            Gets or sets a value indicating whether or not to enable runtime view discovery
            Defaults to True in debug mode and False in release mode
            </summary>
        </member>
        <member name="P:Nancy.StaticConfiguration.Caching.EnableRuntimeViewUpdates">
            <summary>
            Gets or sets a value indicating whether or not to allow runtime changes of views
            Defaults to True in debug mode and False in release mode
            </summary>
        </member>
        <member name="T:Nancy.Url">
            <summary>
            Represents a full Url of the form scheme://hostname:port/basepath/path?query
            </summary>
            <remarks>Since this is for  internal use, and fragments are not passed to the server, fragments are not supported.</remarks>
        </member>
        <member name="M:Nancy.Url.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Nancy.Url"/> class
            </summary>
        </member>
        <member name="M:Nancy.Url.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Nancy.Url"/> class
            </summary>
            <param name="url">A <see cref="T:System.String"/> containing a URL.</param>
        </member>
        <member name="M:Nancy.Url.System#ICloneable#Clone">
            <summary>
            Clones the url.
            </summary>
            <returns>Returns a new cloned instance of the url.</returns>
        </member>
        <member name="M:Nancy.Url.Clone">
            <summary>
            Clones the url.
            </summary>
            <returns>Returns a new cloned instance of the url.</returns>
        </member>
        <member name="M:Nancy.Url.op_Implicit(Nancy.Url)~System.String">
            <summary>
            Casts the current <see cref="T:Nancy.Url"/> instance to a <see cref="T:System.String"/> instance.
            </summary>
            <param name="url">The instance that should be cast.</param>
            <returns>A <see cref="T:System.String"/> representation of the <paramref name="url"/>.</returns>
        </member>
        <member name="M:Nancy.Url.op_Implicit(System.String)~Nancy.Url">
            <summary>
            Casts the current <see cref="T:System.String"/> instance to a <see cref="T:Nancy.Url"/> instance.
            </summary>
            <param name="url">The instance that should be cast.</param>
            <returns>An <see cref="T:Nancy.Url"/> representation of the <paramref name="url"/>.</returns>
        </member>
        <member name="M:Nancy.Url.op_Implicit(Nancy.Url)~System.Uri">
            <summary>
            Casts the current <see cref="T:Nancy.Url"/> instance to a <see cref="T:System.Uri"/> instance.
            </summary>
            <param name="url">The instance that should be cast.</param>
            <returns>An <see cref="T:System.Uri"/> representation of the <paramref name="url"/>.</returns>
        </member>
        <member name="M:Nancy.Url.op_Implicit(System.Uri)~Nancy.Url">
            <summary>
            Casts a <see cref="T:System.Uri"/> instance to a <see cref="T:Nancy.Url"/> instance
            </summary>
            <param name="uri">The instance that should be cast.</param>
            <returns>An <see cref="T:Nancy.Url"/> representation of the <paramref name="uri"/>.</returns>
        </member>
        <member name="P:Nancy.Url.Scheme">
            <summary>
            Gets or sets the HTTP protocol used by the client.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="P:Nancy.Url.HostName">
            <summary>
            Gets the hostname of the request
            </summary>
        </member>
        <member name="P:Nancy.Url.Port">
            <summary>
            Gets the port name of the request
            </summary>
        </member>
        <member name="P:Nancy.Url.BasePath">
            <summary>
            Gets the base path of the request i.e. the "Nancy root"
            </summary>
        </member>
        <member name="P:Nancy.Url.Path">
            <summary>
            Gets the path of the request, relative to the base path
            This property drives the route matching
            </summary>
        </member>
        <member name="P:Nancy.Url.Query">
            <summary>
            Gets the querystring data of the requested resource.
            </summary>
        </member>
        <member name="P:Nancy.Url.SiteBase">
            <summary>
            Gets the domain part of the request
            </summary>
        </member>
        <member name="P:Nancy.Url.IsSecure">
            <summary>
            Gets whether the url is secure or not.
            </summary>
        </member>
        <member name="T:Nancy.Validation.CompositeValidator">
            <summary>
            A composite validator to combine other validators.
            </summary>
        </member>
        <member name="T:Nancy.Validation.IModelValidator">
            <summary>
            Provides a way to validate a type as well as a description to use for client-side validation.
            </summary>
        </member>
        <member name="M:Nancy.Validation.IModelValidator.Validate(System.Object,Nancy.NancyContext)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance that should be validated.</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> of the current request.</param>
            <returns>A <see cref="T:Nancy.Validation.ModelValidationResult"/> with the result of the validation.</returns>
        </member>
        <member name="P:Nancy.Validation.IModelValidator.Description">
            <summary>
            Gets the description of the validator.
            </summary>
        </member>
        <member name="P:Nancy.Validation.IModelValidator.ModelType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the model that is being validated by the validator.
            </summary>
        </member>
        <member name="M:Nancy.Validation.CompositeValidator.#ctor(System.Collections.Generic.IEnumerable{Nancy.Validation.IModelValidator},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.CompositeValidator"/> class.
            </summary>
            <param name="validators">The validators.</param>
            <param name="modelType">The type of the model that is being validated.</param>
        </member>
        <member name="M:Nancy.Validation.CompositeValidator.Validate(System.Object,Nancy.NancyContext)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance that should be validated.</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> of the current request.</param>
            <returns>A <see cref="T:Nancy.Validation.ModelValidationResult"/> with the result of the validation.</returns>
        </member>
        <member name="P:Nancy.Validation.CompositeValidator.Description">
            <summary>
            Gets the description of the validator.
            </summary>
        </member>
        <member name="P:Nancy.Validation.CompositeValidator.ModelType">
            <summary>
            The type of the model that is being validated by the validator.
            </summary>
        </member>
        <member name="T:Nancy.Validation.DefaultValidatorLocator">
            <summary>
            The default Nancy implementation of IValidatorLocator.
            </summary>
        </member>
        <member name="T:Nancy.Validation.IModelValidatorLocator">
            <summary>
            Locates a validator for a given type.
            </summary>
        </member>
        <member name="M:Nancy.Validation.IModelValidatorLocator.GetValidatorForType(System.Type)">
            <summary>
            Gets a validator for a given type.
            </summary>
            <param name="type">The type to validate.</param>
            <returns>An <see cref="T:Nancy.Validation.IModelValidator"/> instance or <see langword="null"/> if none found.</returns>
        </member>
        <member name="M:Nancy.Validation.DefaultValidatorLocator.#ctor(System.Collections.Generic.IEnumerable{Nancy.Validation.IModelValidatorFactory})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.DefaultValidatorLocator"/> class.
            </summary>
            <param name="factories">The factories.</param>
        </member>
        <member name="M:Nancy.Validation.DefaultValidatorLocator.GetValidatorForType(System.Type)">
            <summary>
            Gets a validator for a given type.
            </summary>
            <param name="type">The type to validate.</param>
            <returns>An <see cref="T:Nancy.Validation.IModelValidator"/> instance or <see langword="null"/> if none found.</returns>
        </member>
        <member name="T:Nancy.Validation.IModelValidatorFactory">
            <summary>
            Creates instances of IValidator.
            </summary>
        </member>
        <member name="M:Nancy.Validation.IModelValidatorFactory.Create(System.Type)">
            <summary>
            Creates a validator for the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>A validator for the given type or null if none exists.</returns>
        </member>
        <member name="T:Nancy.Validation.ModelValidationException">
            <summary>
            Exception that is thrown during problems with model validation.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationException"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationException"/> class,
            with the provided <paramref name="message"/>.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Nancy.Validation.ModelValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationException"/> class,
            with the provided <paramref name="message"/> and <paramref name="innerException"/>
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Nancy.Validation.ModuleExtensions">
            <summary>
            Extensions to <see cref="T:Nancy.INancyModule"/> for validation.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModuleExtensions.Validate``1(Nancy.INancyModule,``0)">
            <summary>
            Performs validation on the specified <paramref name="instance"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="instance"/> that is being validated.</typeparam>
            <param name="module">The module that the validation is performed from.</param>
            <param name="instance">The instance that is being validated.</param>
            <returns>A <see cref="T:Nancy.Validation.ModelValidationResult"/> instance.</returns>
        </member>
        <member name="T:Nancy.Validation.Rules.ComparisonOperator">
            <summary>
            Specifies the validation comparison operators used by the <see cref="T:Nancy.Validation.Rules.ComparisonValidationRule"/> type.
            </summary>
        </member>
        <member name="F:Nancy.Validation.Rules.ComparisonOperator.GreaterThan">
            <summary>
            A comparison for greater than.
            </summary>
        </member>
        <member name="F:Nancy.Validation.Rules.ComparisonOperator.GreaterThanOrEqual">
            <summary>
            A comparison for greater than or equal to.
            </summary>
        </member>
        <member name="F:Nancy.Validation.Rules.ComparisonOperator.LessThan">
            <summary>
            A comparison for less than.
            </summary>
        </member>
        <member name="F:Nancy.Validation.Rules.ComparisonOperator.LessThanOrEqual">
            <summary>
            A comparison for less than or equal to.
            </summary>
        </member>
        <member name="F:Nancy.Validation.Rules.ComparisonOperator.Equal">
            <summary>
            A comparison for equality.
            </summary>
        </member>
        <member name="F:Nancy.Validation.Rules.ComparisonOperator.NotEqual">
            <summary>
            A comparison for inequality.
            </summary>
        </member>
        <member name="T:Nancy.Validation.Rules.NotEmptyValidationRule">
            <summary>
            Implementation of <see cref="T:Nancy.Validation.ModelValidationRule"/> for ensuring a string does not
            contain an empty value.
            </summary>
        </member>
        <member name="T:Nancy.Validation.ModelValidationRule">
            <summary>
            A description of a validation rule.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationRule.#ctor(System.String,System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationRule"/> class.
            </summary>
            <param name="ruleType">Type of the rule.</param>
            <param name="errorMessageFormatter">The error message formatter.</param>
        </member>
        <member name="M:Nancy.Validation.ModelValidationRule.#ctor(System.String,System.Func{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationRule"/> class.
            </summary>
            <param name="ruleType">Type of the rule.</param>
            <param name="errorMessageFormatter">The error message formatter.</param>
            <param name="memberNames">Name of the member.</param>
        </member>
        <member name="M:Nancy.Validation.ModelValidationRule.GetErrorMessage(System.String)">
            <summary>
            Gets the error message that this rule will provide upon error.
            </summary>
            <param name="name">The name.</param>
            <returns>The error message.</returns>
        </member>
        <member name="P:Nancy.Validation.ModelValidationRule.MemberNames">
            <summary>
            Gets the names of the members this rule validates.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the name of the member.</value>
        </member>
        <member name="P:Nancy.Validation.ModelValidationRule.RuleType">
            <summary>
            Gets the type of the rule.
            </summary>
            <value>The type of the rule.</value>
        </member>
        <member name="M:Nancy.Validation.Rules.NotEmptyValidationRule.#ctor(System.Func{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.Rules.NotEmptyValidationRule"/> class.
            </summary>
            <param name="errorMessageFormatter">The error message formatter.</param>
            <param name="memberNames">The member names.</param>
        </member>
        <member name="T:Nancy.Validation.Rules.NotNullValidationRule">
            <summary>
            Implementation of <see cref="T:Nancy.Validation.ModelValidationRule"/> for ensuring a string is not null.
            </summary>
        </member>
        <member name="M:Nancy.Validation.Rules.NotNullValidationRule.#ctor(System.Func{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.Rules.NotNullValidationRule"/> class.
            </summary>
            <param name="errorMessageFormatter">The error message formatter.</param>
            <param name="memberNames">The member names.</param>
        </member>
        <member name="T:Nancy.Validation.Rules.ComparisonValidationRule">
            <summary>
            Implementation of <see cref="T:Nancy.Validation.ModelValidationRule"/> for comparing two values using a
            provided <see cref="T:Nancy.Validation.Rules.ComparisonOperator"/>.
            </summary>
        </member>
        <member name="M:Nancy.Validation.Rules.ComparisonValidationRule.#ctor(System.Func{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},Nancy.Validation.Rules.ComparisonOperator,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.Rules.ComparisonValidationRule"/> class.
            </summary>
            <param name="errorMessageFormatter">The error message formatter.</param>
            <param name="memberNames">The member names.</param>
            <param name="operator">The <see cref="T:Nancy.Validation.Rules.ComparisonOperator"/> that should be used when comparing values.</param>
            <param name="value">Gets the value to compare against.</param>
        </member>
        <member name="P:Nancy.Validation.Rules.ComparisonValidationRule.Operator">
            <summary>
            The <see cref="T:Nancy.Validation.Rules.ComparisonOperator"/> that should be used when comparing values.
            </summary>
            <value>A <see cref="T:Nancy.Validation.Rules.ComparisonOperator"/> value.</value>
        </member>
        <member name="P:Nancy.Validation.Rules.ComparisonValidationRule.Value">
            <summary>
            Gets the value to compare against.
            </summary>
        </member>
        <member name="T:Nancy.Validation.Rules.RegexValidationRule">
            <summary>
            Implementation of <see cref="T:Nancy.Validation.ModelValidationRule"/> for ensuring a string matches the
            pattern which is defined by a regex.
            </summary>
        </member>
        <member name="M:Nancy.Validation.Rules.RegexValidationRule.#ctor(System.Func{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.Rules.RegexValidationRule"/> class.
            </summary>
            <param name="errorMessageFormatter">The error message formatter.</param>
            <param name="memberNames">The member names.</param>
            <param name="pattern">The regex pattern that should be used to check for a match.</param>
        </member>
        <member name="P:Nancy.Validation.Rules.RegexValidationRule.Pattern">
            <summary>
            The regex pattern that should be used to check for a match.
            </summary>
        </member>
        <member name="T:Nancy.Validation.Rules.StringLengthValidationRule">
            <summary>
            Implementation of <see cref="T:Nancy.Validation.ModelValidationRule"/> for ensuring that the length of a string
            is withing the specified range.
            </summary>
        </member>
        <member name="M:Nancy.Validation.Rules.StringLengthValidationRule.#ctor(System.Func{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.Rules.StringLengthValidationRule"/> class.
            </summary>
            <param name="errorMessageFormatter">The error message formatter.</param>
            <param name="memberNames">The member names.</param>
            <param name="minLength">Minimum allowed length of the string</param>
            <param name="maxLength">Maximum allowed length of the string</param>
        </member>
        <member name="P:Nancy.Validation.Rules.StringLengthValidationRule.MinLength">
            <summary>
            Gets the length of the min.
            </summary>
            <value>The length of the min.</value>
        </member>
        <member name="P:Nancy.Validation.Rules.StringLengthValidationRule.MaxLength">
            <summary>
            Gets the length of the max.
            </summary>
            <value>The length of the max.</value>
        </member>
        <member name="T:Nancy.Validation.ModelValidationDescriptor">
            <summary>
            A description of the rules a validator provides.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationDescriptor.#ctor(System.Collections.Generic.IEnumerable{Nancy.Validation.ModelValidationRule},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationDescriptor"/> class.
            </summary>
            <param name="rules">The rules that describes the model.</param>
            <param name="modelType">The type of the model that the rules are defined for.</param>
        </member>
        <member name="M:Nancy.Validation.ModelValidationDescriptor.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Nancy.Validation.ModelValidationRule}},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationDescriptor"/> class.
            </summary>
            <param name="rules">The rules that describes the model, grouped by member name.</param>
            <param name="modelType">The type of the model that the rules are defined for.</param>
        </member>
        <member name="P:Nancy.Validation.ModelValidationDescriptor.ModelType">
            <summary>
            The type of the model that is being described.
            </summary>
        </member>
        <member name="P:Nancy.Validation.ModelValidationDescriptor.Rules">
            <summary>
            Gets the rules.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance that contains <see cref="T:Nancy.Validation.ModelValidationRule"/> instances grouped by property name.</value>
        </member>
        <member name="T:Nancy.Validation.ModelValidationError">
            <summary>
            Represents a model validation error.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationError.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationError"/> class.
            </summary>
            <param name="memberName">Name of the member that the error describes.</param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:Nancy.Validation.ModelValidationError.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationError"/> class.
            </summary>
            <param name="memberNames">The member names that the error describes.</param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:Nancy.Validation.ModelValidationError.op_Implicit(Nancy.Validation.ModelValidationError)~System.String">
            <summary>
            Implicitly cast a validation error to a string.
            </summary>
            <param name="error">The <see cref="T:Nancy.Validation.ModelValidationError"/> that should be cast.</param>
            <returns>A <see cref="T:System.String"/> containing the validation error description.</returns>
        </member>
        <member name="M:Nancy.Validation.ModelValidationError.ToString">
            <summary>
            Returns the <see cref="P:Nancy.Validation.ModelValidationError.ErrorMessage"/>.
            </summary>
            <returns>A string containing the error message.</returns>
        </member>
        <member name="P:Nancy.Validation.ModelValidationError.MemberNames">
            <summary>
            Gets the member names that are a part of the error.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the name of the members.</value>
        </member>
        <member name="P:Nancy.Validation.ModelValidationError.ErrorMessage">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nancy.Validation.ModelValidationResult">
            <summary>
            Represents the result of a model validation.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationResult"/> class.
            </summary>
        </member>
        <member name="M:Nancy.Validation.ModelValidationResult.#ctor(System.Collections.Generic.IEnumerable{Nancy.Validation.ModelValidationError})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationResult"/> class.
            </summary>
            <param name="errors">The <see cref="T:Nancy.Validation.ModelValidationError"/> instances that makes up the result.</param>
        </member>
        <member name="M:Nancy.Validation.ModelValidationResult.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Nancy.Validation.ModelValidationError}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Validation.ModelValidationResult"/> class.
            </summary>
            <param name="errors">The <see cref="T:Nancy.Validation.ModelValidationError"/> instances that makes up the result, grouped by member name.</param>
        </member>
        <member name="P:Nancy.Validation.ModelValidationResult.Errors">
            <summary>
            Gets the errors.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance that contains <see cref="T:Nancy.Validation.ModelValidationError"/> instances grouped by property name.</value>
        </member>
        <member name="P:Nancy.Validation.ModelValidationResult.IsValid">
            <summary>
            Gets a value indicating whether the validated instance is valid or not.
            </summary>
            <value><see langword="true"/> if the validated instance is valid; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultFileSystemReader">
            <summary>
            Default implementation for retrieving information about views that are stored on the file system.
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.IFileSystemReader">
            <summary>
            Defines the functionality for retrieving information about views that are stored on the file system.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IFileSystemReader.GetViewsWithSupportedExtensions(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets information about view that are stored in folders below the applications root path.
            </summary>
            <param name="path">The path of the folder where the views should be looked for.</param>
            <param name="supportedViewExtensions">A list of view extensions to look for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing view locations and contents readers.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.IFileSystemReader.GetLastModified(System.String)">
            <summary>
            Gets the last modified time for the file specified
            </summary>
            <param name="filename">Filename</param>
            <returns>Time the file was last modified</returns>
        </member>
        <member name="M:Nancy.ViewEngines.IFileSystemReader.GetViewsWithSupportedExtensions(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets information about specific views that are stored in folders below the applications root path.
            </summary>
            <param name="path">The path of the folder where the views should be looked for.</param>
            <param name="viewName">Name of the view to search for</param>
            <param name="supportedViewExtensions">A list of view extensions to look for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing view locations and contents readers.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultFileSystemReader.GetViewsWithSupportedExtensions(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets information about view that are stored in folders below the applications root path.
            </summary>
            <param name="path">The path of the folder where the views should be looked for.</param>
            <param name="supportedViewExtensions">A list of view extensions to look for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing view locations and contents readers.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultFileSystemReader.GetLastModified(System.String)">
            <summary>
            Gets the last modified time for the file specified
            </summary>
            <param name="filename">Filename</param>
            <returns>Time the file was last modified</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultFileSystemReader.GetViewsWithSupportedExtensions(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets information about specific views that are stored in folders below the applications root path.
            </summary>
            <param name="path">The path of the folder where the views should be looked for.</param>
            <param name="viewName">Name of the view to search for</param>
            <param name="supportedViewExtensions">A list of view extensions to look for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing view locations and contents readers.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultRenderContext">
            <summary>
            Default render context implementation.
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.IRenderContext">
            <summary>
            Defines the functionality of the context that is passed into a view engine when the view is requested to be rendered.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IRenderContext.ParsePath(System.String)">
            <summary>
            Parses a path and returns an absolute url path, taking into account
            base directory etc.
            </summary>
            <param name="input">Input url such as ~/styles/main.css</param>
            <returns>Parsed absolute url path</returns>
        </member>
        <member name="M:Nancy.ViewEngines.IRenderContext.HtmlEncode(System.String)">
            <summary>
            HTML encodes a string.
            </summary>
            <param name="input">The string that should be HTML encoded.</param>
            <returns>A HTML encoded <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.IRenderContext.LocateView(System.String,System.Object)">
            <summary>
            Locates a view that matches the provided <paramref name="viewName"/> and <paramref name="model"/>.
            </summary>
            <param name="viewName">The name of the view that should be located.</param>
            <param name="model">The model that should be used when locating the view.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance if the view could be located; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.IRenderContext.GetCsrfToken">
            <summary>
            Gets the current Csrf token.
            The token should be stored in a cookie and the form as a hidden field.
            In both cases the name should be the key of the returned key value pair.
            </summary>
            <returns>A tuple containing the name (cookie name and form/querystring name) and value</returns>
        </member>
        <member name="P:Nancy.ViewEngines.IRenderContext.Context">
            <summary>
            Gets the context of the current request.
            </summary>
            <value>A <see cref="T:Nancy.NancyContext"/> instance.</value>
        </member>
        <member name="P:Nancy.ViewEngines.IRenderContext.ViewCache">
            <summary>
            Gets the view cache that is used by Nancy.
            </summary>
            <value>An <see cref="T:Nancy.ViewEngines.IViewCache"/> instance.</value>
        </member>
        <member name="P:Nancy.ViewEngines.IRenderContext.TextResource">
            <summary>
            Gets the text resource for localisation
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.IRenderContext.TextResourceFinder">
            <summary>
            Gets the text resource finder for localisation
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultRenderContext.#ctor(Nancy.ViewEngines.IViewResolver,Nancy.ViewEngines.IViewCache,Nancy.Localization.ITextResource,Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.DefaultRenderContext"/> class.
            </summary>
            <param name="viewResolver"></param>
            <param name="viewCache"></param>
            <param name="textResource"></param>
            <param name="viewLocationContext"></param>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultRenderContext.ParsePath(System.String)">
            <summary>
            Parses a path and returns an absolute url path, taking into account
            base directory etc.
            </summary>
            <param name="input">Input url such as ~/styles/main.css</param>
            <returns>Parsed absolute url path</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultRenderContext.HtmlEncode(System.String)">
            <summary>
            HTML encodes a string.
            </summary>
            <param name="input">The string that should be HTML encoded.</param>
            <returns>A HTML encoded <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultRenderContext.LocateView(System.String,System.Object)">
            <summary>
            Locates a view that matches the provided <paramref name="viewName"/> and <paramref name="model"/>.
            </summary>
            <param name="viewName">The name of the view that should be located.</param>
            <param name="model">The model that should be used when locating the view.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance if the view could be located; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultRenderContext.GetCsrfToken">
            <summary>
            Generates a Csrf token.
            The token should be stored in a cookie and the form as a hidden field.
            In both cases the name should be the key of the returned key value pair.
            </summary>
            <returns>A tuple containing the name (cookie name and form/querystring name) and value</returns>
        </member>
        <member name="P:Nancy.ViewEngines.DefaultRenderContext.Context">
            <summary>
            Gets the context of the current request.
            </summary>
            <value>A <see cref="T:Nancy.NancyContext"/> instance.</value>
        </member>
        <member name="P:Nancy.ViewEngines.DefaultRenderContext.ViewCache">
            <summary>
            Gets the view cache that is used by Nancy.
            </summary>
            <value>An <see cref="T:Nancy.ViewEngines.IViewCache"/> instance.</value>
        </member>
        <member name="P:Nancy.ViewEngines.DefaultRenderContext.TextResource">
            <summary>
            Gets the text resource for localisation
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.DefaultRenderContext.TextResourceFinder">
            <summary>
            Gets the text resource finder for localisation
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultRenderContextFactory">
            <summary>
            Default render context factory implementation.
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.IRenderContextFactory">
            <summary>
            Defines the functionality required to manufacture <see cref="T:Nancy.ViewEngines.IRenderContext"/> instances.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IRenderContextFactory.GetRenderContext(Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Gets a <see cref="T:Nancy.ViewEngines.IRenderContext"/> for the specified <see cref="T:Nancy.ViewEngines.ViewLocationContext"/>.
            </summary>
            <param name="viewLocationContext">The <see cref="T:Nancy.ViewEngines.ViewLocationContext"/> for which the context should be created.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.IRenderContext"/> instance.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultRenderContextFactory.#ctor(Nancy.ViewEngines.IViewCache,Nancy.ViewEngines.IViewResolver,Nancy.Localization.ITextResource)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.DefaultRenderContextFactory"/> class.
            </summary>
            <param name="viewCache">The view cache that should be used by the created render context.</param>
            <param name="viewResolver">The view resolver that should be used by the created render context.</param>
            <param name="textResource">The <see cref="T:Nancy.Localization.ITextResource"/> that should be used by the engine.</param>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultRenderContextFactory.GetRenderContext(Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Gets a <see cref="T:Nancy.ViewEngines.IRenderContext"/> for the specified <see cref="T:Nancy.ViewEngines.ViewLocationContext"/>.
            </summary>
            <param name="viewLocationContext">The <see cref="T:Nancy.ViewEngines.ViewLocationContext"/> for which the context should be created.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.IRenderContext"/> instance.</returns>
        </member>
        <member name="T:Nancy.ResourceAssemblyProvider">
            <summary>
            Default set of assemblies that should be scanned for items (views, text, content etc)
            embedded as resources.
            </summary>
            <remarks>The default convention will scan all assemblies that references another assemblies that has a name that starts with Nancy*</remarks>
        </member>
        <member name="T:Nancy.IResourceAssemblyProvider">
            <summary>
            Defines the functionality for retrieving which assemblies that should be used by Nancy.
            </summary>
        </member>
        <member name="M:Nancy.IResourceAssemblyProvider.GetAssembliesToScan">
            <summary>
            Gets a list of assemblies that should be scanned.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Reflection.Assembly"/> instances.</returns>
        </member>
        <member name="M:Nancy.ResourceAssemblyProvider.GetAssembliesToScan">
            <summary>
            Gets a list of assemblies that should be scanned for views.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Reflection.Assembly"/> instances.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultResourceReader">
            <summary>
            Default implementation for extracting view information form an assembly.
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.IResourceReader">
            <summary>
            Defines the functionality of a reader that extracts embedded views from an assembly.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IResourceReader.GetResourceStreamMatches(System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets information about the resources that are embedded in the assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to retrieve view information from.</param>
            <param name="supportedViewEngineExtensions">A list of view extensions to look for.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of resource locations and content readers.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultResourceReader.GetResourceStreamMatches(System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets information about the resources that are embedded in the assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to retrieve view information from.</param>
            <param name="supportedViewEngineExtensions">A list of view extensions to look for.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of resource locations and content readers.</returns>
        </member>
        <member name="T:Nancy.Localization.ResourceBasedTextResource">
            <summary>
            Resource based implementation of <see cref="T:Nancy.Localization.ITextResource"/>
            </summary>
        </member>
        <member name="M:Nancy.Localization.ResourceBasedTextResource.#ctor(Nancy.IResourceAssemblyProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Nancy.Localization.ResourceBasedTextResource"/> to read strings from *.resx files
            </summary>
            <param name="resourceAssemblyProvider">The <see cref="T:Nancy.IResourceAssemblyProvider"/> that should be used when scanning.</param>
        </member>
        <member name="P:Nancy.Localization.ResourceBasedTextResource.Item(System.String,Nancy.NancyContext)">
            <summary>
            Used to return a string value from *.resx files
            </summary>
            <param name="key">The key to look for in the resource file</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> used to determine the culture for returning culture specific values.</param>
            <returns>Returns a string value from culture specific or default file or null if key does not exist as determined by <see cref="T:System.Resources.ResourceManager"/>.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultViewRenderer">
            <summary>
            Default implementation of the <see cref="T:Nancy.ViewEngines.IViewRenderer"/> interface.
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.IViewRenderer">
            <summary>
            Interface for manually rendering views to a Response object, rather
            than going through content negotiation.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IViewRenderer.RenderView(Nancy.NancyContext,System.String,System.Object)">
            <summary>
            Renders a view to a response object, bypassing content negotiation.
            </summary>
            <param name="context">Current Nancy context</param>
            <param name="viewName">View name</param>
            <param name="model">Model object (or null)</param>
            <returns>Response object containing the rendered view (if found)</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewRenderer.#ctor(Nancy.ViewEngines.IViewFactory)">
            <summary>
            Initializes an instance of the <see cref="T:Nancy.ViewEngines.DefaultViewRenderer"/> type, with
            the provided <paramref name="factory"/>.
            </summary>
            <param name="factory">The <see cref="T:Nancy.ViewEngines.IViewFactory"/> that should be used to render the views.</param>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewRenderer.RenderView(Nancy.NancyContext,System.String,System.Object)">
            <summary>
            Renders a view to a response object, bypassing content negotiation.
            </summary>
            <param name="context">Current Nancy context</param>
            <param name="viewName">View name</param>
            <param name="model">Model object (or null)</param>
            <returns>Response object containing the rendered view (if found)</returns>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultViewCache">
            <summary>
            View cache that supports expiring content if it is stale
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.IViewCache">
            <summary>
            Defines the functionality of a Nancy view cache.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IViewCache.GetOrAdd``1(Nancy.ViewEngines.ViewLocationResult,System.Func{Nancy.ViewEngines.ViewLocationResult,``0})">
            <summary>
            Gets or adds a view from the cache.
            </summary>
            <typeparam name="TCompiledView">The type of the cached view instance.</typeparam>
            <param name="viewLocationResult">A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance that describes the view that is being added or retrieved from the cache.</param>
            <param name="valueFactory">A function that produces the value that should be added to the cache in case it does not already exist.</param>
            <returns>An instance of the type specified by the <typeparamref name="TCompiledView"/> type.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.DefaultViewCache"/> class.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewCache.GetOrAdd``1(Nancy.ViewEngines.ViewLocationResult,System.Func{Nancy.ViewEngines.ViewLocationResult,``0})">
            <summary>
            Gets or adds a view from the cache.
            </summary>
            <typeparam name="TCompiledView">The type of the cached view instance.</typeparam>
            <param name="viewLocationResult">A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance that describes the view that is being added or retrieved from the cache.</param>
            <param name="valueFactory">A function that produces the value that should be added to the cache in case it does not already exist.</param>
            <returns>An instance of the type specified by the <typeparamref name="TCompiledView"/> type.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.Extensions">
            <summary>
            Contains miscellaneous extension methods.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.Extensions.IsAnonymousType(System.Object)">
            <summary>
            Checks if the evaluated instance is an anonymous
            </summary>
            <param name="source">The object instance to check.</param>
            <returns><see langword="true"/> if the object is an anonymous type; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.FileSystemViewLocationProvider">
            <summary>
            Contains the functionality for locating a view that is located on the file system.
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.IViewLocationProvider">
            <summary>
            Defines the functionality used by Nancy to located a view.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IViewLocationProvider.GetLocatedViews(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns an <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance for all the views that could be located by the provider.
            </summary>
            <param name="supportedViewExtensions">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances for the located views.</returns>
            <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
        </member>
        <member name="M:Nancy.ViewEngines.IViewLocationProvider.GetLocatedViews(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Returns an <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance for all the views matching the viewName that could be located by the provider.
            </summary>
            <param name="supportedViewExtensions">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
            <param name="location">Location of the view</param>
            <param name="viewName">The name of the view to try and find</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances for the located views.</returns>
            <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
        </member>
        <member name="M:Nancy.ViewEngines.FileSystemViewLocationProvider.#ctor(Nancy.IRootPathProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.FileSystemViewLocationProvider"/> class.
            </summary>
            <param name="rootPathProvider">A <see cref="T:Nancy.IRootPathProvider"/> instance.</param>
            <remarks>Creating an instance using this constructor will result in the <see cref="T:Nancy.ViewEngines.DefaultFileSystemReader"/> being used internally.</remarks>
        </member>
        <member name="M:Nancy.ViewEngines.FileSystemViewLocationProvider.#ctor(Nancy.IRootPathProvider,Nancy.ViewEngines.IFileSystemReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.FileSystemViewLocationProvider"/> class.
            </summary>
            <param name="rootPathProvider">A <see cref="T:Nancy.IRootPathProvider"/> instance.</param>
            <param name="fileSystemReader">An <see cref="T:Nancy.ViewEngines.IFileSystemReader"/> instance that should be used when retrieving view information from the file system.</param>
        </member>
        <member name="M:Nancy.ViewEngines.FileSystemViewLocationProvider.GetLocatedViews(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns an <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance for all the views that could be located by the provider.
            </summary>
            <param name="supportedViewExtensions">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances for the located views.</returns>
            <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
        </member>
        <member name="M:Nancy.ViewEngines.FileSystemViewLocationProvider.GetLocatedViews(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Returns an <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance for all the views matching the viewName that could be located by the provider.
            </summary>
            <param name="supportedViewExtensions">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
            <param name="viewName">The name of the view to try and find</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances for the located views.</returns>
            <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
        </member>
        <member name="T:Nancy.HeadResponse">
            <summary>
            Represents a HEAD only response.
            </summary>
        </member>
        <member name="M:Nancy.HeadResponse.#ctor(Nancy.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HeadResponse"/> class.
            </summary>
            <param name="response">
            The full response to create the head response from.
            </param>
        </member>
        <member name="T:Nancy.Extensions.CollectionExtensions">
            <summary>
            Containing extensions for the collection objects.
            </summary>
        </member>
        <member name="M:Nancy.Extensions.CollectionExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts a <see cref="T:System.Collections.Specialized.NameValueCollection"/> to a <see cref="T:System.Collections.Generic.IDictionary`2"/> instance.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to convert.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance.</returns>
        </member>
        <member name="M:Nancy.Extensions.CollectionExtensions.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance to a <see cref="T:System.Collections.Specialized.NameValueCollection"/> instance.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary`2"/> instance to convert.</param>
            <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection"/> instance.</returns>
        </member>
        <member name="M:Nancy.Extensions.CollectionExtensions.Merge(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Merges a collection of <see cref="T:System.Collections.Generic.IDictionary`2"/> instances into a single one.
            </summary>
            <param name="dictionaries">The list of <see cref="T:System.Collections.Generic.IDictionary`2"/> instances to merge.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the keys and values from the other instances.</returns>
        </member>
        <member name="M:Nancy.Extensions.CollectionExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Filters a collection based on a provided key selector.
            </summary>
            <param name="source">The collection filter.</param>
            <param name="keySelector">The predicate to filter by.</param>
            <typeparam name="TSource">The type of the collection to filter.</typeparam>
            <typeparam name="TKey">The type of the key to filter by.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance with the filtered values.</returns>
        </member>
        <member name="M:Nancy.Helpers.HttpUtility.HtmlDecode(System.String)">
            <summary>
            Decodes an HTML-encoded string and returns the decoded string.
            </summary>
            <param name="s">The HTML string to decode. </param>
            <returns>The decoded text.</returns>
        </member>
        <member name="M:Nancy.Helpers.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            Decodes an HTML-encoded string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The HTML string to decode</param>
            <param name="output">The TextWriter output stream containing the decoded string. </param>
        </member>
        <member name="M:Nancy.Helpers.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            HTML-encodes a string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The string to encode. </param>
            <param name="output">The TextWriter output stream containing the encoded string. </param>
        </member>
        <member name="T:Nancy.HttpFile">
            <summary>
            Represents a file that was captured in a HTTP multipart/form-data request
            </summary>
        </member>
        <member name="M:Nancy.HttpFile.#ctor(Nancy.HttpMultipartBoundary)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpFile"/> class,
            using the provided <paramref name="boundary"/>.
            </summary>
            <param name="boundary">The <see cref="T:Nancy.HttpMultipartBoundary"/> that contains the file information.</param>
        </member>
        <member name="M:Nancy.HttpFile.#ctor(System.String,System.String,System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpFile"/> class,
            using the provided values
            </summary>
            <paramref name="contentType">The content type of the file.</paramref>
            <paramref name="name">The name of the file.</paramref>
            <paramref name="value">The content of the file.</paramref>
            <paramref name="key">The name of the field that uploaded the file.</paramref>
        </member>
        <member name="P:Nancy.HttpFile.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>A <see cref="T:System.String"/> containing the content type of the file.</value>
        </member>
        <member name="P:Nancy.HttpFile.Name">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the file.</value>
        </member>
        <member name="P:Nancy.HttpFile.Key">
            <summary>
            Gets or sets the form element name of this file.
            </summary>
            <value>A <see cref="T:System.String"/> containing the key.</value>
        </member>
        <member name="P:Nancy.HttpFile.Value">
            <summary>
            Gets or sets the value stream.
            </summary>
            <value>A <see cref="T:System.IO.Stream"/> containing the contents of the file.</value>
            <remarks>This is a <see cref="T:Nancy.HttpMultipartSubStream"/> instance that sits ontop of the request stream.</remarks>
        </member>
        <member name="T:Nancy.HttpMultipart">
            <summary>
            Retrieves <see cref="T:Nancy.HttpMultipartBoundary"/> instances from a request stream.
            </summary>
        </member>
        <member name="M:Nancy.HttpMultipart.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpMultipart"/> class.
            </summary>
            <param name="requestStream">The request stream to parse.</param>
            <param name="boundary">The boundary marker to look for.</param>
        </member>
        <member name="M:Nancy.HttpMultipart.GetBoundaries">
            <summary>
            Gets the <see cref="T:Nancy.HttpMultipartBoundary"/> instances from the request stream.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing the found <see cref="T:Nancy.HttpMultipartBoundary"/> instances.</returns>
        </member>
        <member name="T:Nancy.HttpMultipartBoundary">
            <summary>
            Represents the content boundary of a HTTP multipart/form-data boundary in a stream.
            </summary>
        </member>
        <member name="M:Nancy.HttpMultipartBoundary.#ctor(Nancy.HttpMultipartSubStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpMultipartBoundary"/> class.
            </summary>
            <param name="boundaryStream">The stream that contains the boundary information.</param>
        </member>
        <member name="P:Nancy.HttpMultipartBoundary.ContentType">
            <summary>
            Gets the contents type of the boundary value.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Nancy.HttpMultipartBoundary.Filename">
            <summary>
            Gets or the filename for the boundary value.
            </summary>
            <value>A <see cref="T:System.String"/> containing the filename value if it is available; otherwise <see cref="F:System.String.Empty"/>.</value>
            <remarks>This is the RFC2047 decoded value of the filename attribute of the Content-Disposition header.</remarks>
        </member>
        <member name="P:Nancy.HttpMultipartBoundary.Name">
            <summary>
            Gets name of the boundary value.
            </summary>
            <remarks>This is the RFC2047 decoded value of the name attribute of the Content-Disposition header.</remarks>
        </member>
        <member name="P:Nancy.HttpMultipartBoundary.Value">
            <summary>
            A stream containing the value of the boundary.
            </summary>
            <remarks>This is the RFC2047 decoded value of the Content-Type header.</remarks>
        </member>
        <member name="T:Nancy.HttpMultipartBuffer">
            <summary>
            A buffer that is used to locate a HTTP multipart/form-data boundary in a stream.
            </summary>
        </member>
        <member name="M:Nancy.HttpMultipartBuffer.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpMultipartBuffer"/> class.
            </summary>
            <param name="boundaryAsBytes">The boundary as a byte-array.</param>
            <param name="closingBoundaryAsBytes">The closing boundary as byte-array</param>
        </member>
        <member name="M:Nancy.HttpMultipartBuffer.Reset">
            <summary>
            Resets the buffer so that inserts happens from the start again.
            </summary>
            <remarks>This does not clear any previously written data, just resets the buffer position to the start. Data that is inserted after Reset has been called will overwrite old data.</remarks>
        </member>
        <member name="M:Nancy.HttpMultipartBuffer.Insert(System.Byte)">
            <summary>
            Inserts the specified value into the buffer and advances the internal position.
            </summary>
            <param name="value">The value to insert into the buffer.</param>
            <remarks>This will throw an <see cref="T:System.ArgumentOutOfRangeException"/> is you attempt to call insert more times then the <see cref="P:Nancy.HttpMultipartBuffer.Length"/> of the buffer and <see cref="M:Nancy.HttpMultipartBuffer.Reset"/> was not invoked.</remarks>
        </member>
        <member name="P:Nancy.HttpMultipartBuffer.IsBoundary">
            <summary>
            Gets a value indicating whether the buffer contains the same values as the boundary.
            </summary>
            <value><see langword="true"/> if buffer contains the same values as the boundary; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Nancy.HttpMultipartBuffer.IsFull">
            <summary>
            Gets a value indicating whether this buffer is full.
            </summary>
            <value><see langword="true"/> if buffer is full; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Nancy.HttpMultipartBuffer.Length">
            <summary>
            Gets the number of bytes that can be stored in the buffer.
            </summary>
            <value>The number of bytes that can be stored in the buffer.</value>
        </member>
        <member name="T:Nancy.HttpStatusCode">
            <summary>
            HTTP Status Codes
            </summary>
            <remarks>The values are based on the list found at http://en.wikipedia.org/wiki/List_of_HTTP_status_codes </remarks>
        </member>
        <member name="F:Nancy.HttpStatusCode.Continue">
            <summary>
            100 Continue
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.SwitchingProtocols">
            <summary>
            101 SwitchingProtocols
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Processing">
            <summary>
            102 Processing
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Checkpoint">
            <summary>
            103 Checkpoint
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.OK">
            <summary>
            200 OK
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Created">
            <summary>
            201 Created
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Accepted">
            <summary>
            202 Accepted
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NonAuthoritativeInformation">
            <summary>
            203 NonAuthoritativeInformation
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NoContent">
            <summary>
            204 NoContent
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.ResetContent">
            <summary>
            205 ResetContent
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.PartialContent">
            <summary>
            206 PartialContent
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.MultipleStatus">
            <summary>
            207 MultipleStatus
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.IMUsed">
            <summary>
            226 IMUsed
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.MultipleChoices">
            <summary>
            300 MultipleChoices
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.MovedPermanently">
            <summary>
            301 MovedPermanently
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Found">
            <summary>
            302 Found
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.SeeOther">
            <summary>
            303 SeeOther
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NotModified">
            <summary>
            304 NotModified
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.UseProxy">
            <summary>
            305 UseProxy
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.SwitchProxy">
            <summary>
            306 SwitchProxy
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.TemporaryRedirect">
            <summary>
            307 TemporaryRedirect
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.ResumeIncomplete">
            <summary>
            308 ResumeIncomplete
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.BadRequest">
            <summary>
            400 BadRequest
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Unauthorized">
            <summary>
            401 Unauthorized
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.PaymentRequired">
            <summary>
            402 PaymentRequired
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Forbidden">
            <summary>
            403 Forbidden
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NotFound">
            <summary>
            404 NotFound
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.MethodNotAllowed">
            <summary>
            405 MethodNotAllowed
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NotAcceptable">
            <summary>
            406 NotAcceptable
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.ProxyAuthenticationRequired">
            <summary>
            407 ProxyAuthenticationRequired
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.RequestTimeout">
            <summary>
            408 RequestTimeout
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Conflict">
            <summary>
            409 Conflict
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Gone">
            <summary>
            410 Gone
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.LengthRequired">
            <summary>
            411 LengthRequired
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.PreconditionFailed">
            <summary>
            412 PreconditionFailed
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.RequestEntityTooLarge">
            <summary>
            413 RequestEntityTooLarge
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.RequestUriTooLong">
            <summary>
            414 RequestUriTooLong
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.UnsupportedMediaType">
            <summary>
            415 UnsupportedMediaType
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.RequestedRangeNotSatisfiable">
            <summary>
            416 RequestedRangeNotSatisfiable
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.ExpectationFailed">
            <summary>
            417 ExpectationFailed
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.ImATeapot">
            <summary>
            418 ImATeapot
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.EnhanceYourCalm">
            <summary>
            420 Enhance Your Calm
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.UnprocessableEntity">
            <summary>
            422 UnprocessableEntity
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.Locked">
            <summary>
            423 Locked
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.FailedDependency">
            <summary>
            424 FailedDependency
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.UnorderedCollection">
            <summary>
            425 UnorderedCollection
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.UpgradeRequired">
            <summary>
            426 UpgradeRequired
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.TooManyRequests">
            <summary>
            429 Too Many Requests
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NoResponse">
            <summary>
            444 NoResponse
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.RetryWith">
            <summary>
            449 RetryWith
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.BlockedByWindowsParentalControls">
            <summary>
            450 BlockedByWindowsParentalControls
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.ClientClosedRequest">
            <summary>
            499 ClientClosedRequest
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.InternalServerError">
            <summary>
            500 InternalServerError
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NotImplemented">
            <summary>
            501 NotImplemented
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.BadGateway">
            <summary>
            502 BadGateway
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.ServiceUnavailable">
            <summary>
            503 ServiceUnavailable
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.GatewayTimeout">
            <summary>
            504 GatewayTimeout
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.HttpVersionNotSupported">
            <summary>
            505 HttpVersionNotSupported
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.VariantAlsoNegotiates">
            <summary>
            506 VariantAlsoNegotiates
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.InsufficientStorage">
            <summary>
            507 InsufficientStorage
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.BandwidthLimitExceeded">
            <summary>
            509 BandwidthLimitExceeded
            </summary>
        </member>
        <member name="F:Nancy.HttpStatusCode.NotExtended">
            <summary>
            510 NotExtended
            </summary>
        </member>
        <member name="T:Nancy.IResponseFormatter">
            <summary>
            An extension point for adding support for formatting response contents. No members should be added to this interface without good reason.
            </summary>
            <remarks>Extension methods to this interface should always return <see cref="T:Nancy.Response"/> or one of the types that can implicitly be types into a <see cref="T:Nancy.Response"/>.</remarks>
        </member>
        <member name="P:Nancy.IResponseFormatter.Serializers">
            <summary>
            Gets all serializers currently registered
            </summary>
        </member>
        <member name="P:Nancy.IResponseFormatter.Context">
            <summary>
            Gets the context for which the response is being formatted.
            </summary>
            <value>A <see cref="T:Nancy.NancyContext"/> instance.</value>
        </member>
        <member name="P:Nancy.IResponseFormatter.RootPath">
            <summary>
            Gets the root path of the application.
            </summary>
            <value>A <see cref="T:System.String"/> containing the root path.</value>
        </member>
        <member name="M:Nancy.Json.Json.IsJsonContentType(System.String)">
            <summary>
            Attempts to detect if the content type is JSON.
            Supports:
              application/json
              text/json
              application/vnd[something]+json
            Matches are case insensitive to try and be as "accepting" as possible.
            </summary>
            <param name="contentType">Request content type</param>
            <returns>True if content type is JSON, false otherwise</returns>
        </member>
        <member name="M:Nancy.Helpers.ReflectionUtils.GetTypedListItemType(System.Type)">
            <summary>
            Gets the type of the typed list's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed list's items.</returns>
        </member>
        <member name="M:Nancy.Helpers.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nancy.Helpers.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nancy.Helpers.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Nancy.Helpers.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Nancy.Helpers.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nancy.Helpers.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Nancy.ModelBinding.BindingContext">
            <summary>
            Model binding context object
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.Configuration">
            <summary>
            The binding configuration
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.Context">
            <summary>
            Current Nancy context
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.DestinationType">
            <summary>
            Binding destination type
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.GenericType">
            <summary>
            The generic type of a collection is only used when DestinationType is a enumerable.
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.Model">
            <summary>
            The current model object (or null for body deserialization)
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.ValidModelBindingMembers">
            <summary>
            DestinationType properties that are not black listed
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.RequestData">
            <summary>
            The incoming data fields
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingContext.TypeConverters">
            <summary>
            Available type converters - user converters followed by any defaults
            </summary>
        </member>
        <member name="T:Nancy.ModelBinding.BindingDefaults">
            <summary>
            Provides default binding converters/deserializers
            The defaults have less precedence than any user supplied ones 
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.BindingDefaults.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ModelBinding.BindingDefaults"/> class.
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingDefaults.DefaultTypeConverters">
            <summary>
            Gets the default type converters
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.BindingDefaults.DefaultBodyDeserializers">
            <summary>
            Gets the default type converters
            </summary>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultBinder">
            <summary>
            Default binder - used as a fallback when a specific modelbinder
            is not available.
            </summary>
        </member>
        <member name="T:Nancy.ModelBinding.IBinder">
            <summary>
            Binds incoming request data to a model type
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.IBinder.Bind(Nancy.NancyContext,System.Type,System.Object,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Bind to the given model type
            </summary>
            <param name="context">Current context</param>
            <param name="modelType">Model type to bind to</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blackList">Blacklisted property names</param>
            <param name="instance">Existing instance of the object</param>
            <returns>Bound model</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultBinder.Bind(Nancy.NancyContext,System.Type,System.Object,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Bind to the given model type
            </summary>
            <param name="context">Current context</param>
            <param name="modelType">Model type to bind to</param>
            <param name="instance">Optional existing instance</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blackList">Blacklisted binding property names</param>
            <returns>Bound model</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultBinder.GetBindingListInstanceCount(Nancy.NancyContext)">
             <summary>
             Gets the number of distinct indexes from context:
            
             i.e:
              IntProperty_5
              StringProperty_5
              IntProperty_7
              StringProperty_8
              You'll end up with a list of 3 matches: 5,7,8
             
             </summary>
             <param name="context">Current Context </param>
             <returns>An int containing the number of elements</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultBodyDeserializers.JsonBodyDeserializer">
            <summary>
            Deserializes request bodies in JSON format
            </summary>
        </member>
        <member name="T:Nancy.ModelBinding.IBodyDeserializer">
            <summary>
            Provides a way to deserialize the contents of a request
            into a bound model.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.IBodyDeserializer.CanDeserialize(System.String,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the deserializer can deserialize the content type
            </summary>
            <param name="contentType">Content type to deserialize</param>
            <param name="context">Current <see cref="T:Nancy.ModelBinding.BindingContext"/>.</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.IBodyDeserializer.Deserialize(System.String,System.IO.Stream,Nancy.ModelBinding.BindingContext)">
            <summary>
            Deserialize the request body to a model
            </summary>
            <param name="contentType">Content type to deserialize</param>
            <param name="bodyStream">Request body stream</param>
            <param name="context">Current <see cref="T:Nancy.ModelBinding.BindingContext"/>.</param>
            <returns>Model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultBodyDeserializers.JsonBodyDeserializer.CanDeserialize(System.String,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the deserializer can deserialize the content type
            </summary>
            <param name="contentType">Content type to deserialize</param>
            <param name="context">Current <see cref="T:Nancy.ModelBinding.BindingContext"/>.</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultBodyDeserializers.JsonBodyDeserializer.Deserialize(System.String,System.IO.Stream,Nancy.ModelBinding.BindingContext)">
            <summary>
            Deserialize the request body to a model
            </summary>
            <param name="contentType">Content type to deserialize</param>
            <param name="bodyStream">Request body stream</param>
            <param name="context">Current context</param>
            <returns>Model instance</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultBodyDeserializers.XmlBodyDeserializer">
            <summary>
            Deserializes request bodies in XML format
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultBodyDeserializers.XmlBodyDeserializer.CanDeserialize(System.String,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the deserializer can deserialize the content type
            </summary>
            <param name="contentType">Content type to deserialize</param>
            <param name="context">Current <see cref="T:Nancy.ModelBinding.BindingContext"/>.</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultBodyDeserializers.XmlBodyDeserializer.Deserialize(System.String,System.IO.Stream,Nancy.ModelBinding.BindingContext)">
            <summary>
            Deserialize the request body to a model
            </summary>
            <param name="contentType">Content type to deserialize</param>
            <param name="bodyStream">Request body stream</param>
            <param name="context">Current <see cref="T:Nancy.ModelBinding.BindingContext"/>.</param>
            <returns>Model instance</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultConverters.CollectionConverter">
            <summary>
            Converter for handling enumerable types
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.CollectionConverter.CanConvertTo(System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the converter can convert to the destination type
            </summary>
            <param name="destinationType">Destination type</param>
            <param name="context">The current binding context</param>
            <returns>True if conversion supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.CollectionConverter.Convert(System.String,System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Convert the string representation to the destination type
            </summary>
            <param name="input">Input string</param>
            <param name="destinationType">Destination type</param>
            <param name="context">Current context</param>
            <returns>Converted object of the destination type</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultConverters.FallbackConverter">
            <summary>
            A fallback converter that uses TypeDescriptor.GetConverter to try
            and convert the value.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.FallbackConverter.CanConvertTo(System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Whether the converter can convert to the destination type
            </summary>
            <param name="destinationType">Destination type</param>
            <param name="context">The current binding context</param>
            <returns>True if conversion supported, false otherwise</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultConverters.FallbackConverter.Convert(System.String,System.Type,Nancy.ModelBinding.BindingContext)">
            <summary>
            Convert the string representation to the destination type
            </summary>
            <param name="input">Input string</param>
            <param name="destinationType">Destination type</param>
            <param name="context">Current context</param>
            <returns>Converted object of the destination type</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultFieldNameConverter">
            <summary>
            Default field name converter
            Converts camel case to pascal case
            </summary>
        </member>
        <member name="T:Nancy.ModelBinding.IFieldNameConverter">
            <summary>
            Provides the capability to supply a convention to
            convert form field names to property names if required.
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.IFieldNameConverter.Convert(System.String)">
            <summary>
            Converts a field name to a property name
            </summary>
            <param name="fieldName">Field name</param>
            <returns>Property name</returns>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultFieldNameConverter.Convert(System.String)">
            <summary>
            Converts a field name to a property name
            </summary>
            <param name="fieldName">Field name</param>
            <returns>Property name</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DynamicModelBinderAdapter">
            <summary>
            Provides wiring up of a model binder when cast to a destination type
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DynamicModelBinderAdapter.#ctor(Nancy.ModelBinding.IModelBinderLocator,Nancy.NancyContext,System.Object,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ModelBinding.DynamicModelBinderAdapter"/> class.
            </summary>
            <param name="locator">Model binder locator</param>
            <param name="context">Nancy context</param>
            <param name="instance">Optional existing instance, or null</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Blacklisted property names</param>
        </member>
        <member name="M:Nancy.ModelBinding.DynamicModelBinderAdapter.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
            <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Type returns the <see cref="T:System.String"/> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param><param name="result">The result of the type conversion operation.</param>
        </member>
        <member name="T:Nancy.ModelBinding.IModelBinder">
            <summary>
            Provides a way to bind an incoming request, via the context, to a model type
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.IModelBinder.CanBind(System.Type)">
            <summary>
            Whether the binder can bind to the given model type
            </summary>
            <param name="modelType">Required model type</param>
            <returns>True if binding is possible, false otherwise</returns>
        </member>
        <member name="T:Nancy.ModelBinding.IModelBinderLocator">
            <summary>
            Locates model binders for a particular model
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.IModelBinderLocator.GetBinderForType(System.Type,Nancy.NancyContext)">
            <summary>
            Gets a binder for the given type
            </summary>
            <param name="modelType">Destination type to bind to</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance of the current request.</param>
            <returns>IModelBinder instance or null if none found</returns>
        </member>
        <member name="T:Nancy.ModelBinding.DefaultModelBinderLocator">
            <summary>
            Locates model binders for a particular model
            </summary>
        </member>
        <member name="F:Nancy.ModelBinding.DefaultModelBinderLocator.binders">
            <summary>
            Available model binders
            </summary>
        </member>
        <member name="F:Nancy.ModelBinding.DefaultModelBinderLocator.fallbackBinder">
            <summary>
            Default model binder to fall back on
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultModelBinderLocator.#ctor(System.Collections.Generic.IEnumerable{Nancy.ModelBinding.IModelBinder},Nancy.ModelBinding.IBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ModelBinding.DefaultModelBinderLocator"/> class.
            </summary>
            <param name="binders">Available model binders</param>
            <param name="fallbackBinder">Fallback binder</param>
        </member>
        <member name="M:Nancy.ModelBinding.DefaultModelBinderLocator.GetBinderForType(System.Type,Nancy.NancyContext)">
            <summary>
            Gets a binder for the given type
            </summary>
            <param name="modelType">Destination type to bind to</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance of the current request.</param>
            <returns>IModelBinder instance or null if none found</returns>
        </member>
        <member name="T:Nancy.ModelBinding.ModelBindingException">
            <summary>
            Represents an exception when attempting to bind to a model
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.ModelBindingException.#ctor(System.Type,System.Collections.Generic.IEnumerable{Nancy.ModelBinding.PropertyBindingException})">
            <summary>
            Initializes a new instance of the ModelBindingException class with a specified model type,
            property name and the original exception, which caused the problem
            </summary>
            <param name="boundType">the model type to bind to</param>
            <param name="propertyBindingExceptions">the original exceptions, thrown while binding the property</param>
        </member>
        <member name="P:Nancy.ModelBinding.ModelBindingException.PropertyBindingExceptions">
            <summary>
            Gets all failures
            </summary>
        </member>
        <member name="P:Nancy.ModelBinding.ModelBindingException.BoundType">
            <summary>
            Gets the model type, which caused the exception
            </summary>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.ParseBlacklistedPropertiesExpressionTree``1(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Parses an array of expressions like <code>t =&gt; t.Property</code> to a list of strings containing the property names;
            </summary>
            <typeparam name="T">Type of the model</typeparam>
            <param name="expressions">Expressions that tell which property should be ignored</param>
            <returns>Array of strings containing the names of the properties.</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind(Nancy.INancyModule,System.String[])">
            <summary>
            Bind the incoming request to a model
            </summary>
            <param name="module">Current module</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <returns>Model adapter - cast to a model type to bind it</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Bind the incoming request to a model
            </summary>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <returns>Model adapter - cast to a model type to bind it</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind``1(Nancy.INancyModule)">
            <summary>
            Bind the incoming request to a model
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <returns>Bound model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind``1(Nancy.INancyModule,System.String[])">
            <summary>
            Bind the incoming request to a model
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <returns>Bound model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind``1(Nancy.INancyModule,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to a model
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
            <returns>Bound model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindAndValidate``1(Nancy.INancyModule,System.String[])">
            <summary>
            Bind the incoming request to a model and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <returns>Bound model instance</returns>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindAndValidate``1(Nancy.INancyModule,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to a model and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
            <returns>Bound model instance</returns>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindAndValidate``1(Nancy.INancyModule)">
            <summary>
            Bind the incoming request to a model and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <returns>Bound model instance</returns>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind``1(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig)">
            <summary>
            Bind the incoming request to a model
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <returns>Bound model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind``1(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Bind the incoming request to a model
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <returns>Bound model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind``1(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Bind the incoming request to a model
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperty">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
            <returns>Bound model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.Bind``1(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to a model
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
            <returns>Bound model instance</returns>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindAndValidate``1(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Bind the incoming request to a model and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <returns>Bound model instance</returns>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindAndValidate``1(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to a model and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
            <returns>Bound model instance</returns>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindAndValidate``1(Nancy.INancyModule,Nancy.ModelBinding.BindingConfig)">
            <summary>
            Bind the incoming request to a model and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <returns>Bound model instance</returns>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindTo``1(Nancy.INancyModule,``0,System.String[])">
            <summary>
            Bind the incoming request to an existing instance
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindTo``1(Nancy.INancyModule,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to an existing instance
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindTo``1(Nancy.INancyModule,``0)">
            <summary>
            Bind the incoming request to an existing instance
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindToAndValidate``1(Nancy.INancyModule,``0,System.String[])">
            <summary>
            Bind the incoming request to an existing instance and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindToAndValidate``1(Nancy.INancyModule,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to an existing instance and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindToAndValidate``1(Nancy.INancyModule,``0)">
            <summary>
            Bind the incoming request to an existing instance and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindTo``1(Nancy.INancyModule,``0,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Bind the incoming request to an existing instance
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindTo``1(Nancy.INancyModule,``0,Nancy.ModelBinding.BindingConfig,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to an existing instance
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindTo``1(Nancy.INancyModule,``0,Nancy.ModelBinding.BindingConfig)">
            <summary>
            Bind the incoming request to an existing instance
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindToAndValidate``1(Nancy.INancyModule,``0,Nancy.ModelBinding.BindingConfig,System.String[])">
            <summary>
            Bind the incoming request to an existing instance and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Property names to blacklist from binding</param>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindToAndValidate``1(Nancy.INancyModule,``0,Nancy.ModelBinding.BindingConfig,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Bind the incoming request to an existing instance and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
            <example>this.BindToAndValidate(person, config, p =&gt; p.Name, p =&gt; p.Age)</example>
        </member>
        <member name="M:Nancy.ModelBinding.ModuleExtensions.BindToAndValidate``1(Nancy.INancyModule,``0,Nancy.ModelBinding.BindingConfig)">
            <summary>
            Bind the incoming request to an existing instance and validate
            </summary>
            <typeparam name="TModel">Model type</typeparam>
            <param name="module">Current module</param>
            <param name="instance">The class instance to bind properties to</param>
            <param name="configuration">The <see cref="T:Nancy.ModelBinding.BindingConfig"/> that should be applied during binding.</param>
            <remarks><see cref="T:Nancy.Validation.ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
        </member>
        <member name="T:Nancy.NancyContext">
            <summary>
            Nancy context.
            </summary>
        </member>
        <member name="M:Nancy.NancyContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.NancyContext"/> class.
            </summary>
        </member>
        <member name="M:Nancy.NancyContext.Dispose">
            <summary>
            Disposes any disposable items in the <see cref="P:Nancy.NancyContext.Items"/> dictionary.
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Items">
            <summary>
            Gets the dictionary for storage of per-request items. Disposable items will be disposed when the context is.
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.ResolvedRoute">
            <summary>
            Gets or sets the resolved route
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Parameters">
            <summary>
            Gets or sets the parameters for the resolved route
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Request">
            <summary>
            Gets or sets the incoming request
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Response">
            <summary>
            Gets or sets the outgoing response
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.CurrentUser">
            <summary>
            Gets or sets the current user
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Trace">
            <summary>
            Diagnostic request tracing
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.ControlPanelEnabled">
            <summary>
            Gets a value indicating whether control panel access is enabled for this request
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.ViewBag">
            <summary>
            Non-model specific data for rendering in the response
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.ModelValidationResult">
            <summary>
            Gets or sets the model validation result.
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Culture">
            <summary>
            Gets or sets the context's culture
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.NegotiationContext">
            <summary>
            Context of content negotiation (if relevant)
            </summary>
        </member>
        <member name="P:Nancy.NancyContext.Text">
            <summary>
            Gets or sets the dynamic object used to locate text resources.
            </summary>
        </member>
        <member name="M:Nancy.AfterPipeline.Wrap(Nancy.PipelineItem{System.Action{Nancy.NancyContext}})">
            <summary>
            Wraps a sync delegate into it's async form
            </summary>
            <param name="pipelineItem">Sync pipeline item instance</param>
            <returns>Async pipeline item instance</returns>
        </member>
        <member name="M:Nancy.BeforePipeline.Wrap(Nancy.PipelineItem{System.Func{Nancy.NancyContext,Nancy.Response}})">
            <summary>
            Wraps a sync delegate into it's async form
            </summary>
            <param name="pipelineItem">Sync pipeline item instance</param>
            <returns>Async pipeline item instance</returns>
        </member>
        <member name="T:Nancy.DefaultResponseFormatter">
            <summary>
            The default implementation of the <see cref="T:Nancy.IResponseFormatter"/> interface.
            </summary>
        </member>
        <member name="M:Nancy.DefaultResponseFormatter.#ctor(Nancy.IRootPathProvider,Nancy.NancyContext,System.Collections.Generic.IEnumerable{Nancy.ISerializer})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.DefaultResponseFormatter"/> class.
            </summary>
            <param name="rootPathProvider">The <see cref="T:Nancy.IRootPathProvider"/> that should be used by the instance.</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> that should be used by the instance.</param>
        </member>
        <member name="P:Nancy.DefaultResponseFormatter.Serializers">
            <summary>
            Gets all serializers currently registered
            </summary>
        </member>
        <member name="P:Nancy.DefaultResponseFormatter.Context">
            <summary>
            Gets the context for which the response is being formatted.
            </summary>
            <value>A <see cref="T:Nancy.NancyContext"/> instance.</value>
        </member>
        <member name="P:Nancy.DefaultResponseFormatter.RootPath">
            <summary>
            Gets the root path of the application.
            </summary>
            <value>A <see cref="T:System.String"/> containing the root path.</value>
        </member>
        <member name="T:Nancy.IO.RequestStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> decorator that can handle moving the stream out from memory and on to disk when the contents reaches a certain length.
            </summary>
        </member>
        <member name="M:Nancy.IO.RequestStream.#ctor(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.IO.RequestStream"/> class.
            </summary>
            <param name="expectedLength">The expected length of the contents in the stream.</param>
            <param name="thresholdLength">The content length that will trigger the stream to be moved out of memory.</param>
            <param name="disableStreamSwitching">if set to <see langword="true"/> the stream will never explicitly be moved to disk.</param>
        </member>
        <member name="M:Nancy.IO.RequestStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.IO.RequestStream"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that should be handled by the request stream</param>
            <param name="expectedLength">The expected length of the contents in the stream.</param>
            <param name="disableStreamSwitching">if set to <see langword="true"/> the stream will never explicitly be moved to disk.</param>
        </member>
        <member name="M:Nancy.IO.RequestStream.#ctor(System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.IO.RequestStream"/> class.
            </summary>
            <param name="expectedLength">The expected length of the contents in the stream.</param>
            <param name="disableStreamSwitching">if set to <see langword="true"/> the stream will never explicitly be moved to disk.</param>
        </member>
        <member name="M:Nancy.IO.RequestStream.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.IO.RequestStream"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that should be handled by the request stream</param>
            <param name="expectedLength">The expected length of the contents in the stream.</param>
            <param name="thresholdLength">The content length that will trigger the stream to be moved out of memory.</param>
            <param name="disableStreamSwitching">if set to <see langword="true"/> the stream will never explicitly be moved to disk.</param>
        </member>
        <member name="M:Nancy.IO.RequestStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.</returns>
            <param name="buffer">The buffer to read the data into. </param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data read from the stream. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete. </param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param>
        </member>
        <member name="M:Nancy.IO.RequestStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous write, which could still be pending.</returns>
            <param name="buffer">The buffer to write data from. </param>
            <param name="offset">The byte offset in <paramref name="buffer"/> from which to begin writing. </param>
            <param name="count">The maximum number of bytes to write. </param>
            <param name="callback">An optional asynchronous callback, to be called when the write is complete. </param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
        </member>
        <member name="M:Nancy.IO.RequestStream.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete.
            </summary>
            <returns>
            The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.
            </returns>
            <param name="asyncResult">The reference to the pending asynchronous request to finish. </param>
        </member>
        <member name="M:Nancy.IO.RequestStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request. </param>
        </member>
        <member name="M:Nancy.IO.RequestStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Nancy.IO.RequestStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
        </member>
        <member name="M:Nancy.IO.RequestStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:Nancy.IO.RequestStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <returns>The new position within the current stream.</returns>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. </param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. </param>
        </member>
        <member name="M:Nancy.IO.RequestStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
            <exception cref="T:System.NotSupportedException">The stream does not support having it's length set.</exception>
            <remarks>This functionality is not supported by the <see cref="T:Nancy.IO.RequestStream"/> type and will always throw <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="M:Nancy.IO.RequestStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
        </member>
        <member name="P:Nancy.IO.RequestStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>Always returns <see langword="true"/>.</returns>
        </member>
        <member name="P:Nancy.IO.RequestStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>Always returns <see langword="true"/>.</returns>
        </member>
        <member name="P:Nancy.IO.RequestStream.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out.
            </summary>
            <returns>Always returns <see langword="false"/>.</returns>
        </member>
        <member name="P:Nancy.IO.RequestStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>Always returns <see langword="true"/>.</returns>
        </member>
        <member name="P:Nancy.IO.RequestStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:Nancy.IO.RequestStream.IsInMemory">
            <summary>
            Gets a value indicating whether the current stream is stored in memory.
            </summary>
            <value><see langword="true"/> if the stream is stored in memory; otherwise, <see langword="false"/>.</value>
            <remarks>The stream is moved to disk when either the length of the contents or expected content length exceeds the threshold specified in the constructor.</remarks>
        </member>
        <member name="P:Nancy.IO.RequestStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <returns>The current position within the stream.</returns>
        </member>
        <member name="T:Nancy.Responses.GenericFileResponse">
            <summary>
            A response representing a file.
            </summary>
            <remarks>If the response contains an invalid file (not found, empty name, missing extension and so on) the status code of the response will be set to <see cref="F:Nancy.HttpStatusCode.NotFound"/>.</remarks>
        </member>
        <member name="F:Nancy.Responses.GenericFileResponse.BufferSize">
            <summary>
             Size of buffer for transmitting file. Default size 4 Mb
            </summary>
        </member>
        <member name="M:Nancy.Responses.GenericFileResponse.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.GenericFileResponse"/> for the file specified
            by the <paramref name="filePath"/> parameter.
            </summary>
            <param name="filePath">The name of the file, including path relative to the root of the application, that should be returned.</param>
            <remarks>The <see cref="M:Nancy.MimeTypes.GetMimeType(System.String)"/> method will be used to determine the mimetype of the file and will be used as the content-type of the response. If no match if found the content-type will be set to application/octet-stream.</remarks>
        </member>
        <member name="M:Nancy.Responses.GenericFileResponse.#ctor(System.String,Nancy.NancyContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.GenericFileResponse"/> for the file specified
            by the <paramref name="filePath"/> parameter.
            </summary>
            <param name="filePath">The name of the file, including path relative to the root of the application, that should be returned.</param>
            <remarks>The <see cref="M:Nancy.MimeTypes.GetMimeType(System.String)"/> method will be used to determine the mimetype of the file and will be used as the content-type of the response. If no match if found the content-type will be set to application/octet-stream.</remarks>
            <param name="context">Current context</param>
        </member>
        <member name="M:Nancy.Responses.GenericFileResponse.#ctor(System.String,System.String,Nancy.NancyContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.GenericFileResponse"/> for the file specified
            by the <paramref name="filePath"/> parameter and the content-type specified by the <paramref name="contentType"/> parameter.
            </summary>
            <param name="filePath">The name of the file, including path relative to the root of the application, that should be returned.</param>
            <param name="contentType">The content-type of the response.</param>
            <param name="context">Current context</param>
        </member>
        <member name="P:Nancy.Responses.GenericFileResponse.SafePaths">
            <summary>
            Represents a list of "base paths" where it is safe to
            serve files from.
            Attempting to server a file outside of these safe paths
            will fail with a 404.
            </summary>
        </member>
        <member name="P:Nancy.Responses.GenericFileResponse.Filename">
            <summary>
            Gets the filename of the file response
            </summary>
            <value>A string containing the name of the file.</value>
        </member>
        <member name="T:Nancy.Responses.RedirectResponse">
            <summary>
            A response representing an HTTP redirect
            <seealso cref="M:Nancy.Extensions.ContextExtensions.ToFullPath(Nancy.NancyContext,System.String)"/>
            <seealso cref="M:Nancy.Extensions.ContextExtensions.GetRedirect(Nancy.NancyContext,System.String)"/>
            </summary>
        </member>
        <member name="M:Nancy.Responses.RedirectResponse.#ctor(System.String,Nancy.Responses.RedirectResponse.RedirectType)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Responses.RedirectResponse"/> class.
            </summary>
            <param name="location">Location to redirect to</param>
            <param name="type">Type of redirection to perform</param>
        </member>
        <member name="T:Nancy.Responses.RedirectResponse.RedirectType">
            <summary>
            Which type of redirect
            </summary>
        </member>
        <member name="F:Nancy.Responses.RedirectResponse.RedirectType.Permanent">
            <summary>
            HTTP 301 - All future requests should be to this URL
            </summary>
        </member>
        <member name="F:Nancy.Responses.RedirectResponse.RedirectType.Temporary">
            <summary>
            HTTP 307 - Redirect this request but allow future requests to the original URL
            </summary>
        </member>
        <member name="F:Nancy.Responses.RedirectResponse.RedirectType.SeeOther">
            <summary>
            HTTP 303 - Redirect this request using an HTTP GET
            </summary>
        </member>
        <member name="T:Nancy.Routing.DefaultNancyModuleBuilder">
            <summary>
            Default implementation for building a full configured <see cref="T:Nancy.INancyModule"/> instance.
            </summary>
        </member>
        <member name="M:Nancy.Routing.DefaultNancyModuleBuilder.#ctor(Nancy.ViewEngines.IViewFactory,Nancy.IResponseFormatterFactory,Nancy.ModelBinding.IModelBinderLocator,Nancy.Validation.IModelValidatorLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.DefaultNancyModuleBuilder"/> class.
            </summary>
            <param name="viewFactory">The <see cref="T:Nancy.ViewEngines.IViewFactory"/> instance that should be assigned to the module.</param>
            <param name="responseFormatterFactory">An <see cref="T:Nancy.IResponseFormatterFactory"/> instance that should be used to create a response formatter for the module.</param>
            <param name="modelBinderLocator">A <see cref="T:Nancy.ModelBinding.IModelBinderLocator"/> instance that should be assigned to the module.</param>
            <param name="validatorLocator">A <see cref="T:Nancy.Validation.IModelValidatorLocator"/> instance that should be assigned to the module.</param>
        </member>
        <member name="M:Nancy.Routing.DefaultNancyModuleBuilder.BuildModule(Nancy.INancyModule,Nancy.NancyContext)">
            <summary>
            Builds a fully configured <see cref="T:Nancy.INancyModule"/> instance, based upon the provided <paramref name="module"/>.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> that should be configured.</param>
            <param name="context">The current request context.</param>
            <returns>A fully configured <see cref="T:Nancy.INancyModule"/> instance.</returns>
        </member>
        <member name="T:Nancy.Routing.DefaultRouteCacheProvider">
             <summary>
             It's not safe for a module to take a dependency on the cache (cyclic dependency)
            
             We provide an IRouteCacheProvider instead - the default implementation uses
             TinyIoC'd Func based lazy factory.
             </summary>
        </member>
        <member name="T:Nancy.Routing.IRouteCacheProvider">
             <summary>
             It's not safe for a module to take a dependency on the cache (cyclic dependency)
            
             We provide an <see cref="T:Nancy.Routing.IRouteCacheProvider"/> instead.
            
             It is *not* safe to call GetCache() inside a NancyModule constructor, although that shouldn't be necessary anyway.
             </summary>
        </member>
        <member name="M:Nancy.Routing.IRouteCacheProvider.GetCache">
            <summary>
            Gets an instance of the route cache.
            </summary>
            <returns>An <see cref="T:Nancy.Routing.IRouteCache"/> instance.</returns>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteCacheProvider.#ctor(System.Func{Nancy.Routing.IRouteCache})">
            <summary>
            Initializes a new instance of the DefaultRouteCacheProvider class.
            </summary>
            <param name="routeCacheFactory"></param>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteCacheProvider.GetCache">
            <summary>
            Gets an instance of the route cache.
            </summary>
            <returns>An <see cref="T:Nancy.Routing.IRouteCache"/> instance.</returns>
        </member>
        <member name="P:Nancy.Routing.DefaultRouteCacheProvider.Name">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the provider.</value>
        </member>
        <member name="P:Nancy.Routing.DefaultRouteCacheProvider.Description">
            <summary>
            Gets the description of the provider.
            </summary>
            <value>A <see cref="T:System.String"/> containing the description of the provider.</value>
        </member>
        <member name="P:Nancy.Routing.DefaultRouteCacheProvider.DiagnosticObject">
            <summary>
            Gets the object that contains the interactive diagnostics methods.
            </summary>
            <value>An instance of the interactive diagnostics object.</value>
        </member>
        <member name="T:Nancy.Routing.DefaultRoutePatternMatcher">
            <summary>
            Default implementation of a route pattern matcher.
            </summary>
        </member>
        <member name="T:Nancy.Routing.IRoutePatternMatcher">
            <summary>
            Defined the functionality that is required by a route pattern matcher.
            </summary>
            <remarks>Implement this interface if you want to support a custom route syntax.</remarks>
        </member>
        <member name="M:Nancy.Routing.IRoutePatternMatcher.Match(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Nancy.NancyContext)">
            <summary>
            Attempts to match a requested path with a route pattern.
            </summary>
            <param name="requestedPath">The path that was requested.</param>
            <param name="routePath">The route pattern that the requested path should be attempted to be matched with.</param>
            <param name="segments"> </param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance for the current request.</param>
            <returns>An <see cref="T:Nancy.Routing.IRoutePatternMatchResult"/> instance, containing the outcome of the match.</returns>
        </member>
        <member name="M:Nancy.Routing.DefaultRoutePatternMatcher.Match(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Nancy.NancyContext)">
            <summary>
            Attempts to match a requested path with a route pattern.
            </summary>
            <param name="requestedPath">The path that was requested.</param>
            <param name="routePath">The route pattern that the requested path should be attempted to be matched with.</param>
            <param name="segments"></param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance for the current request.</param>
            <returns>An <see cref="T:Nancy.Routing.IRoutePatternMatchResult"/> instance, containing the outcome of the match.</returns>
        </member>
        <member name="T:Nancy.Routing.IRouteCache">
            <summary>
            Contains a cache of all routes registered in the system
            </summary>
        </member>
        <member name="M:Nancy.Routing.IRouteCache.IsEmpty">
            <summary>
            Gets a boolean value that indicates of the cache is empty or not.
            </summary>
            <returns><see langword="true"/> if the cache is empty, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Nancy.Routing.RouteCache">
            <summary>
            Caches information about all the available routes that was discovered by the bootstrapper.
            </summary>
        </member>
        <member name="M:Nancy.Routing.RouteCache.#ctor(Nancy.INancyModuleCatalog,Nancy.INancyContextFactory,Nancy.Routing.IRouteSegmentExtractor,Nancy.Routing.IRouteDescriptionProvider,Nancy.Culture.ICultureService,System.Collections.Generic.IEnumerable{Nancy.Routing.IRouteMetadataProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.RouteCache"/> class.
            </summary>
            <param name="moduleCatalog">The <see cref="T:Nancy.INancyModuleCatalog"/> that should be used by the cache.</param>
            <param name="contextFactory">The <see cref="T:Nancy.INancyContextFactory"/> that should be used to create a context instance.</param>
            <param name="routeSegmentExtractor"> </param>
            <param name="cultureService"></param>
            <param name="routeMetadataProviders"></param>
            <param name="routeDescriptionProvider"></param>
        </member>
        <member name="M:Nancy.Routing.RouteCache.IsEmpty">
            <summary>
            Gets a boolean value that indicates of the cache is empty or not.
            </summary>
            <returns><see langword="true"/> if the cache is empty, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Nancy.Routing.IRoutePatternMatchResult">
            <summary>
            Defines the functionality that is required by a route pattern match result.
            </summary>
        </member>
        <member name="P:Nancy.Routing.IRoutePatternMatchResult.Context">
            <summary>
            Gets the <see cref="T:Nancy.NancyContext"/> that was active when the result was produced.
            </summary>
            <value>A <see cref="T:Nancy.NancyContext"/> instance.</value>
        </member>
        <member name="P:Nancy.Routing.IRoutePatternMatchResult.IsMatch">
            <summary>
            Gets a value indicating whether or not a match was made.
            </summary>
            <value><see langword="true"/> if a match was made; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:Nancy.Routing.IRoutePatternMatchResult.Parameters">
            <summary>
            The parameters that could be captured in the route.
            </summary>
            <value>A <see cref="T:Nancy.DynamicDictionary"/> instance containing the captured parameters and values.</value>
            <remarks>Should be empty if <see cref="P:Nancy.Routing.IRoutePatternMatchResult.IsMatch"/> is <see langword="false"/>.</remarks>
        </member>
        <member name="T:Nancy.Routing.MethodNotAllowedRoute">
            <summary>
            Route that is returned when the path could be matched but it was for the wrong request method.
            </summary>
            <remarks>This is equal to sending back the 405 HTTP status code.</remarks>
        </member>
        <member name="M:Nancy.Routing.MethodNotAllowedRoute.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.MethodNotAllowedRoute"/> type, for the
            specified <paramref name="path"/>, <paramref name="method"/> and <paramref name="allowedMethods"/>.
            </summary>
            <param name="path">The path of the route.</param>
            <param name="method">The HTTP method of the route.</param>
            <param name="allowedMethods">The HTTP methods that can be used to invoke the route.</param>
        </member>
        <member name="T:Nancy.Routing.RouteDescription">
            <summary>
            Represents the various parts of a route lambda.
            </summary>
        </member>
        <member name="M:Nancy.Routing.RouteDescription.#ctor(System.String,System.String,System.String,System.Func{Nancy.NancyContext,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.RouteDescription"/> class.
            </summary>
            <param name="name">Route name</param>
            <param name="method">The request method of the route.</param>
            <param name="path">The path that the route will be invoked for.</param>
            <param name="condition">The condition that has to be fulfilled for the route to be a valid match.</param>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.Name">
            <summary>
            The name of the route
            </summary>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.Condition">
            <summary>
            The condition that has to be fulfilled inorder for the route to be a valid match.
            </summary>
            <value>A function that evaluates the condition when a <see cref="T:Nancy.NancyContext"/> instance is passed in.</value>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.Description">
            <summary>
            The description of what the route is for.
            </summary>
            <value>A <see cref="T:System.String"/> containing the description of the route.</value>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.Metadata">
            <summary>
            Gets or sets the metadata information for a route.
            </summary>
            <value>A <see cref="T:Nancy.Routing.RouteMetadata"/> instance.</value>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.Method">
            <summary>
            Gets the method of the route.
            </summary>
            <value>A <see cref="T:System.String"/> containing the method of the route.</value>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.Path">
            <summary>
            Gets the path that the route will be invoked for.
            </summary>
            <value>A <see cref="T:System.String"/> containing the path of the route.</value>
        </member>
        <member name="P:Nancy.Routing.RouteDescription.Segments">
            <summary>
            Gets or set the segments, for the route, that was returned by the <see cref="T:Nancy.Routing.IRouteSegmentExtractor"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, containing the segments for the route.</value>
        </member>
        <member name="T:Nancy.Routing.RoutePatternMatchResult">
            <summary>
            The default implementation of a route pattern matching result.
            </summary>
        </member>
        <member name="M:Nancy.Routing.RoutePatternMatchResult.#ctor(System.Boolean,Nancy.DynamicDictionary,Nancy.NancyContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.RoutePatternMatchResult"/> class.
            </summary>
            <param name="isMatch">A <see cref="T:System.Boolean"/> value indicating if the result was a match or not.</param>
            <param name="parameters">A <see cref="T:Nancy.DynamicDictionary"/> instance containing the parameters and values that was captured in the match.</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance of the current request.</param>
        </member>
        <member name="P:Nancy.Routing.RoutePatternMatchResult.Context">
            <summary>
            Gets the <see cref="T:Nancy.NancyContext"/> that was active when the result was produced.
            </summary>
            <value>A <see cref="T:Nancy.NancyContext"/> instance.</value>
        </member>
        <member name="P:Nancy.Routing.RoutePatternMatchResult.IsMatch">
            <summary>
            Gets a value indicating whether or not a match was made.
            </summary>
            <value><see langword="true"/> if a match was made; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:Nancy.Routing.RoutePatternMatchResult.Parameters">
            <summary>
            The parameters that could be captured in the route.
            </summary>
            <value>A <see cref="T:Nancy.DynamicDictionary"/> instance containing the captured parameters and values.</value>
            <remarks>Should be empty if <see cref="P:Nancy.Routing.IRoutePatternMatchResult.IsMatch"/> is <see langword="false"/>.</remarks>
        </member>
        <member name="T:Nancy.Security.ModuleSecurity">
            <summary>
            Some simple helpers give some nice authentication syntax in the modules.
            </summary>
        </member>
        <member name="M:Nancy.Security.ModuleSecurity.RequiresAuthentication(Nancy.INancyModule)">
            <summary>
            This module requires authentication
            </summary>
            <param name="module">Module to enable</param>
        </member>
        <member name="M:Nancy.Security.ModuleSecurity.RequiresClaims(Nancy.INancyModule,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This module requires authentication and certain claims to be present.
            </summary>
            <param name="module">Module to enable</param>
            <param name="requiredClaims">Claim(s) required</param>
        </member>
        <member name="M:Nancy.Security.ModuleSecurity.RequiresAnyClaim(Nancy.INancyModule,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This module requires authentication and any one of certain claims to be present.
            </summary>
            <param name="module">Module to enable</param>
            <param name="requiredClaims">Claim(s) required</param>
        </member>
        <member name="M:Nancy.Security.ModuleSecurity.RequiresValidatedClaims(Nancy.INancyModule,System.Func{System.Collections.Generic.IEnumerable{System.String},System.Boolean})">
            <summary>
            This module requires claims to be validated
            </summary>
            <param name="module">Module to enable</param>
            <param name="isValid">Claims validator</param>
        </member>
        <member name="M:Nancy.Security.ModuleSecurity.RequiresHttps(Nancy.INancyModule)">
            <summary>
            This module requires https.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> that requires HTTPS.</param>
        </member>
        <member name="M:Nancy.Security.ModuleSecurity.RequiresHttps(Nancy.INancyModule,System.Boolean)">
            <summary>
            This module requires https.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> that requires HTTPS.</param>
            <param name="redirect"><see langword="true"/> if the user should be redirected to HTTPS (no port number) if the incoming request was made using HTTP, otherwise <see langword="false"/> if <see cref="F:Nancy.HttpStatusCode.Forbidden"/> should be returned.</param>
        </member>
        <member name="M:Nancy.Security.ModuleSecurity.RequiresHttps(Nancy.INancyModule,System.Boolean,System.Int32)">
            <summary>
            This module requires https.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> that requires HTTPS.</param>
            <param name="redirect"><see langword="true"/> if the user should be redirected to HTTPS if the incoming request was made using HTTP, otherwise <see langword="false"/> if <see cref="F:Nancy.HttpStatusCode.Forbidden"/> should be returned.</param>
            <param name="httpsPort">The HTTPS port number to use</param>
        </member>
        <member name="T:Nancy.Security.SecurityHooks">
            <summary>
            Hooks to be used in a request pipeline.
            </summary>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.RequiresAuthentication">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure that
            the request was made by an authenticated user.
            </summary>
            <returns>Hook that returns an Unauthorized response if not authenticated in,
            null otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.RequiresClaims(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure
            that the request was made by an authenticated user having the required claims.
            </summary>
            <param name="claims">Claims the authenticated user needs to have</param>
            <returns>Hook that returns an Unauthorized response if the user is not
            authenticated or does not have the required claims, null otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.RequiresAnyClaim(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure
            that the request was made by an authenticated user having at least one of
            the required claims.
            </summary>
            <param name="claims">Claims the authenticated user needs to have at least one of</param>
            <returns>Hook that returns an Unauthorized response if the user is not
            authenticated or does not have at least one of the required claims, null
            otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.RequiresValidatedClaims(System.Func{System.Collections.Generic.IEnumerable{System.String},System.Boolean})">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure
            that the request was made by an authenticated user whose claims satisfy the
            supplied validation function.
            </summary>
            <param name="isValid">Validation function to be called with the authenticated
            users claims</param>
            <returns>Hook that returns an Unauthorized response if the user is not
            authenticated or does not pass the supplied validation function, null
            otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.UnauthorizedIfNot(System.Func{Nancy.NancyContext,System.Boolean})">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure that
            the request satisfies a specific test.
            </summary>
            <param name="test">Test that must return true for the request to continue</param>
            <returns>Hook that returns an Unauthorized response if the test fails, null otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.ForbiddenIfNot(System.Func{Nancy.NancyContext,System.Boolean})">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure that
            the request satisfies a specific test.
            </summary>
            <param name="test">Test that must return true for the request to continue</param>
            <returns>Hook that returns an Forbidden response if the test fails, null otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.HttpStatusCodeIfNot(Nancy.HttpStatusCode,System.Func{Nancy.NancyContext,System.Boolean})">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure that
            the request satisfies a specific test.
            </summary>
            <param name="statusCode">HttpStatusCode to use for the response</param>
            <param name="test">Test that must return true for the request to continue</param>
            <returns>Hook that returns a response with a specific HttpStatusCode if the test fails, null otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.RequiresHttps(System.Boolean)">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure that
            the resource is served over HTTPS
            </summary>
            <param name="redirect"><see langword="true"/> if the user should be redirected to HTTPS (no port number) if the incoming request was made using HTTP, otherwise <see langword="false"/> if <see cref="F:Nancy.HttpStatusCode.Forbidden"/> should be returned.</param>
            <returns>Hook that returns a RedirectResponse with the Url scheme set to HTTPS,
            or a Response with a Forbidden HTTP status code if <c>redirect</c> is false or the method is not GET,
            null otherwise</returns>
        </member>
        <member name="M:Nancy.Security.SecurityHooks.RequiresHttps(System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Creates a hook to be used in a pipeline before a route handler to ensure that
            the resource is served over HTTPS
            </summary>
            <param name="redirect"><see langword="true"/> if the user should be redirected to HTTPS (no port number) if the incoming request was made using HTTP, otherwise <see langword="false"/> if <see cref="F:Nancy.HttpStatusCode.Forbidden"/> should be returned.</param>
            <param name="httpsPort">The HTTPS port number to use</param>
            <returns>Hook that returns a <see cref="T:Nancy.Responses.RedirectResponse"/> with the Url scheme set to HTTPS,
            or a <see cref="T:Nancy.Response"/> with a <see cref="F:Nancy.HttpStatusCode.Forbidden"/> status code if <c>redirect</c> is false or the method is not GET,
            null otherwise</returns>
        </member>
        <member name="T:Nancy.Security.UserIdentityExtensions">
            <summary>
            Extension methods for working with IUserIdentity.
            </summary>
        </member>
        <member name="M:Nancy.Security.UserIdentityExtensions.IsAuthenticated(Nancy.Security.IUserIdentity)">
            <summary>
            Tests if the user is authenticated.
            </summary>
            <param name="user">User to be verified</param>
            <returns>True if the user is authenticated, false otherwise</returns>
        </member>
        <member name="M:Nancy.Security.UserIdentityExtensions.HasClaim(Nancy.Security.IUserIdentity,System.String)">
            <summary>
            Tests if the user has a required claim.
            </summary>
            <param name="user">User to be verified</param>
            <param name="requiredClaim">Claim the user needs to have</param>
            <returns>True if the user has the required claim, false otherwise</returns>
        </member>
        <member name="M:Nancy.Security.UserIdentityExtensions.HasClaims(Nancy.Security.IUserIdentity,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests if the user has all of the required claims.
            </summary>
            <param name="user">User to be verified</param>
            <param name="requiredClaims">Claims the user needs to have</param>
            <returns>True if the user has all of the required claims, false otherwise</returns>
        </member>
        <member name="M:Nancy.Security.UserIdentityExtensions.HasAnyClaim(Nancy.Security.IUserIdentity,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests if the user has at least one of the required claims.
            </summary>
            <param name="user">User to be verified</param>
            <param name="requiredClaims">Claims the user needs to have at least one of</param>
            <returns>True if the user has at least one of the required claims, false otherwise</returns>
        </member>
        <member name="M:Nancy.Security.UserIdentityExtensions.HasValidClaims(Nancy.Security.IUserIdentity,System.Func{System.Collections.Generic.IEnumerable{System.String},System.Boolean})">
            <summary>
            Tests if the user has claims that satisfy the supplied validation function.
            </summary>
            <param name="user">User to be verified</param>
            <param name="isValid">Validation function to be called with the authenticated
            users claims</param>
            <returns>True if the user does pass the supplied validation function, false otherwise</returns>
        </member>
        <member name="T:Nancy.Session.CookieBasedSessions">
            <summary>
            Cookie based session storage
            </summary>
        </member>
        <member name="T:Nancy.IObjectSerializerSelector">
            <summary>
            Allows setting of the serializer for session object storage
            </summary>
        </member>
        <member name="M:Nancy.IObjectSerializerSelector.WithSerializer(Nancy.IObjectSerializer)">
            <summary>
            Using the specified serializer
            </summary>
            <param name="newSerializer">Serializer to use</param>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.#ctor(Nancy.Cryptography.IEncryptionProvider,Nancy.Cryptography.IHmacProvider,Nancy.IObjectSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Session.CookieBasedSessions"/> class.
            </summary>
            <param name="encryptionProvider">The encryption provider.</param>
            <param name="hmacProvider">The hmac provider</param>
            <param name="objectSerializer">Session object serializer to use</param>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.#ctor(Nancy.Session.CookieBasedSessionsConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Session.CookieBasedSessions"/> class.
            </summary>
            <param name="configuration">Cookie based sessions configuration.</param>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.Enable(Nancy.Bootstrapper.IPipelines,Nancy.Session.CookieBasedSessionsConfiguration)">
            <summary>
            Initialise and add cookie based session hooks to the application pipeline
            </summary>
            <param name="pipelines">Application pipelines</param>
            <param name="configuration">Cookie based sessions configuration.</param>
            <returns>Formatter selector for choosing a non-default serializer</returns>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.Enable(Nancy.Bootstrapper.IPipelines,Nancy.Cryptography.CryptographyConfiguration)">
            <summary>
            Initialise and add cookie based session hooks to the application pipeline
            </summary>
            <param name="pipelines">Application pipelines</param>
            <param name="cryptographyConfiguration">Cryptography configuration</param>
            <returns>Formatter selector for choosing a non-default serializer</returns>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.Enable(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Initialise and add cookie based session hooks to the application pipeline with the default encryption provider.
            </summary>
            <param name="pipelines">Application pipelines</param>
            <returns>Formatter selector for choosing a non-default serializer</returns>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.WithSerializer(Nancy.IObjectSerializer)">
            <summary>
            Using the specified serializer
            </summary>
            <param name="newSerializer">Formatter to use</param>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.Save(Nancy.Session.ISession,Nancy.Response)">
            <summary>
            Save the session into the response
            </summary>
            <param name="session">Session to save</param>
            <param name="response">Response to save into</param>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.Load(Nancy.Request)">
            <summary>
            Loads the session from the request
            </summary>
            <param name="request">Request to load from</param>
            <returns>ISession containing the load session values</returns>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.SaveSession(Nancy.NancyContext,Nancy.Session.CookieBasedSessions)">
            <summary>
            Saves the request session into the response
            </summary>
            <param name="context">Nancy context</param>
            <param name="sessionStore">Session store</param>
        </member>
        <member name="M:Nancy.Session.CookieBasedSessions.LoadSession(Nancy.NancyContext,Nancy.Session.CookieBasedSessions)">
            <summary>
            Loads the request session
            </summary>
            <param name="context">Nancy context</param>
            <param name="sessionStore">Session store</param>
            <returns>Always returns null</returns>
        </member>
        <member name="P:Nancy.Session.CookieBasedSessions.CookieName">
            <summary>
            Gets the cookie name that the session is stored in
            </summary>
            <value>Cookie name</value>
        </member>
        <member name="T:Nancy.Cryptography.RijndaelEncryptionProvider">
            <summary>
            Default encryption provider using Rijndael
            </summary>
        </member>
        <member name="M:Nancy.Cryptography.RijndaelEncryptionProvider.#ctor(Nancy.Cryptography.IKeyGenerator)">
            <summary>
            Creates a new instance of the RijndaelEncryptionProvider class
            </summary>
            <param name="keyGenerator">Key generator to use to generate the key and iv</param>
        </member>
        <member name="M:Nancy.Cryptography.RijndaelEncryptionProvider.Encrypt(System.String)">
            <summary>
            Encrypt data
            </summary>
            <param name="data">Data to encrypt</param>
            <returns>Encrypted string</returns>
        </member>
        <member name="M:Nancy.Cryptography.RijndaelEncryptionProvider.Decrypt(System.String)">
            <summary>
            Decrypt string
            </summary>
            <param name="data">Data to decrypt</param>
            <returns>Decrypted string</returns>
        </member>
        <member name="T:Nancy.IObjectSerializer">
            <summary>
            De/Serialisation for cookie objects
            </summary>
        </member>
        <member name="M:Nancy.IObjectSerializer.Serialize(System.Object)">
            <summary>
            Serialize an object
            </summary>
            <param name="sourceObject">Source object</param>
            <returns>Serialised object string</returns>
        </member>
        <member name="M:Nancy.IObjectSerializer.Deserialize(System.String)">
            <summary>
            Deserialize an object string
            </summary>
            <param name="sourceString">Source object string</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Nancy.DefaultObjectSerializer.Serialize(System.Object)">
            <summary>
            Serialize an object
            </summary>
            <param name="sourceObject">Source object</param>
            <returns>Serialised object string</returns>
        </member>
        <member name="M:Nancy.DefaultObjectSerializer.Deserialize(System.String)">
            <summary>
            Deserialize an object string
            </summary>
            <param name="sourceString">Source object string</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:Nancy.Session.ISession">
            <summary>
            Defines the interface for a session
            </summary>
        </member>
        <member name="M:Nancy.Session.ISession.DeleteAll">
            <summary>
            Deletes the session and all associated information
            </summary>
        </member>
        <member name="M:Nancy.Session.ISession.Delete(System.String)">
            <summary>
            Deletes the specific key from the session
            </summary>
        </member>
        <member name="P:Nancy.Session.ISession.Count">
            <summary>
            The number of session values
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nancy.Session.ISession.Item(System.String)">
            <summary>
            Retrieves the value from the session
            </summary>
        </member>
        <member name="M:Nancy.Session.NullSessionProvider.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nancy.Session.NullSessionProvider.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.Session.NullSessionProvider.DeleteAll">
            <summary>
            Deletes the session and all associated information
            </summary>
        </member>
        <member name="M:Nancy.Session.NullSessionProvider.Delete(System.String)">
            <summary>
            Deletes the specific key from the session
            </summary>
        </member>
        <member name="P:Nancy.Session.NullSessionProvider.Count">
            <summary>
            The number of session values
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nancy.Session.NullSessionProvider.Item(System.String)">
            <summary>
            Retrieves the value from the session
            </summary>
        </member>
        <member name="T:Nancy.Session.Session">
            <summary>
            Session implementation
            </summary>
        </member>
        <member name="M:Nancy.Session.Session.DeleteAll">
            <summary>
            Deletes all items
            </summary>
        </member>
        <member name="M:Nancy.Session.Session.Delete(System.String)">
            <summary>
            Delete an item with the given key
            </summary>
            <param name="key">Key to delete</param>
        </member>
        <member name="M:Nancy.Session.Session.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nancy.Session.Session.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nancy.Session.Session.Count">
            <summary>
            Gets the number of items stored
            </summary>
        </member>
        <member name="P:Nancy.Session.Session.Item(System.String)">
            <summary>
            Gets or sets values
            </summary>
            <param name="key">The key whos value to get or set</param>
            <returns>The value, or null or the key didn't exist</returns>
        </member>
        <member name="P:Nancy.Session.Session.HasChanged">
            <summary>
            Gets whether the session has changed
            </summary>
        </member>
        <member name="T:Nancy.HttpMultipartSubStream">
            <summary>
            A decorator stream that sits on top of an existing stream and appears as a unique stream.
            </summary>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.HttpMultipartSubStream"/> class.
            </summary>
            <param name="stream">The stream to create the sub-stream ontop of.</param>
            <param name="start">The start offset on the parent stream where the sub-stream should begin.</param>
            <param name="end">The end offset on the parent stream where the sub-stream should end.</param>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <remarks>In the <see cref="T:Nancy.HttpMultipartSubStream"/> type this method is implemented as no-op.</remarks>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>The new position within the current stream.</returns>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <remarks>This will always throw a <see cref="T:System.InvalidOperationException"/> for the <see cref="T:Nancy.HttpMultipartSubStream"/> type.</remarks>
        </member>
        <member name="M:Nancy.HttpMultipartSubStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
            <remarks>This will always throw a <see cref="T:System.InvalidOperationException"/> for the <see cref="T:Nancy.HttpMultipartSubStream"/> type.</remarks>
        </member>
        <member name="P:Nancy.HttpMultipartSubStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns><see langword="true"/> if the stream supports reading; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Nancy.HttpMultipartSubStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns><see langword="true"/> if the stream supports seeking; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Nancy.HttpMultipartSubStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns><see langword="true"/> if the stream supports writing; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Nancy.HttpMultipartSubStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="P:Nancy.HttpMultipartSubStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Nancy.TinyIoc.TypeExtensions.GetGenericMethod(System.Type,System.Reflection.BindingFlags,System.String,System.Type[],System.Type[])">
            <summary>
            Gets a generic method from a type given the method name, binding flags, generic types and parameter types
            </summary>
            <param name="sourceType">Source type</param>
            <param name="bindingFlags">Binding flags</param>
            <param name="methodName">Name of the method</param>
            <param name="genericTypes">Generic types to use to make the method generic</param>
            <param name="parameterTypes">Method parameters</param>
            <returns>MethodInfo or null if no matches found</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:Nancy.TinyIoc.NamedParameterOverloads">
            <summary>
            Name/Value pairs for specifying "user" parameters when resolving
            </summary>
        </member>
        <member name="F:Nancy.TinyIoc.UnregisteredResolutionActions.AttemptResolve">
            <summary>
            Attempt to resolve type, even if the type isn't registered.
            
            Registered types/options will always take precedence.
            </summary>
        </member>
        <member name="F:Nancy.TinyIoc.UnregisteredResolutionActions.Fail">
            <summary>
            Fail resolution if type not explicitly registered
            </summary>
        </member>
        <member name="F:Nancy.TinyIoc.UnregisteredResolutionActions.GenericsOnly">
            <summary>
            Attempt to resolve unregistered type if requested type is generic
            and no registration exists for the specific generic parameters used.
            
            Registered types/options will always take precedence.
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.ResolveOptions">
            <summary>
            Resolution settings
            </summary>
        </member>
        <member name="P:Nancy.TinyIoc.ResolveOptions.Default">
            <summary>
            Gets the default options (attempt resolution of unregistered types, fail on named resolution if name not found)
            </summary>
        </member>
        <member name="P:Nancy.TinyIoc.ResolveOptions.FailNameNotFoundOnly">
            <summary>
            Preconfigured option for attempting resolution of unregistered types and failing on named resolution if name not found
            </summary>
        </member>
        <member name="P:Nancy.TinyIoc.ResolveOptions.FailUnregisteredAndNameNotFound">
            <summary>
            Preconfigured option for failing on resolving unregistered types and on named resolution if name not found
            </summary>
        </member>
        <member name="P:Nancy.TinyIoc.ResolveOptions.FailUnregisteredOnly">
            <summary>
            Preconfigured option for failing on resolving unregistered types, but attempting unnamed resolution if name not found
            </summary>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister(System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            Types will only be registered if they pass the supplied registration predicate.
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister(Nancy.TinyIoc.DuplicateImplementationActions)">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            </summary>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <exception cref="T:Nancy.TinyIoc.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister(Nancy.TinyIoc.DuplicateImplementationActions,System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            Types will only be registered if they pass the supplied registration predicate.
            </summary>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
            <exception cref="T:Nancy.TinyIoc.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
            <param name="assemblies">Assemblies to process</param>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            Types will only be registered if they pass the supplied registration predicate.
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Nancy.TinyIoc.DuplicateImplementationActions)">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <exception cref="T:Nancy.TinyIoc.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Nancy.TinyIoc.DuplicateImplementationActions,System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            Types will only be registered if they pass the supplied registration predicate.
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
            <exception cref="T:Nancy.TinyIoc.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type)">
            <summary>
            Creates/replaces a container class registration with default options.
            </summary>
            <param name="registerType">Type to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.String)">
            <summary>
            Creates/replaces a named container class registration with default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Type)">
            <summary>
            Creates/replaces a container class registration with a given implementation and default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Type,System.String)">
            <summary>
            Creates/replaces a named container class registration with a given implementation and default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Object)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="instance">Instance of RegisterType to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Object,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="instance">Instance of RegisterType to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Type,System.Object)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Type,System.Object,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Func{Nancy.TinyIoc.TinyIoCContainer,Nancy.TinyIoc.NamedParameterOverloads,System.Object})">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <param name="registerType">Type to register</param>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register(System.Type,System.Func{Nancy.TinyIoc.TinyIoCContainer,Nancy.TinyIoc.NamedParameterOverloads,System.Object},System.String)">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <param name="registerType">Type to register</param>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <param name="name">Name of registation</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``1">
            <summary>
            Creates/replaces a container class registration with default options.
            </summary>
            <typeparam name="RegisterImplementation">Type to register</typeparam>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``1(System.String)">
            <summary>
            Creates/replaces a named container class registration with default options.
            </summary>
            <typeparam name="RegisterImplementation">Type to register</typeparam>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``2">
            <summary>
            Creates/replaces a container class registration with a given implementation and default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``2(System.String)">
            <summary>
            Creates/replaces a named container class registration with a given implementation and default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``1(``0)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="instance">Instance of RegisterType to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``1(``0,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="instance">Instance of RegisterType to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``2(``1)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``2(``1,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``1(System.Func{Nancy.TinyIoc.TinyIoCContainer,Nancy.TinyIoc.NamedParameterOverloads,``0})">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Register``1(System.Func{Nancy.TinyIoc.TinyIoCContainer,Nancy.TinyIoc.NamedParameterOverloads,``0},System.String)">
            <summary>
            Creates/replaces a named container class registration with a user specified factory
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <param name="name">Name of registation</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.RegisterMultiple``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple implementations of a type.
            
            Internally this registers each implementation using the full name of the class as its registration name.
            </summary>
            <typeparam name="RegisterType">Type that each implementation implements</typeparam>
            <param name="implementationTypes">Types that implement RegisterType</param>
            <returns>MultiRegisterOptions for the fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.RegisterMultiple(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple implementations of a type.
            
            Internally this registers each implementation using the full name of the class as its registration name.
            </summary>
            <param name="registrationType">Type that each implementation implements</param>
            <param name="implementationTypes">Types that implement RegisterType</param>
            <returns>MultiRegisterOptions for the fluent API</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type)">
            <summary>
            Attempts to resolve a type using default options.
            </summary>
            <param name="resolveType">Type to resolve</param>
            <returns>Instance of type</returns>
            <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type,Nancy.TinyIoc.ResolveOptions)">
            <summary>
            Attempts to resolve a type using specified options.
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="options">Resolution options</param>
            <returns>Instance of type</returns>
            <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type,System.String)">
             <summary>
             Attempts to resolve a type using default options and the supplied name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type,System.String,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to resolve a type using supplied options and  name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type,Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type,System.String,Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters and name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve(System.Type,System.String,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1">
            <summary>
            Attempts to resolve a type using default options.
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <returns>Instance of type</returns>
            <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1(Nancy.TinyIoc.ResolveOptions)">
            <summary>
            Attempts to resolve a type using specified options.
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="options">Resolution options</param>
            <returns>Instance of type</returns>
            <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1(System.String)">
             <summary>
             Attempts to resolve a type using default options and the supplied name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1(System.String,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to resolve a type using supplied options and  name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1(Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1(Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1(System.String,Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters and name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.Resolve``1(System.String,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Nancy.TinyIoc.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type)">
             <summary>
             Attempts to predict whether a given type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type,System.String)">
             <summary>
             Attempts to predict whether a given named type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type,System.String,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type,Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type,System.String,Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve(System.Type,System.String,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1">
             <summary>
             Attempts to predict whether a given type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1(System.String)">
             <summary>
             Attempts to predict whether a given named type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1(Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1(System.String,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1(Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1(System.String,Nancy.TinyIoc.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1(Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.CanResolve``1(System.String,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,System.Object@)">
            <summary>
            Attemps to resolve a type using the default options
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,Nancy.TinyIoc.ResolveOptions,System.Object@)">
            <summary>
            Attemps to resolve a type using the given options
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,System.String,System.Object@)">
            <summary>
            Attemps to resolve a type using the default options and given name
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,System.String,Nancy.TinyIoc.ResolveOptions,System.Object@)">
            <summary>
            Attemps to resolve a type using the given options and name
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,Nancy.TinyIoc.NamedParameterOverloads,System.Object@)">
            <summary>
            Attemps to resolve a type using the default options and supplied constructor parameters
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved sucessfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,System.String,Nancy.TinyIoc.NamedParameterOverloads,System.Object@)">
            <summary>
            Attemps to resolve a type using the default options and supplied name and constructor parameters
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions,System.Object@)">
            <summary>
            Attemps to resolve a type using the supplied options and constructor parameters
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve(System.Type,System.String,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions,System.Object@)">
            <summary>
            Attemps to resolve a type using the supplied name, options and constructor parameters
            </summary>
            <param name="ResolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(``0@)">
            <summary>
            Attemps to resolve a type using the default options
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(Nancy.TinyIoc.ResolveOptions,``0@)">
            <summary>
            Attemps to resolve a type using the given options
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(System.String,``0@)">
            <summary>
            Attemps to resolve a type using the default options and given name
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(System.String,Nancy.TinyIoc.ResolveOptions,``0@)">
            <summary>
            Attemps to resolve a type using the given options and name
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(Nancy.TinyIoc.NamedParameterOverloads,``0@)">
            <summary>
            Attemps to resolve a type using the default options and supplied constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(System.String,Nancy.TinyIoc.NamedParameterOverloads,``0@)">
            <summary>
            Attemps to resolve a type using the default options and supplied name and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions,``0@)">
            <summary>
            Attemps to resolve a type using the supplied options and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.TryResolve``1(System.String,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions,``0@)">
            <summary>
            Attemps to resolve a type using the supplied name, options and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ResolveAll(System.Type,System.Boolean)">
            <summary>
            Returns all registrations of a type
            </summary>
            <param name="ResolveType">Type to resolveAll</param>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ResolveAll(System.Type)">
            <summary>
            Returns all registrations of a type, both named and unnamed
            </summary>
            <param name="ResolveType">Type to resolveAll</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ResolveAll``1(System.Boolean)">
            <summary>
            Returns all registrations of a type
            </summary>
            <typeparam name="ResolveType">Type to resolveAll</typeparam>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ResolveAll``1">
            <summary>
            Returns all registrations of a type, both named and unnamed
            </summary>
            <typeparam name="ResolveType">Type to resolveAll</typeparam>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.BuildUp(System.Object)">
            <summary>
            Attempts to resolve all public property dependencies on the given object.
            </summary>
            <param name="input">Object to "build up"</param>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.BuildUp(System.Object,Nancy.TinyIoc.ResolveOptions)">
            <summary>
            Attempts to resolve all public property dependencies on the given object using the given resolve options.
            </summary>
            <param name="input">Object to "build up"</param>
            <param name="resolveOptions">Resolve options to use</param>
        </member>
        <member name="P:Nancy.TinyIoc.TinyIoCContainer.Current">
            <summary>
            Lazy created Singleton instance of the container for simple scenarios
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.RegisterOptions">
            <summary>
            Registration options for "fluent" API
            </summary>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.RegisterOptions.AsSingleton">
            <summary>
            Make registration a singleton (single instance) if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:TinyIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.RegisterOptions.AsMultiInstance">
            <summary>
            Make registration multi-instance if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:TinyIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.RegisterOptions.WithWeakReference">
            <summary>
            Make registration hold a weak reference if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:TinyIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.RegisterOptions.WithStrongReference">
            <summary>
            Make registration hold a strong reference if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:TinyIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.RegisterOptions.ToCustomLifetimeManager(Nancy.TinyIoc.TinyIoCContainer.RegisterOptions,Nancy.TinyIoc.TinyIoCContainer.ITinyIoCObjectLifetimeProvider,System.String)">
            <summary>
            Switches to a custom lifetime manager factory if possible.
            
            Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
            </summary>
            <param name="instance">RegisterOptions instance</param>
            <param name="lifetimeProvider">Custom lifetime manager</param>
            <param name="errorString">Error string to display if switch fails</param>
            <returns>RegisterOptions</returns>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.MultiRegisterOptions">
            <summary>
            Registration options for "fluent" API when registering multiple implementations
            </summary>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.MultiRegisterOptions.#ctor(System.Collections.Generic.IEnumerable{Nancy.TinyIoc.TinyIoCContainer.RegisterOptions})">
            <summary>
            Initializes a new instance of the MultiRegisterOptions class.
            </summary>
            <param name="registerOptions">Registration options</param>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.MultiRegisterOptions.AsSingleton">
            <summary>
            Make registration a singleton (single instance) if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="!:TinyIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.MultiRegisterOptions.AsMultiInstance">
            <summary>
            Make registration multi-instance if possible
            </summary>
            <returns>MultiRegisterOptions</returns>
            <exception cref="!:TinyIoCInstantiationTypeException"></exception>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.MultiRegisterOptions.ToCustomLifetimeManager(Nancy.TinyIoc.TinyIoCContainer.MultiRegisterOptions,Nancy.TinyIoc.TinyIoCContainer.ITinyIoCObjectLifetimeProvider,System.String)">
            <summary>
            Switches to a custom lifetime manager factory if possible.
            
            Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
            </summary>
            <param name="instance">MultiRegisterOptions instance</param>
            <param name="lifetimeProvider">Custom lifetime manager</param>
            <param name="errorString">Error string to display if switch fails</param>
            <returns>MultiRegisterOptions</returns>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.ITinyIoCObjectLifetimeProvider">
            <summary>
            Provides custom lifetime management for ASP.Net per-request lifetimes etc.
            </summary>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.GetObject">
            <summary>
            Gets the stored object if it exists, or null if not
            </summary>
            <returns>Object instance or null</returns>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.SetObject(System.Object)">
            <summary>
            Store the object
            </summary>
            <param name="value">Object to store</param>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.ReleaseObject">
            <summary>
            Release the object
            </summary>
        </member>
        <member name="M:Nancy.TinyIoc.TinyIoCContainer.ObjectFactoryBase.GetObject(System.Type,Nancy.TinyIoc.TinyIoCContainer,Nancy.TinyIoc.NamedParameterOverloads,Nancy.TinyIoc.ResolveOptions)">
            <summary>
            Create the type
            </summary>
            <param name="requestedType">Type user requested to be resolved</param>
            <param name="container">Container that requested the creation</param>
            <param name="parameters">Any user parameters passed</param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="P:Nancy.TinyIoc.TinyIoCContainer.ObjectFactoryBase.AssumeConstruction">
            <summary>
            Whether to assume this factory successfully constructs its objects
            
            Generally set to true for delegate style factories as CanResolve cannot delve
            into the delegates they contain.
            </summary>
        </member>
        <member name="P:Nancy.TinyIoc.TinyIoCContainer.ObjectFactoryBase.CreatesType">
            <summary>
            The type the factory instantiates
            </summary>
        </member>
        <member name="P:Nancy.TinyIoc.TinyIoCContainer.ObjectFactoryBase.Constructor">
            <summary>
            Constructor to use, if specified
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.MultiInstanceFactory">
            <summary>
            IObjectFactory that creates new instances of types for each resolution
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.DelegateFactory">
            <summary>
            IObjectFactory that invokes a specified delegate to construct the object
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.WeakDelegateFactory">
            <summary>
            IObjectFactory that invokes a specified delegate to construct the object
            Holds the delegate using a weak reference
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.InstanceFactory">
            <summary>
            Stores an particular instance to return for a type
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.WeakInstanceFactory">
            <summary>
            Stores an particular instance to return for a type
            
            Stores the instance with a weak reference
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.SingletonFactory">
            <summary>
            A factory that lazy instantiates a type and always returns the same instance
            </summary>
        </member>
        <member name="T:Nancy.TinyIoc.TinyIoCContainer.CustomObjectLifetimeFactory">
            <summary>
            A factory that offloads lifetime to an external lifetime provider
            </summary>
        </member>
        <member name="T:Nancy.INancyEngine">
            <summary>
            Defines the functionality of an engine that can handle Nancy <see cref="T:Nancy.Request"/>s.
            </summary>
        </member>
        <member name="M:Nancy.INancyEngine.HandleRequest(Nancy.Request,System.Func{Nancy.NancyContext,Nancy.NancyContext},System.Threading.CancellationToken)">
            <summary>
            Handles an incoming <see cref="T:Nancy.Request"/> async.
            </summary>
            <param name="request">An <see cref="T:Nancy.Request"/> instance, containing the information about the current request.</param>
            <param name="preRequest">Delegate to call before the request is processed</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="P:Nancy.INancyEngine.RequestPipelinesFactory">
            <summary>
            Factory for creating an <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance for a incoming request.
            </summary>
            <value>An <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance.</value>
        </member>
        <member name="T:Nancy.Request">
            <summary>
            Encapsulates HTTP-request information to an Nancy application.
            </summary>
        </member>
        <member name="M:Nancy.Request.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Request"/> class.
            </summary>
            <param name="method">The HTTP data transfer method used by the client.</param>
            <param name="path">The path of the requested resource, relative to the "Nancy root". This should not include the scheme, host name, or query portion of the URI.</param>
            <param name="scheme">The HTTP protocol that was used by the client.</param>
        </member>
        <member name="M:Nancy.Request.#ctor(System.String,Nancy.Url,Nancy.IO.RequestStream,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},System.String,System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Request"/> class.
            </summary>
            <param name="method">The HTTP data transfer method used by the client.</param>
            <param name="url">The <see cref="P:Nancy.Request.Url"/>url of the requested resource</param>
            <param name="headers">The headers that was passed in by the client.</param>
            <param name="body">The <see cref="T:System.IO.Stream"/> that represents the incoming HTTP body.</param>
            <param name="ip">The client's IP address</param>
            <param name="certificate">The client's certificate when present.</param>
            <param name="protocolVersion">The HTTP protocol version.</param>
        </member>
        <member name="M:Nancy.Request.GetCookieData">
            <summary>
            Gets the cookie data from the request header if it exists
            </summary>
            <returns>Cookies dictionary</returns>
        </member>
        <member name="P:Nancy.Request.ClientCertificate">
            <summary>
            Gets the certificate sent by the client.
            </summary>
        </member>
        <member name="P:Nancy.Request.ProtocolVersion">
            <summary>
            Gets the HTTP protocol version.
            </summary>
        </member>
        <member name="P:Nancy.Request.UserHostAddress">
            <summary>
            Gets the IP address of the client
            </summary>
        </member>
        <member name="P:Nancy.Request.Method">
            <summary>
            Gets or sets the HTTP data transfer method used by the client.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Nancy.Request.Url">
            <summary>
            Gets the url
            </summary>
        </member>
        <member name="P:Nancy.Request.Path">
            <summary>
            Gets the request path, relative to the base path.
            Used for route matching etc.
            </summary>
        </member>
        <member name="P:Nancy.Request.Query">
            <summary>
            Gets the query string data of the requested resource.
            </summary>
            <value>A <see cref="T:Nancy.DynamicDictionary"/>instance, containing the key/value pairs of query string data.</value>
        </member>
        <member name="P:Nancy.Request.Body">
            <summary>
            Gets a <see cref="T:Nancy.IO.RequestStream"/> that can be used to read the incoming HTTP body
            </summary>
            <value>A <see cref="T:Nancy.IO.RequestStream"/> object representing the incoming HTTP body.</value>
        </member>
        <member name="P:Nancy.Request.Cookies">
            <summary>
            Gets the request cookies.
            </summary>
        </member>
        <member name="P:Nancy.Request.Session">
            <summary>
            Gets the current session.
            </summary>
        </member>
        <member name="P:Nancy.Request.Files">
            <summary>
            Gets a collection of files sent by the client-
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing an <see cref="T:Nancy.HttpFile"/> instance for each uploaded file.</value>
        </member>
        <member name="P:Nancy.Request.Form">
            <summary>
            Gets the form data of the request.
            </summary>
            <value>A <see cref="T:Nancy.DynamicDictionary"/>instance, containing the key/value pairs of form data.</value>
            <remarks>Currently Nancy will only parse form data sent using the application/x-www-url-encoded mime-type.</remarks>
        </member>
        <member name="P:Nancy.Request.Headers">
            <summary>
            Gets the HTTP headers sent by the client.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the name and values of the headers.</value>
            <remarks>The values are stored in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of string to be compliant with multi-value headers.</remarks>
        </member>
        <member name="T:Nancy.NancyEngine">
            <summary>
            Default engine for handling Nancy <see cref="T:Nancy.Request"/>s.
            </summary>
        </member>
        <member name="M:Nancy.NancyEngine.#ctor(Nancy.Routing.IRequestDispatcher,Nancy.INancyContextFactory,System.Collections.Generic.IEnumerable{Nancy.ErrorHandling.IStatusCodeHandler},Nancy.Diagnostics.IRequestTracing,Nancy.Diagnostics.DiagnosticsConfiguration,Nancy.IStaticContentProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.NancyEngine"/> class.
            </summary>
            <param name="dispatcher">An <see cref="T:Nancy.Routing.IRouteResolver"/> instance that will be used to resolve a route, from the modules, that matches the incoming <see cref="T:Nancy.Request"/>.</param>
            <param name="contextFactory">A factory for creating contexts</param>
            <param name="statusCodeHandlers">Error handlers</param>
            <param name="requestTracing">The request tracing instance.</param>
            <param name="diagnosticsConfiguration"></param>
            <param name="staticContentProvider">The provider to use for serving static content</param>
        </member>
        <member name="P:Nancy.NancyEngine.RequestPipelinesFactory">
            <summary>
            Factory for creating an <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance for a incoming request.
            </summary>
            <value>An <see cref="T:Nancy.Bootstrapper.IPipelines"/> instance.</value>
        </member>
        <member name="T:Nancy.Routing.IRouteResolver">
            <summary>
            Returns a route that matches the request
            </summary>
        </member>
        <member name="M:Nancy.Routing.IRouteResolver.Resolve(Nancy.NancyContext)">
            <summary>
            Gets the route, and the corresponding parameter dictionary from the URL
            </summary>
            <param name="context">Current context</param>
            <returns>A <see cref="T:Nancy.Routing.ResolveResult"/> containing the resolved route information.</returns>
        </member>
        <member name="T:Nancy.Routing.NotFoundRoute">
            <summary>
            Route that is returned when the path could not be matched.
            </summary>
            <remarks>This is equal to sending back the 404 HTTP status code.</remarks>
        </member>
        <member name="M:Nancy.Routing.NotFoundRoute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.NotFoundRoute"/> type, for the
            specified <paramref name="path"/> and <paramref name="method"/>.
            </summary>
            <param name="method">The HTTP method of the route.</param>
            <param name="path">The path of the route.</param>
        </member>
        <member name="T:Nancy.DynamicDictionary">
            <summary>
            A dictionary that supports dynamic access.
            </summary>
        </member>
        <member name="M:Nancy.DynamicDictionary.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a dynamic dictionary from an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance, that the dynamic dictionary should be created from.</param>
            <returns>An <see cref="T:Nancy.DynamicDictionary"/> instance.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param><param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param><param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains dynamic member names.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.GetEnumerator">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains dynamic member names.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A <see cref="T:System.Collections.IEnumerator"/> that contains dynamic member names.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.Equals(Nancy.DynamicDictionary)">
            <summary>
            Indicates whether the current <see cref="T:Nancy.DynamicDictionary"/> is equal to another object of the same type.
            </summary>
            <returns><see langword="true"/> if the current instance is equal to the <paramref name="other"/> parameter; otherwise, <see langword="false"/>.</returns>
            <param name="other">An <see cref="T:Nancy.DynamicDictionary"/> instance to compare with this instance.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <returns> A hash code for this <see cref="T:Nancy.DynamicDictionary"/>, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Nancy.DynamicDictionary.Add(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Nancy.DynamicDictionary"/>.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Nancy.DynamicDictionary"/> contains an element with the specified key.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Nancy.DynamicDictionary"/> contains an element with the key; otherwise, <see langword="false"/>.
            </returns>
            <param name="key">The key to locate in the <see cref="T:Nancy.DynamicDictionary"/>.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Nancy.DynamicDictionary"/> contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.Clear">
            <summary>
            Removes all items from the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
        </member>
        <member name="M:Nancy.DynamicDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the <see cref="T:Nancy.DynamicDictionary"/> contains a specific value.
            </summary>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:Nancy.DynamicDictionary"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="item">The object to locate in the <see cref="T:Nancy.DynamicDictionary"/>.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Nancy.DynamicDictionary"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the <see cref="T:Nancy.DynamicDictionary"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <returns><see langword="true"/> if the element is successfully removed; otherwise, <see langword="false"/>.</returns>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <returns><see langword="true"/> if <paramref name="item"/> was successfully removed from the <see cref="T:Nancy.DynamicDictionary"/>; otherwise, <see langword="false"/>.</returns>
            <param name="item">The object to remove from the <see cref="T:Nancy.DynamicDictionary"/>.</param>
        </member>
        <member name="M:Nancy.DynamicDictionary.ToDictionary">
            <summary>
            Gets a typed Dictionary of <see cref="T:Dictionary{String, Object}"/> from <see cref="T:Nancy.DynamicDictionary"/>
            </summary>
            <returns>Gets a typed Dictionary of <see cref="T:Dictionary{String, Object}"/> from <see cref="T:Nancy.DynamicDictionary"/></returns>
        </member>
        <member name="P:Nancy.DynamicDictionary.Empty">
            <summary>
            Returns an empty dynamic dictionary.
            </summary>
            <value>A <see cref="T:Nancy.DynamicDictionary"/> instance.</value>
        </member>
        <member name="P:Nancy.DynamicDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Nancy.DynamicDictionaryValue"/> with the specified name.
            </summary>
            <value>A <see cref="T:Nancy.DynamicDictionaryValue"/> instance containing a value.</value>
        </member>
        <member name="P:Nancy.DynamicDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:Nancy.DynamicDictionary"/>.</returns>
        </member>
        <member name="P:Nancy.DynamicDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <returns>The number of elements contained in the <see cref="T:Nancy.DynamicDictionary"/>.</returns>
        </member>
        <member name="P:Nancy.DynamicDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Nancy.DynamicDictionary"/> is read-only.
            </summary>
            <returns>Always returns <see langword="false"/>.</returns>
        </member>
        <member name="P:Nancy.DynamicDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:Nancy.DynamicDictionary"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:Nancy.DynamicDictionary"/>.</returns>
        </member>
        <member name="T:Nancy.Routing.DefaultRouteResolver">
            <summary>
            Default implementation of the <see cref="T:Nancy.Routing.IRouteResolver"/> interface.
            </summary>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteResolver.#ctor(Nancy.INancyModuleCatalog,Nancy.Routing.INancyModuleBuilder,Nancy.Routing.IRouteCache,Nancy.Routing.Trie.IRouteResolverTrie)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.Routing.DefaultRouteResolver"/> class, using
            the provided <paramref name="catalog"/>, <paramref name="moduleBuilder"/>,
            <paramref name="routeCache"/> and <paramref name="trie"/>.
            </summary>
            <param name="catalog">A <see cref="T:Nancy.INancyModuleCatalog"/> instance.</param>
            <param name="moduleBuilder">A <see cref="T:Nancy.Routing.INancyModuleBuilder"/> instance.</param>
            <param name="routeCache">A <see cref="T:Nancy.Routing.IRouteCache"/> instance.</param>
            <param name="trie">A <see cref="T:Nancy.Routing.Trie.IRouteResolverTrie"/> instance.</param>
        </member>
        <member name="M:Nancy.Routing.DefaultRouteResolver.Resolve(Nancy.NancyContext)">
            <summary>
            Gets the route, and the corresponding parameter dictionary from the URL
            </summary>
            <param name="context">Current context</param>
            <returns>A <see cref="T:Nancy.Routing.ResolveResult"/> containing the resolved route information.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.AmbiguousViewsException">
            <summary>
            Thrown when multiple <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances describe the exact same view.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.AmbiguousViewsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.AmbiguousViewsException"/> class.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.AmbiguousViewsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.AmbiguousViewsException"/> class.
            </summary>
            <param name="message">The message that should be displayed with the exception.</param>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultViewFactory">
            <summary>
            The default implementation for how views are resolved and rendered by Nancy.
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.IViewFactory">
            <summary>
            Defines the functionality used by a <see cref="T:Nancy.INancyModule"/> to render a view to the response.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IViewFactory.RenderView(System.String,System.Object,Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Renders the view with the name and model defined by the <paramref name="viewName"/> and <paramref name="model"/> parameters.
            </summary>
            <param name="viewName">The name of the view to render.</param>
            <param name="model">The module path of the module that is rendering the view.</param>
            <param name="viewLocationContext">A <see cref="T:Nancy.ViewEngines.ViewLocationContext"/> instance, containing information about the context for which the view is being rendered.</param>
            <returns>A response.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewFactory.#ctor(Nancy.ViewEngines.IViewResolver,System.Collections.Generic.IEnumerable{Nancy.ViewEngines.IViewEngine},Nancy.ViewEngines.IRenderContextFactory,Nancy.Conventions.ViewLocationConventions,Nancy.IRootPathProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.DefaultViewFactory"/> class.
            </summary>
            <param name="viewResolver">An <see cref="T:Nancy.ViewEngines.IViewResolver"/> instance that should be used to resolve the location of a view.</param>
            <param name="viewEngines">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the <see cref="T:Nancy.ViewEngines.IViewEngine"/> instances that should be able to be used to render a view</param>
            <param name="renderContextFactory">A <see cref="T:Nancy.ViewEngines.IRenderContextFactory"/> instance that should be used to create an <see cref="T:Nancy.ViewEngines.IRenderContext"/> when a view is rendered.</param>
            <param name="conventions">An <see cref="T:Nancy.Conventions.ViewLocationConventions"/> instance that should be used to resolve all possible view locations </param>
            <param name="rootPathProvider">An <see cref="T:Nancy.IRootPathProvider"/> instance.</param>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewFactory.RenderView(System.String,System.Object,Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Renders the view with the name and model defined by the <paramref name="viewName"/> and <paramref name="model"/> parameters.
            </summary>
            <param name="viewName">The name of the view to render.</param>
            <param name="model">The model that should be passed into the view.</param>
            <param name="viewLocationContext">A <see cref="T:Nancy.ViewEngines.ViewLocationContext"/> instance, containing information about the context for which the view is being rendered.</param>
            <returns>A delegate that can be invoked with the <see cref="T:System.IO.Stream"/> that the view should be rendered to.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultViewLocator">
            <summary>
            The default implementation for how views are located by Nancy.
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.IViewLocator">
            <summary>
            Defines the functionality for locating the requested view.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IViewLocator.LocateView(System.String,Nancy.NancyContext)">
            <summary>
            Gets the location of the view defined by the <paramref name="viewName"/> parameter.
            </summary>
            <param name="viewName">Name of the view to locate.</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance for the current request.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance if the view could be located; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.IViewLocator.GetAllCurrentlyDiscoveredViews">
            <summary>
            Gets all the views that are currently discovered
            Note: this is *not* the recommended way to deal with the view locator
            as it doesn't allow for runtime discovery of views with the
            <see cref="T:Nancy.StaticConfiguration.Caching"/> settings.
            </summary>
            <returns>A collection of <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewLocator.LocateView(System.String,Nancy.NancyContext)">
            <summary>
            Gets the location of the view defined by the <paramref name="viewName"/> parameter.
            </summary>
            <param name="viewName">Name of the view to locate.</param>
            <param name="context">The <see cref="T:Nancy.NancyContext"/> instance for the current request.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance if the view could be located; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewLocator.GetAllCurrentlyDiscoveredViews">
            <summary>
            Gets all the views that are currently discovered
            Note: this is *not* the recommended way to deal with the view locator
            as it doesn't allow for runtime discovery of views with the
            <see cref="T:Nancy.StaticConfiguration.Caching"/> settings.
            </summary>
            <returns>A collection of <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances</returns>
        </member>
        <member name="T:Nancy.ViewEngines.DefaultViewResolver">
            <summary>
            Default implementation on how views are resolved by Nancy.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewResolver.#ctor(Nancy.ViewEngines.IViewLocator,Nancy.Conventions.ViewLocationConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.DefaultViewResolver"/> class.
            </summary>
            <param name="viewLocator">The view locator that should be used to locate views.</param>
            <param name="conventions">The conventions that the view resolver should use to figure out where to look for views.</param>
        </member>
        <member name="M:Nancy.ViewEngines.DefaultViewResolver.GetViewLocation(System.String,System.Object,Nancy.ViewEngines.ViewLocationContext)">
            <summary>
            Locates a view based on the provided information.
            </summary>
            <param name="viewName">The name of the view to locate.</param>
            <param name="model">The model that will be used with the view.</param>
            <param name="viewLocationContext">A <see cref="T:Nancy.ViewEngines.ViewLocationContext"/> instance, containing information about the context for which the view is being located.</param>
            <returns>A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance if the view could be found, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.FileSystemViewLocationResult">
            <summary>
            View location result for file system based views.
            Supports detecting if the contents have changed since it
            was last read.
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.ViewLocationResult">
            <summary>
            Contains the result of an attempt to locate a view.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.ViewLocationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> class.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.ViewLocationResult.#ctor(System.String,System.String,System.String,System.Func{System.IO.TextReader})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> class.
            </summary>
            <param name="location">The location of where the view was found.</param>
            <param name="name">The name of the view.</param>
            <param name="extension">The file extension of the located view.</param>
            <param name="contents">A <see cref="T:System.IO.TextReader"/> that can be used to read the contents of the located view.</param>
        </member>
        <member name="M:Nancy.ViewEngines.ViewLocationResult.IsStale">
            <summary>
            Gets a value indicating whether the current item is stale
            </summary>
            <returns>True if stale, false otherwise</returns>
        </member>
        <member name="M:Nancy.ViewEngines.ViewLocationResult.Equals(Nancy.ViewEngines.ViewLocationResult)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns><see langword="true"/> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <see langword="false"/>.</returns>
            <param name="other">An <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> to compare with this instance.</param>
        </member>
        <member name="M:Nancy.ViewEngines.ViewLocationResult.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.</returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:Nancy.ViewEngines.ViewLocationResult.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:Nancy.ViewEngines.ViewLocationResult"/>.</returns>
        </member>
        <member name="P:Nancy.ViewEngines.ViewLocationResult.Contents">
            <summary>
            Gets a function that produces a reader for retrieving the contents of the view.
            </summary>
            <value>A <see cref="T:System.Func`1"/> instance that can be used to produce a reader for retrieving the contents of the view.</value>
        </member>
        <member name="P:Nancy.ViewEngines.ViewLocationResult.Extension">
            <summary>
            Gets the extension of the view that was located.
            </summary>
            <value>A <see cref="T:System.String"/> containing the extension of the view that was located.</value>
            <remarks>The extension should not contain a leading dot.</remarks>
        </member>
        <member name="P:Nancy.ViewEngines.ViewLocationResult.Location">
            <summary>
            Gets the location of where the view was found.
            </summary>
            <value>A <see cref="T:System.String"/> containing the location of the view.</value>
        </member>
        <member name="P:Nancy.ViewEngines.ViewLocationResult.Name">
            <summary>
            Gets the full name of the view that was found
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the view.</value>
        </member>
        <member name="M:Nancy.ViewEngines.FileSystemViewLocationResult.#ctor(System.String,System.String,System.String,System.Func{System.IO.TextReader},System.String,Nancy.ViewEngines.IFileSystemReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> class.
            </summary>
            <param name="location">The location of where the view was found.</param>
            <param name="name">The name of the view.</param>
            <param name="extension">The file extension of the located view.</param>
            <param name="contents">A <see cref="T:System.IO.TextReader"/> that can be used to read the contents of the located view.</param>
            <param name="fullFilename">Full filename of the file</param>
            <param name="fileSystem">An <see cref="T:Nancy.ViewEngines.IFileSystemReader"/> instance that should be used when retrieving view information from the file system.</param>
        </member>
        <member name="M:Nancy.ViewEngines.FileSystemViewLocationResult.IsStale">
            <summary>
            Gets a value indicating whether the current item is stale
            </summary>
            <returns>True if stale, false otherwise</returns>
        </member>
        <member name="M:Nancy.ViewEngines.FileSystemViewLocationResult.GetContents">
            <summary>
            Wraps the real contents delegate to set the last modified date first
            </summary>
            <returns>TextReader to read the file</returns>
        </member>
        <member name="T:Nancy.ViewEngines.IViewEngine">
            <summary>
            Defines the functionality that a view engine must support to be integrated into Nancy.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.IViewEngine.Initialize(Nancy.ViewEngines.ViewEngineStartupContext)">
            <summary>
            Initialise the view engine (if necessary)
            </summary>
            <param name="viewEngineStartupContext">Startup context</param>
        </member>
        <member name="M:Nancy.ViewEngines.IViewEngine.RenderView(Nancy.ViewEngines.ViewLocationResult,System.Object,Nancy.ViewEngines.IRenderContext)">
            <summary>
            Renders the view.
            </summary>
            <param name="viewLocationResult">A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance, containing information on how to get the view template.</param>
            <param name="model">The model that should be passed into the view</param>
            <param name="renderContext"></param>
            <returns>A response</returns>
        </member>
        <member name="P:Nancy.ViewEngines.IViewEngine.Extensions">
            <summary>
            Gets the extensions file extensions that are supported by the view engine.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the extensions.</value>
            <remarks>The extensions should not have a leading dot in the name.</remarks>
        </member>
        <member name="T:Nancy.ViewEngines.ResourceViewLocationProvider">
            <summary>
            Contains the functionality for locating a view that has been embedded into an assembly resource.
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.ResourceViewLocationProvider.RootNamespaces">
            <summary>
            User-configured root namespaces for assemblies.
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.ResourceViewLocationProvider.Ignore">
            <summary>
            A list of assemblies to ignore when scanning for embedded views.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.ResourceViewLocationProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ResourceViewLocationProvider"/> class.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.ResourceViewLocationProvider.#ctor(Nancy.ViewEngines.IResourceReader,Nancy.IResourceAssemblyProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ResourceViewLocationProvider"/> class.
            </summary>
            <param name="resourceReader">An <see cref="T:Nancy.ViewEngines.IResourceReader"/> instance that should be used when extracting embedded views.</param>
            <param name="resourceAssemblyProvider">An <see cref="T:Nancy.IResourceAssemblyProvider"/> instance that should be used to determine which assemblies to scan for embedded views.</param>
        </member>
        <member name="M:Nancy.ViewEngines.ResourceViewLocationProvider.GetLocatedViews(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns an <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance for all the views that could be located by the provider.
            </summary>
            <param name="supportedViewExtensions">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances for the located views.</returns>
            <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
        </member>
        <member name="M:Nancy.ViewEngines.ResourceViewLocationProvider.GetLocatedViews(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Returns an <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance for all the views matching the viewName that could be located by the provider.
            </summary>
            <param name="supportedViewExtensions">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
            <param name="viewName">The name of the view to try and find</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, containing <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instances for the located views.</returns>
            <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
        </member>
        <member name="T:Nancy.ViewEngines.SuperSimpleViewEngine.ISuperSimpleViewEngineMatcher">
            <summary>
            Matches and modifies the content of a rendered SuperSimpleViewEngine view.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.ISuperSimpleViewEngineMatcher.Invoke(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Invokes the matcher on the content of the rendered view.
            </summary>
            <param name="content">The content of the rendered view.</param>
            <param name="model">The model that was passed to the view.</param>
            <param name="host">The <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost"/> host.</param>
            <returns>The modified version of the view.</returns>
        </member>
        <member name="T:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost">
            <summary>
            Provides the view engine with utility functions for
            encoding, locating partial view templates etc.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost.HtmlEncode(System.String)">
            <summary>
            Html "safe" encode a string
            </summary>
            <param name="input">Input string</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost.GetTemplate(System.String,System.Object)">
            <summary>
            Get the contents of a template
            </summary>
            <param name="templateName">Name/location of the template</param>
            <param name="model">Model to use to locate the template via conventions</param>
            <returns>Contents of the template, or null if not found</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost.GetUriString(System.String,System.String[])">
            <summary>
            Gets a uri string for a named route
            </summary>
            <param name="name">Named route name</param>
            <param name="parameters">Parameters to use to expand the uri string</param>
            <returns>Expanded uri string, or null if not found</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost.ExpandPath(System.String)">
            <summary>
            Expands a path to include any base paths
            </summary>
            <param name="path">Path to expand</param>
            <returns>Expanded path</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost.AntiForgeryToken">
            <summary>
            Get the anti forgery token form element
            </summary>
            <returns>String containing the form element</returns>
        </member>
        <member name="P:Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost.Context">
            <summary>
            Context object of the host application.
            </summary>
            <value>An instance of the context object from the host.</value>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost.#ctor(Nancy.ViewEngines.IRenderContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost"/> class.
            </summary>
            <param name="renderContext">
            The render context.
            </param>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost.HtmlEncode(System.String)">
            <summary>
            Html "safe" encode a string
            </summary>
            <param name="input">Input string</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost.GetTemplate(System.String,System.Object)">
            <summary>
            Get the contents of a template
            </summary>
            <param name="templateName">Name/location of the template</param>
            <param name="model">Model to use to locate the template via conventions</param>
            <returns>Contents of the template, or null if not found</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost.GetUriString(System.String,System.String[])">
            <summary>
            Gets a uri string for a named route
            </summary>
            <param name="name">Named route name</param>
            <param name="parameters">Parameters to use to expand the uri string</param>
            <returns>Expanded uri string, or null if not found</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost.ExpandPath(System.String)">
            <summary>
            Expands a path to include any base paths
            </summary>
            <param name="path">Path to expand</param>
            <returns>Expanded path</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost.AntiForgeryToken">
            <summary>
            Get the anti forgery token form element
            </summary>
            <returns>String containing the form element</returns>
        </member>
        <member name="P:Nancy.ViewEngines.SuperSimpleViewEngine.NancyViewEngineHost.Context">
            <summary>
            Context object of the host application.
            </summary>
            <value>An instance of the context object from the host.</value>
        </member>
        <member name="T:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine">
            <summary>
            A super-simple view engine
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.ViewBagSubstitutionsRegEx">
            <summary>
            Compiled Regex for viewbag substitutions
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.SingleSubstitutionsRegEx">
            <summary>
            Compiled Regex for single substitutions
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.ContextSubstitutionsRegEx">
            <summary>
            Compiled Regex for context subsituations
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.EachSubstitutionRegEx">
            <summary>
            Compiled Regex for each blocks
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.EachItemSubstitutionRegEx">
            <summary>
            Compiled Regex for each block current substitutions
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.ConditionalSubstitutionRegEx">
            <summary>
            Compiled Regex for if blocks
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PartialSubstitutionRegEx">
            <summary>
            Compiled regex for partial blocks
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.SectionDeclarationRegEx">
            <summary>
            Compiled RegEx for section block declarations
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.SectionContentsRegEx">
            <summary>
            Compiled RegEx for section block contents
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.MasterPageHeaderRegEx">
            <summary>
            Compiled RegEx for master page declaration
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PathExpansionRegEx">
            <summary>
            Compiled RegEx for path expansion
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.AttributeValuePathExpansionRegEx">
            <summary>
            Compiled RegEx for path expansion in attribute values
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.AntiForgeryTokenRegEx">
            <summary>
            Compiled RegEx for the CSRF anti forgery token
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.processors">
            <summary>
            View engine transform processors
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.matchers">
            <summary>
            View engine extensions
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine"/> class.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.#ctor(System.Collections.Generic.IEnumerable{Nancy.ViewEngines.SuperSimpleViewEngine.ISuperSimpleViewEngineMatcher})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine"/> class, using
            the provided <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.ISuperSimpleViewEngineMatcher"/> extensions.
            </summary>
            <param name="matchers">The matchers to use with the engine.</param>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.Render(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Renders a template
            </summary>
            <param name="template">The template to render.</param>
            <param name="model">The model to user for rendering.</param>
            <param name="host">The view engine host</param>
            <returns>A string containing the expanded template.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.GetPropertyValue(System.Object,System.String)">
            <summary>
            <para>
            Gets a property value from the given model.
            </para>
            <para>
            Anonymous types, standard types and ExpandoObject are supported.
            Arbitrary dynamics (implementing IDynamicMetaObjectProvider) are not, unless
            they also implement IDictionary string, object for accessing properties.
            </para>
            </summary>
            <param name="model">The model.</param>
            <param name="propertyName">The property name to evaluate.</param>
            <returns>Tuple - Item1 being a bool for whether the evaluation was successful, Item2 being the value.</returns>
            <exception cref="T:System.ArgumentException">Model type is not supported.</exception>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.StandardTypePropertyEvaluator(System.Object,System.String)">
            <summary>
            A property extractor for standard types.
            </summary>
            <param name="model">The model.</param>
            <param name="propertyName">The property name.</param>
            <returns>Tuple - Item1 being a bool for whether the evaluation was successful, Item2 being the value.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.DynamicDictionaryPropertyEvaluator(System.Object,System.String)">
            <summary>
            A property extractor designed for ExpandoObject, but also for any
            type that implements IDictionary string object for accessing its
            properties.
            </summary>
            <param name="model">The model.</param>
            <param name="propertyName">The property name.</param>
            <returns>Tuple - Item1 being a bool for whether the evaluation was successful, Item2 being the value.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.GetCaptureGroupValues(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Gets an IEnumerable of capture group values
            </summary>
            <param name="m">The match to use.</param>
            <param name="groupName">Group name containing the capture group.</param>
            <returns>IEnumerable of capture group values as strings.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.GetPropertyValueFromParameterCollection(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a property value from a collection of nested parameter names
            </summary>
            <param name="model">The model containing properties.</param>
            <param name="parameters">A collection of nested parameters (e.g. User, Name</param>
            <returns>Tuple - Item1 being a bool for whether the evaluation was successful, Item2 being the value.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.GetPredicateResult(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Gets the predicate result for an If or IfNot block
            </summary>
            <param name="item">The item to evaluate</param>
            <param name="properties">Property list to evaluate</param>
            <param name="nullCheck">Whether to check for null, rather than straight boolean</param>
            <returns>Bool representing the predicate result</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.GetPredicateResultFromSubstitutionObject(System.Object,System.Boolean)">
            <summary>
            Returns the predicate result if the substitionObject is a valid bool
            </summary>
            <param name="substitutionObject">The substitution object.</param>
            <param name="nullCheck"></param>
            <returns>Bool value of the substitutionObject, or false if unable to cast.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.GetHasPredicateResultFromSubstitutionObject(System.Object)">
            <summary>
            Returns the predicate result if the substitionObject is a valid ICollection
            </summary>
            <param name="substitutionObject">The substitution object.</param>
            <returns>Bool value of the whether the ICollection has items, or false if unable to cast.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformViewBagSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Performs single @ViewBag.PropertyName substitutions.
            </summary>
            <param name="template">The template.</param>
            <param name="model">This parameter is not used, the model is based on the "host.Context.ViewBag".</param>
            <param name="host">View engine host</param>
            <returns>Template with @ViewBag.PropertyName blocks expanded.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformSingleSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Performs single @Model.PropertyName substitutions.
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with @Model.PropertyName blocks expanded.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformContextSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Performs single @Context.PropertyName substitutions.
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with @Context.PropertyName blocks expanded.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformEachSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Performs @Each.PropertyName substitutions
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with @Each.PropertyName blocks expanded.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.ReplaceCurrentMatch(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Expand a @Current match inside an @Each iterator
            </summary>
            <param name="contents">Contents of the @Each block</param>
            <param name="item">Current item from the @Each enumerable</param>
            <param name="host">View engine host</param>
            <returns>String result of the expansion of the @Each.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformConditionalSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Performs @If.PropertyName and @IfNot.PropertyName substitutions
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with @If.PropertyName @IfNot.PropertyName blocks removed/expanded.</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformPathSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Perform path expansion substitutions
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with paths expanded</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformAntiForgeryTokenSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Perform CSRF anti forgery token expansions
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with anti forgery tokens expanded</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformPartialSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Perform @Partial partial view expansion
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with partials expanded</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.PerformMasterPageSubstitutions(System.String,System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Invokes the master page rendering with current sections if necessary
            </summary>
            <param name="template">The template.</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with master page applied and sections substituted</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.RenderMasterPage(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Object,Nancy.ViewEngines.SuperSimpleViewEngine.IViewEngineHost)">
            <summary>
            Renders a master page - does a normal render then replaces any section tags with sections passed in
            </summary>
            <param name="masterTemplate">The master page template</param>
            <param name="sections">Dictionary of section contents</param>
            <param name="model">The model.</param>
            <param name="host">View engine host</param>
            <returns>Template with the master page applied and sections substituted</returns>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngine.GetMasterPageName(System.String)">
            <summary>
            Gets the master page name, if one is specified
            </summary>
            <param name="template">The template</param>
            <returns>Master page name or String.Empty</returns>
        </member>
        <member name="T:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineRegistrations">
            <summary>
            Performs application registrations for the SuperSimpleViewEngine.
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineRegistrations.TypeRegistrations">
            <summary>
            Gets the type registrations to register for this startup task
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineRegistrations.CollectionTypeRegistrations">
            <summary>
            Gets the collection registrations to register for this startup task
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineRegistrations.InstanceRegistrations">
            <summary>
            Gets the instance registrations to register for this startup task
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper">
            <summary>
            Nancy IViewEngine wrapper for the super simple view engine
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper.extensions">
            <summary>
            Extensions that the view engine supports
            </summary>
        </member>
        <member name="F:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper.viewEngine">
            <summary>
            The engine itself
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper.#ctor(System.Collections.Generic.IEnumerable{Nancy.ViewEngines.SuperSimpleViewEngine.ISuperSimpleViewEngineMatcher})">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper"/> class, using
            the provided <see cref="T:Nancy.ViewEngines.SuperSimpleViewEngine.ISuperSimpleViewEngineMatcher"/> extensions.
            </summary>
            <param name="matchers">The matchers to use with the engine.</param>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper.Initialize(Nancy.ViewEngines.ViewEngineStartupContext)">
            <summary>
            Initialise the view engine (if necessary)
            </summary>
            <param name="viewEngineStartupContext">Startup context</param>
        </member>
        <member name="M:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper.RenderView(Nancy.ViewEngines.ViewLocationResult,System.Object,Nancy.ViewEngines.IRenderContext)">
            <summary>
            Renders the view.
            </summary>
            <param name="viewLocationResult">A <see cref="T:Nancy.ViewEngines.ViewLocationResult"/> instance, containing information on how to get the view template.</param>
            <param name="model">The model that should be passed into the view</param>
            <param name="renderContext">An <see cref="T:Nancy.ViewEngines.IRenderContext"/> instance.</param>
            <returns>A response</returns>
        </member>
        <member name="P:Nancy.ViewEngines.SuperSimpleViewEngine.SuperSimpleViewEngineWrapper.Extensions">
            <summary>
            Gets the extensions file extensions that are supported by the view engine.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the extensions.</value>
            <remarks>The extensions should not have a leading dot in the name.</remarks>
        </member>
        <member name="T:Nancy.ViewEngines.ViewEngineApplicationStartup">
            <summary>
            Calls the initialize method on all <see cref="T:Nancy.ViewEngines.IViewEngine"/> implementations, at application startup.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.ViewEngineApplicationStartup.#ctor(System.Collections.Generic.IEnumerable{Nancy.ViewEngines.IViewEngine},Nancy.ViewEngines.IViewCache,Nancy.ViewEngines.IViewLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ViewEngineApplicationStartup"/> class, with the
            provided <paramref name="viewEngines"/>, <paramref name="viewCache"/> and <paramref name="viewLocator"/>.
            </summary>
            <param name="viewEngines">The available view engines.</param>
            <param name="viewCache">The view cache.</param>
            <param name="viewLocator">The view locator.</param>
        </member>
        <member name="M:Nancy.ViewEngines.ViewEngineApplicationStartup.Initialize(Nancy.Bootstrapper.IPipelines)">
            <summary>
            Perform any initialisation tasks
            </summary>
            <param name="pipelines">Application pipelines</param>
        </member>
        <member name="T:Nancy.ViewEngines.ViewEngineStartupContext">
            <summary>
            Context passed to each view engine on startup
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.ViewEngineStartupContext.ViewCache">
            <summary>
            Gets the Nancy view cache - can be used to precompile views at startup
            if necessary.
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.ViewEngineStartupContext.ViewLocator">
            <summary>
            Gets the Nancy view locator
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.ViewLocationContext">
            <summary>
            The context for which a view is being located.
            </summary>
        </member>
        <member name="P:Nancy.ViewEngines.ViewLocationContext.ModulePath">
            <summary>
            The module path of the <see cref="T:Nancy.INancyModule"/> that is locating a view.
            </summary>
            <value>A <see cref="T:System.String"/> containing the module path.</value>
        </member>
        <member name="P:Nancy.ViewEngines.ViewLocationContext.ModuleName">
            <summary>
            The name of the <see cref="T:Nancy.INancyModule"/> that is locating a view.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the module.</value>
        </member>
        <member name="P:Nancy.ViewEngines.ViewLocationContext.Context">
            <summary>
            The request/response context
            </summary>
        </member>
        <member name="T:Nancy.ViewEngines.ViewNotFoundException">
            <summary>
            Exception that is thrown when a view could not be located.
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.ViewNotFoundException.#ctor(System.String,System.String[],System.String[],Nancy.IRootPathProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ViewNotFoundException"/>.
            </summary>
            <param name="viewName">The name of the view that was being located.</param>
            <param name="availableViewEngineExtensions">List of available view extensions that can be rendered by the available view engines.</param>
            <param name="inspectedLocations">The locations that were inspected for the view.</param>
            <param name="rootPathProvider">An <see cref="T:Nancy.IRootPathProvider"/> instance.</param>
        </member>
        <member name="M:Nancy.ViewEngines.ViewNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewEngines.ViewNotFoundException"/>
            </summary>
            <param name="msg">A message describing the problem</param>
        </member>
        <member name="P:Nancy.ViewEngines.ViewNotFoundException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="T:Nancy.ViewEngines.Razor.ViewRenderException">
            <summary>
            An exception that indicates the view could not be rendered
            </summary>
        </member>
        <member name="M:Nancy.ViewEngines.Razor.ViewRenderException.#ctor(System.String)">
            <summary>
            Create an instance of <see cref="T:Nancy.ViewEngines.Razor.ViewRenderException"/>
            </summary>
            <param name="msg">A description of the rendering problem</param>
        </member>
        <member name="M:Nancy.ViewEngines.Razor.ViewRenderException.#ctor(System.String,System.Exception)">
            <summary>
            Create an instance of <see cref="T:Nancy.ViewEngines.Razor.ViewRenderException"/>
            </summary>
            <param name="msg">A description of the rendering problem</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Nancy.ViewRenderer">
            <summary>
            Helper class for rendering a view from a route handler.
            </summary>
        </member>
        <member name="M:Nancy.ViewRenderer.#ctor(Nancy.INancyModule)">
            <summary>
            Initializes a new instance of the <see cref="T:Nancy.ViewRenderer"/> class.
            </summary>
            <param name="module">The <see cref="T:Nancy.INancyModule"/> instance that is rendering the view.</param>
        </member>
        <member name="P:Nancy.ViewRenderer.Item(System.Object)">
            <summary>
            Renders the view with its name resolved from the model type, and model defined by the <paramref name="model"/> parameter.
            </summary>
            <param name="model">The model that should be passed into the view.</param>
            <returns>A delegate that can be invoked with the <see cref="T:System.IO.Stream"/> that the view should be rendered to.</returns>
            <remarks>The view name is model.GetType().Name with any Model suffix removed.</remarks>
        </member>
        <member name="P:Nancy.ViewRenderer.Item(System.String)">
            <summary>
            Renders the view with the name defined by the <paramref name="viewName"/> parameter.
            </summary>
            <param name="viewName">The name of the view to render.</param>
            <returns>A delegate that can be invoked with the <see cref="T:System.IO.Stream"/> that the view should be rendered to.</returns>
            <remarks>The extension in the view name is optional. If it is omitted, then Nancy will try to resolve which of the available engines that should be used to render the view.</remarks>
        </member>
        <member name="P:Nancy.ViewRenderer.Item(System.String,System.Object)">
            <summary>
            Renders the view with the name and model defined by the <paramref name="viewName"/> and <paramref name="model"/> parameters.
            </summary>
            <param name="viewName">The name of the view to render.</param>
            <param name="model">The model that should be passed into the view.</param>
            <returns>A delegate that can be invoked with the <see cref="T:System.IO.Stream"/> that the view should be rendered to.</returns>
            <remarks>The extension in the view name is optional. If it is omitted, then Nancy will try to resolve which of the available engines that should be used to render the view.</remarks>
        </member>
        <member name="P:Nancy.Xml.XmlSettings.EncodingEnabled">
            <summary>
            Gets or sets whether character encoding should be enabled, or not, for XML responses.
            </summary>
            <remarks>
            The default value is <see langword="false" />
            </remarks>
        </member>
        <member name="P:Nancy.Xml.XmlSettings.DefaultEncoding">
            <summary>
            Gets the default encoding for XML responses.
            </summary>
            <remarks>
            The default value is <see langword="Encoding.UTF8" />
            </remarks>
        </member>
    </members>
</doc>
