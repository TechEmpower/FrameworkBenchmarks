<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack</name>
    </assembly>
    <members>
        <member name="M:ServiceStack.CacheAccess.Providers.CacheClientExtensions.RemoveByPattern(ServiceStack.CacheAccess.ICacheClient,System.String)">
            <summary>
            Removes items from cache that have keys matching the specified wildcard pattern
            </summary>
            <param name="cacheClient">Cache client</param>
            <param name="pattern">The wildcard, where "*" means any sequence of characters and "?" means any single character.</param>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.CacheClientExtensions.RemoveByRegex(ServiceStack.CacheAccess.ICacheClient,System.String)">
            <summary>
            Removes items from the cache based on the specified regular expression pattern
            </summary>
            <param name="cacheClient">Cache client</param>
            <param name="regex">Regular expression pattern to search cache keys</param>
        </member>
        <member name="T:ServiceStack.CacheAccess.Providers.FileAndCacheTextManager">
            <summary>
            Stores both 'compressed' and 'text' caches of the dto in the FileSystem and ICacheTextManager provided.
            The ContentType is inferred from the ICacheTextManager's ContentType.
            </summary>
        </member>
        <member name="T:ServiceStack.CacheAccess.Providers.FileSystemXmlCacheClient">
            <summary>
            Implements a very limited subset of ICacheClient, i.e.
            
            	- T Get[T]()
            	- Set(path, value)
            	- Remove(path)
            
            </summary>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.CacheAdd(System.String,System.Object)">
            <summary>
            Add value with specified key to the cache, and set the cache entry to never expire.
            </summary>
            <param name="key">Key associated with value.</param>
            <param name="value">Value being cached.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.CacheAdd(System.String,System.Object,System.DateTime)">
            <summary>
            Stores The value with key only if such key doesn't exist at the server yet. 
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="expiresAt">The UTC DateTime at which the cache entry expires.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.CacheSet(System.String,System.Object)">
            <summary>
            Adds or replaces the value with key, and sets the cache entry to never expire.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.CacheSet(System.String,System.Object,System.DateTime)">
            <summary>
            Adds or replaces the value with key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="expiresAt">The UTC DateTime at which the cache entry expires.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.CacheSet(System.String,System.Object,System.DateTime,System.Nullable{System.Int64})">
            <summary>
            Adds or replaces the value with key. 
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="expiresAt">The UTC DateTime at which the cache entry expires.</param>
            <param name="checkLastModified">The check last modified.</param>
            <returns>True; if it succeeded</returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.CacheReplace(System.String,System.Object)">
            <summary>
            Replace the value with specified key if it exists, and set the cache entry to never expire.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value to be cached.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.CacheReplace(System.String,System.Object,System.DateTime)">
            <summary>
            Replace the value with specified key if it exists.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value to be cached.</param>
            <param name="expiresAt">The UTC DateTime at which the cache entry expires.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.Add``1(System.String,``0)">
            <summary>
            Add the value with key to the cache, set to never expire.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <returns>True if Add succeeds, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.Set``1(System.String,``0)">
            <summary>
            Add or replace the value with key to the cache, set to never expire.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <returns>True if Set succeeds, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.Replace``1(System.String,``0)">
            <summary>
            Replace the value with key in the cache, set to never expire.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <returns>True if Replace succeeds, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.Add``1(System.String,``0,System.DateTime)">
            <summary>
            Add the value with key to the cache, set to expire at specified DateTime.
            </summary>
            <remarks>This method examines the DateTimeKind of expiresAt to determine if conversion to
            universal time is needed. The version of Add that takes a TimeSpan expiration is faster 
            than using this method with a DateTime of Kind other than Utc, and is not affected by 
            ambiguous local time during daylight savings/standard time transition.</remarks>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <param name="expiresAt">The DateTime at which the cache entry expires.</param>
            <returns>True if Add succeeds, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.Set``1(System.String,``0,System.DateTime)">
            <summary>
            Add or replace the value with key to the cache, set to expire at specified DateTime.
            </summary>
            <remarks>This method examines the DateTimeKind of expiresAt to determine if conversion to
            universal time is needed. The version of Set that takes a TimeSpan expiration is faster 
            than using this method with a DateTime of Kind other than Utc, and is not affected by 
            ambiguous local time during daylight savings/standard time transition.</remarks>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <param name="expiresAt">The DateTime at which the cache entry expires.</param>
            <returns>True if Set succeeds, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.Replace``1(System.String,``0,System.DateTime)">
            <summary>
            Replace the value with key in the cache, set to expire at specified DateTime.
            </summary>
            <remarks>This method examines the DateTimeKind of expiresAt to determine if conversion to
            universal time is needed. The version of Replace that takes a TimeSpan expiration is faster 
            than using this method with a DateTime of Kind other than Utc, and is not affected by 
            ambiguous local time during daylight savings/standard time transition.</remarks>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <param name="expiresAt">The DateTime at which the cache entry expires.</param>
            <returns>True if Replace succeeds, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.Add``1(System.String,``0,System.TimeSpan)">
            <summary>
            Add the value with key to the cache, set to expire after specified TimeSpan.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <param name="expiresIn">The TimeSpan at which the cache entry expires.</param>
            <returns>True if Add succeeds, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Add or replace the value with key to the cache, set to expire after specified TimeSpan.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <param name="expiresIn">The TimeSpan at which the cache entry expires.</param>
            <returns>True if Set succeeds, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.Replace``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replace the value with key in the cache, set to expire after specified TimeSpan.
            </summary>
            <param name="key">The key of the cache entry.</param>
            <param name="value">The value being cached.</param>
            <param name="expiresIn">The TimeSpan at which the cache entry expires.</param>
            <returns>True if Replace succeeds, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.CacheAccess.Providers.MemoryCacheClient.CacheEntry.#ctor(System.Object,System.DateTime)">
            <summary>
            Create new instance of CacheEntry.
            </summary>
            <param name="value">The value being cached.</param>
            <param name="expiresAt">The UTC time at which CacheEntry expires.</param>
        </member>
        <member name="P:ServiceStack.CacheAccess.Providers.MemoryCacheClient.CacheEntry.ExpiresAt">
            <summary>UTC time at which CacheEntry expires.</summary>
        </member>
        <member name="T:ServiceStack.Configuration.AppSettings">
            <summary>
            More familiar name for the new crowd.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.AppSettings.GetString(System.String)">
            <summary>
            Returns string if exists, otherwise null
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ISettings.Get(System.String)">
            <summary>
            Provides a common interface for Settings providers such as
            ConfigurationManager or Azure's RoleEnvironment. The only
            requirement is that if the implementation cannot find the
            specified key, the return value must be null
            </summary>
            <param name="key">The key for the setting</param>
            <returns>The string value of the specified key, or null if the key
            was invalid</returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetNullableAppSetting(System.String)">
            <summary>
            Gets the nullable app setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetAppSetting(System.String)">
            <summary>
            Gets the app setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.ConfigSectionExists(System.String)">
            <summary>
            Determines wheter the Config section identified by the sectionName exists.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetAppSetting(System.String,System.String)">
            <summary>
            Returns AppSetting[key] if exists otherwise defaultValue
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetAppSetting``1(System.String,``0)">
            <summary>
            Returns AppSetting[key] if exists otherwise defaultValue, for non-string values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetConnectionStringSetting(System.String)">
            <summary>
            Gets the connection string setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetConnectionString(System.String)">
            <summary>
            Gets the connection string.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetListFromAppSetting(System.String)">
            <summary>
            Gets the list from app setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetDictionaryFromAppSetting(System.String)">
            <summary>
            Gets the dictionary from app setting.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetParseMethod(System.Type)">
            <summary>
            Get the static Parse(string) method on the type supplied
            </summary>
            <param name="type"></param>
            <returns>A delegate to the type's Parse(string) if it has one</returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetConstructorInfo(System.Type)">
            <summary>
            Gets the constructor info for T(string) if exists.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.ParseTextValue``1(System.String)">
            <summary>
            Returns the value returned by the 'T.Parse(string)' method if exists otherwise 'new T(string)'. 
            e.g. if T was a TimeSpan it will return TimeSpan.Parse(textValue).
            If there is no Parse Method it will attempt to create a new instance of the destined type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="textValue">The default value.</param>
            <returns>T.Parse(string) or new T(string) value</returns>
        </member>
        <member name="T:ServiceStack.Html.AntiXsrf.AntiForgery">
            <summary>
            Provides access to the anti-forgery system, which provides protection against
            Cross-site Request Forgery (XSRF, also called CSRF) attacks.
            </summary>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.AntiForgery.GetHtml">
            <summary>
            Generates an anti-forgery token for this request. This token can
            be validated by calling the Validate() method.
            </summary>
            <returns>An HTML string corresponding to an &lt;input type="hidden"&gt;
            element. This element should be put inside a &lt;form&gt;.</returns>
            <remarks>
            This method has a side effect: it may set a response cookie.
            </remarks>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.AntiForgery.GetTokens(System.String,System.String@,System.String@)">
            <summary>
            Generates an anti-forgery token pair (cookie and form token) for this request.
            This method is similar to GetHtml(), but this method gives the caller control
            over how to persist the returned values. To validate these tokens, call the
            appropriate overload of Validate.
            </summary>
            <param name="oldCookieToken">The anti-forgery token - if any - that already existed
            for this request. May be null. The anti-forgery system will try to reuse this cookie
            value when generating a matching form token.</param>
            <param name="newCookieToken">Will contain a new cookie value if the old cookie token
            was null or invalid. If this value is non-null when the method completes, the caller
            must persist this value in the form of a response cookie, and the existing cookie value
            should be discarded. If this value is null when the method completes, the existing
            cookie value was valid and needn't be modified.</param>
            <param name="formToken">The value that should be stored in the &lt;form&gt;. The caller
            should take care not to accidentally swap the cookie and form tokens.</param>
            <remarks>
            Unlike the GetHtml() method, this method has no side effect. The caller
            is responsible for setting the response cookie and injecting the returned
            form token as appropriate.
            </remarks>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.AntiForgery.Validate">
            <summary>
            Validates an anti-forgery token that was supplied for this request.
            The anti-forgery token may be generated by calling GetHtml().
            </summary>
            <remarks>
            Throws an HttpAntiForgeryException if validation fails.
            </remarks>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.AntiForgery.Validate(System.String,System.String)">
            <summary>
            Validates an anti-forgery token pair that was generated by the GetTokens method.
            </summary>
            <param name="cookieToken">The token that was supplied in the request cookie.</param>
            <param name="formToken">The token that was supplied in the request form body.</param>
            <remarks>
            Throws an HttpAntiForgeryException if validation fails.
            </remarks>
        </member>
        <member name="T:ServiceStack.Html.AntiXsrf.AntiForgeryConfig">
            <summary>
            Provides programmatic configuration for the anti-forgery token system.
            </summary>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.AdditionalDataProvider">
            <summary>
            Specifies an object that can provide additional data to put into all
            generated tokens and that can validate additional data in incoming
            tokens.
            </summary>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.CookieName">
            <summary>
            Specifies the name of the cookie that is used by the anti-forgery
            system.
            </summary>
            <remarks>
            If an explicit name is not provided, the system will automatically
            generate a name.
            </remarks>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.RequireSsl">
            <summary>
            Specifies whether SSL is required for the anti-forgery system
            to operate. If this setting is 'true' and a non-SSL request
            comes into the system, all anti-forgery APIs will fail.
            </summary>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.SuppressIdentityHeuristicChecks">
            <summary>
            Specifies whether the anti-forgery system should skip checking
            for conditions that might indicate misuse of the system. Please
            use caution when setting this switch, as improper use could open
            security holes in the application.
            </summary>
            <remarks>
            Setting this switch will disable several checks, including:
            - Identity.IsAuthenticated = true without Identity.Name being set
            - special-casing claims-based identities
            </remarks>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.UniqueClaimTypeIdentifier">
            <summary>
            If claims-based authorization is in use, specifies the claim
            type from the identity that is used to uniquely identify the
            user. If this property is set, all claims-based identities
            <em>must</em> return unique values for this claim type.
            </summary>
            <remarks>
            If claims-based authorization is in use and this property has
            not been set, the anti-forgery system will automatically look
            for claim types "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"
            and "http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider".
            </remarks>
        </member>
        <member name="T:ServiceStack.Html.AntiXsrf.IAntiForgeryAdditionalDataProvider">
            <summary>
            Allows providing or validating additional custom data for anti-forgery tokens.
            For example, the developer could use this to supply a nonce when the token is
            generated, then he could validate the nonce when the token is validated.
            </summary>
            <remarks>
            The anti-forgery system already embeds the client's username within the
            generated tokens. This interface provides and consumes <em>supplemental</em>
            data. If an incoming anti-forgery token contains supplemental data but no
            additional data provider is configured, the supplemental data will not be
            validated.
            </remarks>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.IAntiForgeryAdditionalDataProvider.GetAdditionalData(System.Web.HttpContextBase)">
            <summary>
            Provides additional data to be stored for the anti-forgery tokens generated
            during this request.
            </summary>
            <param name="context">Information about the current request.</param>
            <returns>Supplemental data to embed within the anti-forgery token.</returns>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.IAntiForgeryAdditionalDataProvider.ValidateAdditionalData(System.Web.HttpContextBase,System.String)">
            <summary>
            Validates additional data that was embedded inside an incoming anti-forgery
            token.
            </summary>
            <param name="context">Information about the current request.</param>
            <param name="additionalData">Supplemental data that was embedded within the token.</param>
            <returns>True if the data is valid; false if the data is invalid.</returns>
        </member>
        <member name="M:ServiceStack.Html.ScopeStorageDictionary.#ctor(System.Collections.Generic.IDictionary{System.Object,System.Object},System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Html.ScopeStorageDictionary"/> class.
            </summary>
            <param name="baseScope">The base scope.</param>
            <param name="backingStore">
            The dictionary to use as a storage. Since the dictionary would be used as-is, we expect the implementer to 
            use the same key-value comparison logic as we do here.
            </param>
        </member>
        <member name="T:ServiceStack.Html.ScopeStorageComparer">
            <summary>
            Custom comparer for the context dictionaries
            The comparer treats strings as a special case, performing case insesitive comparison. 
            This guaratees that we remain consistent throughout the chain of contexts since PageData dictionary 
            behaves in this manner.
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndRequest(System.Web.HttpResponse,System.Boolean)">
            <summary>
            End a ServiceStack Request
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndRequest(ServiceStack.ServiceHost.IHttpResponse,System.Boolean)">
            <summary>
            End a ServiceStack Request
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndHttpHandlerRequest(System.Web.HttpResponse,System.Boolean,System.Boolean,System.Boolean,System.Action{System.Web.HttpResponse})">
            <summary>
            End a HttpHandler Request
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndHttpHandlerRequest(ServiceStack.ServiceHost.IHttpResponse,System.Boolean,System.Boolean,System.Action{ServiceStack.ServiceHost.IHttpResponse})">
            <summary>
            End a HttpHandler Request
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndRequestWithNoContent(ServiceStack.ServiceHost.IHttpResponse)">
            <summary>
            End a ServiceStack Request with no content
            </summary>
        </member>
        <member name="T:Funq.Container">
            <summary>
			Main container class for components, supporting container hierarchies and
			lifetime management of <see cref="T:System.IDisposable"/> instances.
		</summary>
        </member>
        <member name="M:Funq.Container.#ctor">
            <summary>
			Initializes a new empty container.
		</summary>
        </member>
        <member name="M:Funq.Container.CreateChildContainer">
            <summary>
			Creates a child container of the current one, which exposes its
			current service registration to the new child container.
		</summary>
        </member>
        <member name="M:Funq.Container.Dispose">
            <summary>
			Disposes the container and all instances owned by it (see
			<see cref="F:Funq.Owner.Container"/>), as well as all child containers
			created through <see cref="M:Funq.Container.CreateChildContainer"/>.
		</summary>
        </member>
        <member name="M:Funq.Container.Register``1(``0)">
            <summary>
			Registers a service instance with the container. This instance 
			will have <see cref="F:Funq.Owner.External"/> and <see cref="F:Funq.ReuseScope.Hierarchy"/> 
			behavior.
		</summary><param name="instance">Service instance to use.</param>
        </member>
        <member name="M:Funq.Container.Register``1(System.String,``0)">
            <summary>
			Registers a named service instance with the container. This instance
			will have <see cref="F:Funq.Owner.External"/> and <see cref="F:Funq.ReuseScope.Hierarchy"/>
			behavior.
		</summary><param name="name">Name of the service to register.</param><param name="instance">Service instance to use.</param>
        </member>
        <member name="M:Funq.Container.LazyResolve``1">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance 
			of the service when needed.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The function that can resolve to the service instance when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``2">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``3">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``4">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``5">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``6">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``7">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``1(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service with the given name when needed.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``2(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``3(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``4(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``5(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``6(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``7(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.Register``1(System.Func{Funq.Container,``0})">
            <summary>
			Registers the given service by providing a factory delegate to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``2(System.Func{Funq.Container,``1,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg">First argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``3(System.Func{Funq.Container,``1,``2,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``4(System.Func{Funq.Container,``1,``2,``3,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``5(Funq.Func{Funq.Container,``1,``2,``3,``4,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``6(Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``7(Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``6,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg6">Sixth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``1(System.String,System.Func{Funq.Container,``0})">
            <summary>
			Registers the given named service by providing a factory delegate to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``2(System.String,System.Func{Funq.Container,``1,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg">First argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``3(System.String,System.Func{Funq.Container,``1,``2,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``4(System.String,System.Func{Funq.Container,``1,``2,``3,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``5(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``6(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``7(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``6,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg6">Sixth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Resolve``1">
            <summary>
			Resolves the given service by type, without passing any arguments for
			its construction.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``2(``1)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``3(``1,``2)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``4(``1,``2,``3)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``5(``1,``2,``3,``4)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``6(``1,``2,``3,``4,``5)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``7(``1,``2,``3,``4,``5,``6)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``1(System.String)">
            <summary>
			Resolves the given service by type and name, without passing arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``2(System.String,``1)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``3(System.String,``1,``2)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``4(System.String,``1,``2,``3)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``5(System.String,``1,``2,``3,``4)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``6(System.String,``1,``2,``3,``4,``5)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``7(System.String,``1,``2,``3,``4,``5,``6)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.TryResolve``1">
            <summary>
			Attempts to resolve the given service by type, without passing arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``2(``1)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``3(``1,``2)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``4(``1,``2,``3)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``5(``1,``2,``3,``4)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``6(``1,``2,``3,``4,``5)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``7(``1,``2,``3,``4,``5,``6)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``1(System.String)">
            <summary>
			Attempts to resolve the given service by type and name, without passing
			arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``2(System.String,``1)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``3(System.String,``1,``2)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``4(System.String,``1,``2,``3)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``5(System.String,``1,``2,``3,``4)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``6(System.String,``1,``2,``3,``4,``5)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``7(System.String,``1,``2,``3,``4,``5,``6)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.RegisterAutoWired``1">
            <summary>
            Register an autowired dependency
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Funq.Container.RegisterAutoWiredAs``2">
            <summary>
            Register an autowired dependency as a separate type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Funq.Container.RegisterAs``2">
            <summary>
            Alias for RegisterAutoWiredAs
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Funq.Container.AutoWire(System.Object)">
            <summary>
            Auto-wires an existing instance, 
            ie all public properties are tried to be resolved.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Funq.Container.GenerateAutoWireFn``1">
            <summary>
            Generates a function which creates and auto-wires <see cref="!:TService"/>.
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="lambdaParam"></param>
            <returns></returns>
        </member>
        <member name="M:Funq.Container.AutoWire(Funq.Container,System.Object)">
            <summary>
            Auto-wires an existing instance of a specific type.
            The auto-wiring progress is also cached to be faster 
            when calling next time with the same type.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:Funq.Container.DefaultOwner">
            <summary>
			Default owner for new registrations. <see cref="F:Funq.Owner.Container"/> by default.
		</summary>
        </member>
        <member name="P:Funq.Container.DefaultReuse">
            <summary>
			Default reuse scope for new registrations. <see cref="F:Funq.ReuseScope.Hierarchy"/> by default.
		</summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.ContainerTypeExtensions.RegisterAutoWiredType(Funq.Container,System.Type,System.Type,Funq.ReuseScope)">
            <summary>
            Registers the type in the IoC container and
            adds auto-wiring to the specified type.
            </summary>
            <param name="serviceType"></param>
            <param name="inFunqAsType"></param>
        </member>
        <member name="M:ServiceStack.ServiceHost.ContainerTypeExtensions.RegisterAutoWiredType(Funq.Container,System.Type,Funq.ReuseScope)">
            <summary>
            Registers the type in the IoC container and
            adds auto-wiring to the specified type.
            The reuse scope is set to none (transient).
            </summary>
            <param name="serviceTypes"></param>
        </member>
        <member name="M:ServiceStack.ServiceHost.ContainerTypeExtensions.RegisterAutoWiredTypes(Funq.Container,System.Collections.Generic.IEnumerable{System.Type},Funq.ReuseScope)">
            <summary>
            Registers the types in the IoC container and
            adds auto-wiring to the specified types.
            The reuse scope is set to none (transient).
            </summary>
            <param name="serviceTypes"></param>
        </member>
        <member name="T:Funq.Func`6">
            <summary>
            Encapsulates a method that has five parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="T:Funq.Func`7">
            <summary>
            Encapsulates a method that has six parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="T:Funq.Func`8">
            <summary>
            Encapsulates a method that has seven parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="T:Funq.IFluentInterface">
            <summary>
            Helper interface used to hide the base <see cref="T:System.Object"/> 
            members from the fluent API to make for much cleaner 
            Visual Studio intellisense experience.
            </summary>
        </member>
        <member name="M:Funq.IFluentInterface.GetType">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.GetHashCode">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.ToString">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.Equals(System.Object)">
            <summary/>
        </member>
        <member name="T:Funq.IFunqlet">
            <summary>
            Funqlets are a set of components provided as a package 
            to an existing container (like a module).
            </summary>
        </member>
        <member name="M:Funq.IFunqlet.Configure(Funq.Container)">
            <summary>
            Configure the given container with the 
            registrations provided by the funqlet.
            </summary>
            <param name="container">Container to register.</param>
        </member>
        <member name="T:Funq.IContainerModule">
            <summary>
            Interface used by plugins to contribute registrations 
            to an existing container.
            </summary>
        </member>
        <member name="T:Funq.Owner">
            <summary>
            Determines who is responsible for disposing instances 
            registered with a container.
            </summary>
        </member>
        <member name="F:Funq.Owner.Container">
            <summary>
            Container should dispose provided instances when it is disposed. This is the 
            default.
            </summary>
        </member>
        <member name="F:Funq.Owner.External">
            <summary>
            Container does not dispose provided instances.
            </summary>
        </member>
        <member name="F:Funq.Owner.Default">
            <summary>
            Default owner, which equals <see cref="F:Funq.Owner.Container"/>.
            </summary>
        </member>
        <member name="T:Funq.ResolutionException">
            <summary>
            Exception thrown by the container when a service cannot be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.Type)">
            <summary>
            Initializes the exception with the service that could not be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.Type,System.String)">
            <summary>
            Initializes the exception with the service (and its name) that could not be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.String)">
            <summary>
            Initializes the exception with an arbitrary message.
            </summary>
        </member>
        <member name="T:Funq.ReuseScope">
            <summary>
            Determines visibility and reuse of instances provided by the container.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Hierarchy">
            <summary>
            Instances are reused within a container hierarchy. Instances 
            are created (if necessary) in the container where the registration
            was performed, and are reused by all descendent containers.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Container">
            <summary>
            Instances are reused only at the given container. Descendent 
            containers do not reuse parent container instances and get  
            a new instance at their level.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.None">
            <summary>
            Each request to resolve the dependency will result in a new 
            instance being returned.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Request">
            <summary>
            Instaces are reused within the given request
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Default">
            <summary>
            Default scope, which equals <see cref="F:Funq.ReuseScope.Hierarchy"/>.
            </summary>
        </member>
        <member name="T:Funq.IRegistration">
            <summary>
            Fluent API for customizing the registration of a service.
            </summary>
        </member>
        <member name="T:Funq.IReusedOwned">
            <summary>
            Fluent API that exposes both <see cref="M:Funq.IReused.ReusedWithin(Funq.ReuseScope)"/>
            and owner (<see cref="M:Funq.IOwned.OwnedBy(Funq.Owner)"/>).
            </summary>
        </member>
        <member name="T:Funq.IReused">
            <summary>
            Fluent API that allows specifying the reuse instances.
            </summary>
        </member>
        <member name="M:Funq.IReused.ReusedWithin(Funq.ReuseScope)">
            <summary>
            Specifies how instances are reused within a container or hierarchy. Default 
            scope is <see cref="F:Funq.ReuseScope.Hierarchy"/>.
            </summary>
        </member>
        <member name="T:Funq.IOwned">
            <summary>
            Fluent API that allows specifying the owner of instances 
            created from a registration.
            </summary>
        </member>
        <member name="M:Funq.IOwned.OwnedBy(Funq.Owner)">
            <summary>
            Specifies the owner of instances created from this registration. Default 
            owner is <see cref="F:Funq.Owner.Container"/>.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry.Owner">
            <summary>
            Ownership setting for the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry.Reuse">
            <summary>
            Reuse scope setting for the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry.Container">
            <summary>
            The container where the entry was registered.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry.OwnedBy(Funq.Owner)">
            <summary>
            Specifies the owner for instances, which determines how 
            they will be disposed.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry.ReusedWithin(Funq.ReuseScope)">
            <summary>
            Specifies the scope for instances, which determines 
            visibility of instances across containers and hierarchies.
            </summary>
        </member>
        <member name="T:Funq.IRegistration`1">
            <summary>
            Fluent API for customizing the registration of a service.
            </summary>
        </member>
        <member name="T:Funq.IInitializable`1">
            <summary>
            Fluent API that allows registering an initializer for the 
            service.
            </summary>
        </member>
        <member name="M:Funq.IInitializable`1.InitializedBy(System.Action{Funq.Container,`0})">
            <summary>
            Specifies an initializer that should be invoked after 
            the service instance has been created by the factory.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry`2.Factory">
            <summary>
            The Func delegate that creates instances of the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry`2.instance">
            <summary>
            The cached service instance if the scope is <see cref="F:Funq.ReuseScope.Hierarchy"/> or 
            <see cref="F:Funq.ReuseScope.Container"/>.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry`2.Initializer">
            <summary>
            The Func delegate that initializes the object after creation.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry`2.CloneFor(Funq.Container)">
            <summary>
            Clones the service entry assigning the <see cref="T:Funq.Container"/> to the 
            <paramref name="newContainer"/>. Does not copy the <see cref="P:Funq.ServiceEntry`2.Instance"/>.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.BaseProfilerProvider">
            <summary>
            BaseProfilerProvider.  This providers some helper methods which provide access to
            internals not otherwise available.
            To use, override the <see cref="M:ServiceStack.MiniProfiler.BaseProfilerProvider.Start(ServiceStack.MiniProfiler.ProfileLevel)"/>, <see cref="M:ServiceStack.MiniProfiler.BaseProfilerProvider.Stop(System.Boolean)"/> and <see cref="M:ServiceStack.MiniProfiler.BaseProfilerProvider.GetCurrentProfiler"/>
            methods.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.IProfilerProvider">
            <summary>
            A provider used to create <see cref="T:ServiceStack.MiniProfiler.Profiler"/> instances and maintain the current instance.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.IProfilerProvider.Start(ServiceStack.MiniProfiler.ProfileLevel)">
            <summary>
            Starts a new MiniProfiler and sets it to be current.  By the end of this method
            <see cref="M:ServiceStack.MiniProfiler.IProfilerProvider.GetCurrentProfiler"/> should return the new MiniProfiler.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.IProfilerProvider.Stop(System.Boolean)">
            <summary>
            Ends the current profiling session, if one exists.
            </summary>
            <param name="discardResults">
            When true, clears the <see cref="P:ServiceStack.MiniProfiler.Profiler.Current"/> for this HttpContext, allowing profiling to 
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.IProfilerProvider.GetCurrentProfiler">
            <summary>
            Returns the current MiniProfiler.  This is used by <see cref="P:ServiceStack.MiniProfiler.Profiler.Current"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.BaseProfilerProvider.Start(ServiceStack.MiniProfiler.ProfileLevel)">
            <summary>
            Starts a new MiniProfiler and sets it to be current.  By the end of this method
            <see cref="M:ServiceStack.MiniProfiler.BaseProfilerProvider.GetCurrentProfiler"/> should return the new MiniProfiler.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.BaseProfilerProvider.Stop(System.Boolean)">
            <summary>
            Stops the current MiniProfiler (if any is currently running).
            <see cref="M:ServiceStack.MiniProfiler.BaseProfilerProvider.SaveProfiler(ServiceStack.MiniProfiler.Profiler)"/> should be called if <paramref name="discardResults"/> is false
            </summary>
            <param name="discardResults">If true, any current results will be thrown away and nothing saved</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.BaseProfilerProvider.GetCurrentProfiler">
            <summary>
            Returns the current MiniProfiler.  This is used by <see cref="P:ServiceStack.MiniProfiler.Profiler.Current"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.BaseProfilerProvider.SetProfilerActive(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Sets <paramref name="profiler"/> to be active (read to start profiling)
            This should be called once a new MiniProfiler has been created.
            </summary>
            <param name="profiler">The profiler to set to active</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="profiler"/> is null</exception>
        </member>
        <member name="M:ServiceStack.MiniProfiler.BaseProfilerProvider.StopProfiler(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Stops the profiler and marks it as inactive.
            </summary>
            <param name="profiler">The profiler to stop</param>
            <returns>True if successful, false if Stop had previously been called on this profiler</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="profiler"/> is null</exception>
        </member>
        <member name="M:ServiceStack.MiniProfiler.BaseProfilerProvider.SaveProfiler(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Calls <see cref="M:ServiceStack.MiniProfiler.Profiler.Settings.EnsureStorageStrategy"/> to save the current
            profiler using the current storage settings
            </summary>
            <param name="current"></param>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ExecuteType">
            <summary>
            Categories of sql statements.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.None">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.NonQuery">
            <summary>
            DML statements that alter database state, e.g. INSERT, UPDATE
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.Scalar">
            <summary>
            Statements that return a single record
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.Reader">
            <summary>
            Statements that iterate over a result set
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.IDbProfiler">
            <summary>
            A callback for ProfiledDbConnection and family
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.ExecuteStart(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType)">
            <summary>
            Called when a command starts executing
            </summary>
            <param name="profiledDbCommand"></param>
            <param name="executeType"></param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.ExecuteFinish(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType,System.Data.Common.DbDataReader)">
            <summary>
            Called when a reader finishes executing
            </summary>
            <param name="profiledDbCommand"></param>
            <param name="executeType"></param>
            <param name="reader"></param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.ReaderFinish(System.Data.Common.DbDataReader)">
            <summary>
            Called when a reader is done iterating through the data 
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.OnError(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType,System.Exception)">
            <summary>
            Called when an error happens during execution of a command 
            </summary>
            <param name="profiledDbCommand"></param>
            <param name="executeType"></param>
            <param name="exception"></param>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.IDbProfiler.IsActive">
            <summary>
            True if the profiler instance is active
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbCommand.BindByName">
            <summary>
            If the underlying command supports BindByName, this sets/clears the underlying
            implementation accordingly. This is required to support OracleCommand from dapper-dot-net
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ProfiledDbConnection">
            <summary>
            Wraps a database connection, allowing sql execution timings to be collected when a <see cref="T:ServiceStack.MiniProfiler.Profiler"/> session is started.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ProfiledDbConnection._conn">
            <summary>
            This will be made private; use <see cref="P:ServiceStack.MiniProfiler.Data.ProfiledDbConnection.InnerConnection"/>
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ProfiledDbConnection._profiler">
            <summary>
            This will be made private; use <see cref="P:ServiceStack.MiniProfiler.Data.ProfiledDbConnection.Profiler"/>
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbConnection.#ctor(System.Data.Common.DbConnection,ServiceStack.MiniProfiler.Data.IDbProfiler,System.Boolean)">
            <summary>
            Returns a new <see cref="T:ServiceStack.MiniProfiler.Data.ProfiledDbConnection"/> that wraps <paramref name="connection"/>, 
            providing query execution profiling.  If profiler is null, no profiling will occur.
            </summary>
            <param name="connection">Your provider-specific flavor of connection, e.g. SqlConnection, OracleConnection</param>
            <param name="profiler">The currently started <see cref="T:ServiceStack.MiniProfiler.Profiler"/> or null.</param>
            <param name="autoDisposeConnection">Determines whether the ProfiledDbConnection will dispose the underlying connection.</param>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbConnection.InnerConnection">
            <summary>
            The underlying, real database connection to your db provider.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbConnection.Profiler">
            <summary>
            The current profiler instance; could be null.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbConnection.WrappedConnection">
            <summary>
            The raw connection this is wrapping
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory">
            <summary>
            Wrapper for a db provider factory to enable profiling
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.Instance">
            <summary>
            Every provider factory must have an Instance public field
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.#ctor">
            <summary>
            Used for db provider apis internally 
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.InitProfiledDbProviderFactory(ServiceStack.MiniProfiler.Data.IDbProfiler,System.Data.Common.DbProviderFactory)">
            <summary>
            Allow to re-init the provider factory.
            </summary>
            <param name="profiler"></param>
            <param name="tail"></param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.#ctor(ServiceStack.MiniProfiler.Data.IDbProfiler,System.Data.Common.DbProviderFactory)">
            <summary>
            proxy
            </summary>
            <param name="profiler"></param>
            <param name="tail"></param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.CreateDataSourceEnumerator">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.CreateCommand">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.CreateConnection">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.CreateParameter">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.CreateConnectionStringBuilder">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.CreateCommandBuilder">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.CreateDataAdapter">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
            <summary>
            proxy
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.CanCreateDataSourceEnumerator">
            <summary>
            proxy
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Helpers.ExtensionMethods">
            <summary>
            Common extension methods to use only in this project
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Helpers.ExtensionMethods.IsNullOrWhiteSpace(System.String)">
            <summary>
            Answers true if this String is either null or empty.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Helpers.ExtensionMethods.HasValue(System.String)">
            <summary>
            Answers true if this String is neither null or empty.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Helpers.ExtensionMethods.EnsureTrailingSlash(System.String)">
            <summary>
            Removes trailing / characters from a path and leaves just one
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Helpers.ExtensionMethods.RemoveLeadingSlash(System.String)">
            <summary>
            Removes any leading / characters from a path
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Helpers.ExtensionMethods.RemoveTrailingSlash(System.String)">
            <summary>
            Removes any leading / characters from a path
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Helpers.ExtensionMethods.ToJson(System.Object)">
            <summary>
            Serializes <paramref name="o"/> to a json string.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Helpers.StackTraceSnippet">
            <summary>
            Gets part of a stack trace containing only methods we care about.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Helpers.StackTraceSnippet.Get">
            <summary>
            Gets the current formatted and filted stack trace.
            </summary>
            <returns>Space separated list of methods</returns>
        </member>
        <member name="T:ServiceStack.MiniProfiler.IpAddressIdentity">
            <summary>
            Identifies users based on ip address.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.IUserProvider">
            <summary>
            Provides functionality to identify which user is profiling a request.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.IUserProvider.GetUser(System.Web.HttpRequest)">
            <summary>
            Returns a string to identify the user profiling the current 'request'.
            </summary>
            <param name="request">The current HttpRequest being profiled.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.IpAddressIdentity.GetUser(System.Web.HttpRequest)">
            <summary>
            Returns the paramter HttpRequest's client ip address.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Profiler">
            <summary>
            A single MiniProfiler can be used to represent any number of steps/levels in a call-graph, via Step()
            </summary>
            <remarks>Totally baller.</remarks>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Profiler._sw">
            <summary>
            Starts when this profiler is instantiated. Each <see cref="T:ServiceStack.MiniProfiler.Timing"/> step will use this Stopwatch's current ticks as
            their starting time.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.#ctor(System.String,ServiceStack.MiniProfiler.ProfileLevel)">
            <summary>
            Creates and starts a new MiniProfiler for the root <paramref name="url"/>, filtering <see cref="T:ServiceStack.MiniProfiler.Timing"/> steps to <paramref name="level"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.ToString">
            <summary>
            Returns the <see cref="P:ServiceStack.MiniProfiler.Profiler.Root"/>'s <see cref="P:ServiceStack.MiniProfiler.Timing.Name"/> and <see cref="P:ServiceStack.MiniProfiler.Profiler.DurationMilliseconds"/> this profiler recorded.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Equals(System.Object)">
            <summary>
            Returns true if Ids match.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.GetHashCode">
            <summary>
            Returns hashcode of Id.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.#ctor">
            <summary>
            Obsolete - used for serialization.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.GetTimingHierarchy">
            <summary>
            Walks the <see cref="T:ServiceStack.MiniProfiler.Timing"/> hierarchy contained in this profiler, starting with <see cref="P:ServiceStack.MiniProfiler.Profiler.Root"/>, and returns each Timing found.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.GetRoundedMilliseconds(System.Int64)">
            <summary>
            Returns milliseconds based on Stopwatch's Frequency.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Start(ServiceStack.MiniProfiler.ProfileLevel)">
            <summary>
            Starts a new MiniProfiler based on the current <see cref="T:ServiceStack.MiniProfiler.IProfilerProvider"/>. This new profiler can be accessed by
            <see cref="P:ServiceStack.MiniProfiler.Profiler.Current"/>
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Stop(System.Boolean)">
            <summary>
            Ends the current profiling session, if one exists.
            </summary>
            <param name="discardResults">
            When true, clears the <see cref="P:ServiceStack.MiniProfiler.Profiler.Current"/> for this HttpContext, allowing profiling to 
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.StepStatic(System.String,ServiceStack.MiniProfiler.ProfileLevel)">
            <summary>
            Returns an <see cref="T:System.IDisposable"/> that will time the code between its creation and disposal. Use this method when you
            do not wish to include the MvcMiniProfiler namespace for the <see cref="M:ServiceStack.MiniProfiler.MiniProfilerExtensions.Step(ServiceStack.MiniProfiler.Profiler,System.String,ServiceStack.MiniProfiler.ProfileLevel)"/> extension method.
            </summary>
            <param name="name">A descriptive name for the code that is encapsulated by the resulting IDisposable's lifetime.</param>
            <param name="level">This step's visibility level; allows filtering when <see cref="M:ServiceStack.MiniProfiler.Profiler.Start(ServiceStack.MiniProfiler.ProfileLevel)"/> is called.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.RenderIncludes(System.Nullable{ServiceStack.MiniProfiler.RenderPosition},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Returns the css and javascript includes needed to display the MiniProfiler results UI.
            </summary>
            <param name="position">Which side of the page the profiler popup button should be displayed on (defaults to left)</param>
            <param name="showTrivial">Whether to show trivial timings by default (defaults to false)</param>
            <param name="showTimeWithChildren">Whether to show time the time with children column by default (defaults to false)</param>
            <param name="maxTracesToShow">The maximum number of trace popups to show before removing the oldest (defaults to 15)</param>
            <param name="xhtml">xhtml rendering mode, ensure script tag is closed ... etc</param>
            <param name="showControls">when true, shows buttons to minimize and clear MiniProfiler results</param>
            <returns>Script and link elements normally; an empty string when there is no active profiling session.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.ToJson">
            <summary>
            Renders the current <see cref="T:ServiceStack.MiniProfiler.Profiler"/> to json.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.ToJson(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Renders the parameter <see cref="T:ServiceStack.MiniProfiler.Profiler"/> to json.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.FromJson(System.String)">
            <summary>
            Deserializes the json string parameter to a <see cref="T:ServiceStack.MiniProfiler.Profiler"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Clone">
            <summary>
            Create a DEEP clone of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.GetInProgressCommands">
            <summary>
            Returns all currently open commands on this connection
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.GetSqlTimings">
            <summary>
            Returns all <see cref="T:ServiceStack.MiniProfiler.SqlTiming"/> results contained in all child <see cref="T:ServiceStack.MiniProfiler.Timing"/> steps.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Profiler._sqlExecutionCounts">
            <summary>
            Contains any sql statements that are executed, along with how many times those statements are executed.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.AddSqlTiming(ServiceStack.MiniProfiler.SqlTiming)">
            <summary>
            Adds <paramref name="stats"/> to the current <see cref="T:ServiceStack.MiniProfiler.Timing"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.GetExecutedCount(ServiceStack.MiniProfiler.Data.ExecuteType)">
            <summary>
            Returns the number of sql statements of <paramref name="type"/> that were executed in all <see cref="T:ServiceStack.MiniProfiler.Timing"/>s.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Id">
            <summary>
            Identifies this Profiler so it may be stored/cached.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Name">
            <summary>
            A display name for this profiling session.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Started">
            <summary>
            When this profiler was instantiated.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.MachineName">
            <summary>
            Where this profiler was run.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Level">
            <summary>
            Allows filtering of <see cref="T:ServiceStack.MiniProfiler.Timing"/> steps based on what <see cref="T:ServiceStack.MiniProfiler.ProfileLevel"/> 
            the steps are created with.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Root">
            <summary>
            The first <see cref="T:ServiceStack.MiniProfiler.Timing"/> that is created and started when this profiler is instantiated.
            All other <see cref="T:ServiceStack.MiniProfiler.Timing"/>s will be children of this one.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.User">
            <summary>
            A string identifying the user/client that is profiling this request.  Set <see cref="P:ServiceStack.MiniProfiler.Profiler.Settings.UserProvider"/>
            with an <see cref="T:ServiceStack.MiniProfiler.IUserProvider"/>-implementing class to provide a custom value.
            </summary>
            <remarks>
            If this is not set manually at some point, the <see cref="P:ServiceStack.MiniProfiler.Profiler.Settings.UserProvider"/> implementation will be used;
            by default, this will be the current request's ip address.
            </remarks>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.HasUserViewed">
            <summary>
            Returns true when this MiniProfiler has been viewed by the <see cref="P:ServiceStack.MiniProfiler.Profiler.User"/> that recorded it.
            </summary>
            <remarks>
            Allows POSTs that result in a redirect to be profiled. <see cref="P:ServiceStack.MiniProfiler.Profiler.Settings.Storage"/> implementation
            will keep a list of all profilers that haven't been fetched down.
            </remarks>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Stopwatch">
            <summary>
            For unit testing, returns the timer.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.DurationMilliseconds">
            <summary>
            Milliseconds, to one decimal place, that this MiniProfiler ran.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.HasTrivialTimings">
            <summary>
            Returns true when <see cref="P:ServiceStack.MiniProfiler.Profiler.Root"/> or any of its <see cref="P:ServiceStack.MiniProfiler.Timing.Children"/> are <see cref="P:ServiceStack.MiniProfiler.Timing.IsTrivial"/>.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.HasAllTrivialTimings">
            <summary>
            Returns true when all child <see cref="T:ServiceStack.MiniProfiler.Timing"/>s are <see cref="P:ServiceStack.MiniProfiler.Timing.IsTrivial"/>.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.TrivialDurationThresholdMilliseconds">
            <summary>
            Any Timing step with a duration less than or equal to this will be hidden by default in the UI; defaults to 2.0 ms.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.ElapsedTicks">
            <summary>
            Ticks since this MiniProfiler was started.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Head">
            <summary>
            Points to the currently executing Timing. 
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Current">
            <summary>
            Gets the currently running MiniProfiler for the current HttpContext; null if no MiniProfiler was <see cref="M:ServiceStack.MiniProfiler.Profiler.Start(ServiceStack.MiniProfiler.ProfileLevel)"/>ed.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.SqlProfiler">
            <summary>
            Contains information about queries executed during this profiling session.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.DurationMillisecondsInSql">
            <summary>
            Milliseconds, to one decimal place, that this MiniProfiler was executing sql.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.HasSqlTimings">
            <summary>
            Returns true when we have profiled queries.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.HasDuplicateSqlTimings">
            <summary>
            Returns true when any child Timings have duplicate queries.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.ExecutedReaders">
            <summary>
            How many sql data readers were executed in all <see cref="T:ServiceStack.MiniProfiler.Timing"/> steps.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.ExecutedScalars">
            <summary>
            How many sql scalar queries were executed in all <see cref="T:ServiceStack.MiniProfiler.Timing"/> steps.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.ExecutedNonQueries">
            <summary>
            How many sql non-query statements were executed in all <see cref="T:ServiceStack.MiniProfiler.Timing"/> steps.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Profiler.Settings">
            <summary>
            Various configuration properties.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Settings.ExcludeAssembly(System.String)">
            <summary>
            Excludes the specified assembly from the stack trace output.
            </summary>
            <param name="assemblyName">The short name of the assembly. AssemblyName.Name</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Settings.ExcludeType(System.String)">
            <summary>
            Excludes the specified type from the stack trace output.
            </summary>
            <param name="typeToExclude">The System.Type name to exclude</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Settings.ExcludeMethod(System.String)">
            <summary>
            Excludes the specified method name from the stack trace output.
            </summary>
            <param name="methodName">The name of the method</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Settings.EnsureStorageStrategy">
            <summary>
            Make sure we can at least store profiler results to the http runtime cache.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.AssembliesToExclude">
            <summary>
            Assemblies to exclude from the stack trace report.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.TypesToExclude">
            <summary>
            Types to exclude from the stack trace report.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.MethodsToExclude">
            <summary>
            Methods to exclude from the stack trace report.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.StackMaxLength">
            <summary>
            The max length of the stack string to report back; defaults to 120 chars.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.TrivialDurationThresholdMilliseconds">
            <summary>
            Any Timing step with a duration less than or equal to this will be hidden by default in the UI; defaults to 2.0 ms.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.PopupShowTimeWithChildren">
            <summary>
            Dictates if the "time with children" column is displayed by default, defaults to false.
            For a per-page override you can use .RenderIncludes(showTimeWithChildren: true/false)
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.PopupShowTrivial">
            <summary>
            Dictates if trivial timings are displayed by default, defaults to false.
            For a per-page override you can use .RenderIncludes(showTrivial: true/false)
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.PopupMaxTracesToShow">
            <summary>
            Determines how many traces to show before removing the oldest; defaults to 15.
            For a per-page override you can use .RenderIncludes(maxTracesToShow: 10)
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.PopupRenderPosition">
            <summary>
            Dictates on which side of the page the profiler popup button is displayed; defaults to left.
            For a per-page override you can use .RenderIncludes(position: RenderPosition.Left/Right)
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.ShowControls">
            <summary>
            Determines if min-max, clear, etc are rendered; defaults to false.
            For a per-page override you can use .RenderIncludes(showControls: true/false)
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.ExcludeStackTraceSnippetFromSqlTimings">
            <summary>
            By default, SqlTimings will grab a stack trace to help locate where queries are being executed.
            When this setting is true, no stack trace will be collected, possibly improving profiler performance.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.IgnoredPaths">
            <summary>
            When <see cref="M:ServiceStack.MiniProfiler.Profiler.Start(ServiceStack.MiniProfiler.ProfileLevel)"/> is called, if the current request url contains any items in this property,
            no profiler will be instantiated and no results will be displayed.
            Default value is { "/ssr-", "/content/", "/scripts/", "/favicon.ico" }.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.RouteBasePath">
            <summary>
            The path under which ALL routes are registered in, defaults to the application root.  For example, "~/myDirectory/" would yield
            "/myDirectory/ssr-includes.js" rather than just "/mini-profiler-includes.js"
            Any setting here should be in APP RELATIVE FORM, e.g. "~/myDirectory/"
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.Storage">
            <summary>
            Understands how to save and load MiniProfilers. Used for caching between when
            a profiling session ends and results can be fetched to the client, and for showing shared, full-page results.
            </summary>
            <remarks>
            The normal profiling session life-cycle is as follows:
            1) request begins
            2) profiler is started
            3) normal page/controller/request execution
            4) profiler is stopped
            5) profiler is cached with <see cref="P:ServiceStack.MiniProfiler.Profiler.Settings.Storage"/>'s implementation of <see cref="M:ServiceStack.MiniProfiler.Storage.IStorage.Save(ServiceStack.MiniProfiler.Profiler)"/>
            6) request ends
            7) page is displayed and profiling results are ajax-fetched down, pulling cached results from 
               <see cref="P:ServiceStack.MiniProfiler.Profiler.Settings.Storage"/>'s implementation of <see cref="M:ServiceStack.MiniProfiler.Storage.IStorage.Load(System.Guid)"/>
            </remarks>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.SqlFormatter">
            <summary>
            The formatter applied to the SQL being rendered (used only for UI)
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.UserProvider">
            <summary>
            Provides user identification for a given profiling request.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.Version">
            <summary>
            Assembly version of this dank MiniProfiler.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.ProfilerProvider">
            <summary>
            The provider used to provider the current instance of a provider
            This is also 
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.Results_Authorize">
            <summary>
            A function that determines who can access the MiniProfiler results url.  It should return true when
            the request client has access, false for a 401 to be returned. HttpRequest parameter is the current request and
            MiniProfiler parameter is the results that were profiled.
            </summary>
            <remarks>
            Both the HttpRequest and MiniProfiler parameters that will be passed into this function should never be null.
            </remarks>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.StopwatchProvider">
            <summary>
            Allows switching out stopwatches for unit testing.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.ProfileLevel">
            <summary>
            Categorizes individual <see cref="T:ServiceStack.MiniProfiler.Timing"/> steps to allow filtering.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.ProfileLevel.Info">
            <summary>
            Default level given to Timings.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.ProfileLevel.Verbose">
            <summary>
            Useful when profiling many items in a loop, but you don't wish to always see this detail.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.RenderPosition">
            <summary>
            Dictates on which side of the page the profiler popup button is displayed; defaults to left.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.RenderPosition.Left">
            <summary>
            Profiler popup button is displayed on the left.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.RenderPosition.Right">
            <summary>
            Profiler popup button is displayed on the right.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.MiniProfilerExtensions">
            <summary>
            Contains helper methods that ease working with null <see cref="T:ServiceStack.MiniProfiler.Profiler"/>s.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.MiniProfilerExtensions.Inline``1(ServiceStack.MiniProfiler.Profiler,System.Func{``0},System.String)">
            <summary>
            Wraps <paramref name="selector"/> in a <see cref="M:ServiceStack.MiniProfiler.MiniProfilerExtensions.Step(ServiceStack.MiniProfiler.Profiler,System.String,ServiceStack.MiniProfiler.ProfileLevel)"/> call and executes it, returning its result.
            </summary>
            <param name="profiler">The current profiling session or null.</param>
            <param name="selector">Method to execute and profile.</param>
            <param name="name">The <see cref="T:ServiceStack.MiniProfiler.Timing"/> step name used to label the profiler results.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.MiniProfilerExtensions.Step(ServiceStack.MiniProfiler.Profiler,System.String,ServiceStack.MiniProfiler.ProfileLevel)">
            <summary>
            Returns an <see cref="T:System.IDisposable"/> that will time the code between its creation and disposal.
            </summary>
            <param name="profiler">The current profiling session or null.</param>
            <param name="name">A descriptive name for the code that is encapsulated by the resulting IDisposable's lifetime.</param>
            <param name="level">This step's visibility level; allows filtering when <see cref="M:ServiceStack.MiniProfiler.Profiler.Start(ServiceStack.MiniProfiler.ProfileLevel)"/> is called.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.MiniProfilerExtensions.AddProfilerResults(ServiceStack.MiniProfiler.Profiler,ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Adds <paramref name="externalProfiler"/>'s <see cref="T:ServiceStack.MiniProfiler.Timing"/> hierarchy to this profiler's current Timing step,
            allowing other threads, remote calls, etc. to be profiled and joined into this profiling session.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.MiniProfilerExtensions.Render(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Returns an html-encoded string with a text-representation of <paramref name="profiler"/>; returns "" when profiler is null.
            </summary>
            <param name="profiler">The current profiling session or null.</param>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlFormatters.InlineFormatter">
            <summary>
            Formats any SQL query with inline parameters, optionally including the value type
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlFormatters.ISqlFormatter">
            <summary>
            Takes a SqlTiming and returns a formatted SQL string, for parameter replacement, etc.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlFormatters.ISqlFormatter.FormatSql(ServiceStack.MiniProfiler.SqlTiming)">
            <summary>
            Return SQL the way you want it to look on the in the trace. Usually used to format parameters 
            </summary>
            <param name="timing"></param>
            <returns>Formatted SQL</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlFormatters.InlineFormatter.#ctor(System.Boolean)">
            <summary>
            Creates a new Inline SQL Formatter, optionally including the parameter type info in comments beside the replaced value
            </summary>
            <param name="includeTypeInfo">whether to include a comment after the value, indicating the type, e.g. /* @myParam DbType.Int32 */</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlFormatters.InlineFormatter.FormatSql(ServiceStack.MiniProfiler.SqlTiming)">
            <summary>
            Formats the SQL in a generic frieldly format, including the parameter type information in a comment if it was specified in the InlineFormatter constructor
            </summary>
            <param name="timing">The SqlTiming to format</param>
            <returns>A formatted SQL string</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlFormatters.InlineFormatter.GetParameterValue(ServiceStack.MiniProfiler.SqlTimingParameter)">
            <summary>
            Returns a string representation of the parameter's value, including the type
            </summary>
            <param name="p">The parameter to get a value for</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlFormatters.OracleFormatter">
            <summary>
            NOT IMPLEMENTED - will format statements with paramters in an Oracle friendly way
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlFormatters.OracleFormatter.FormatSql(ServiceStack.MiniProfiler.SqlTiming)">
            <summary>
            Does NOTHING, implement me!
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlFormatters.SqlServerFormatter">
            <summary>
            Formats SQL server queries with a DECLARE up top for parameter values
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlFormatters.SqlServerFormatter.FormatSql(ServiceStack.MiniProfiler.SqlTiming)">
            <summary>
            Formats the SQL in a SQL-Server friendly way, with DECLARE statements for the parameters up top.
            </summary>
            <param name="timing">The SqlTiming to format</param>
            <returns>A formatted SQL string</returns>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlProfiler">
            <summary>
            Contains helper code to time sql statements.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfiler.#ctor(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Returns a new SqlProfiler to be used in the 'profiler' session.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfiler.ExecuteStartImpl(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType)">
            <summary>
            Tracks when 'command' is started.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfiler.GetInProgressCommands">
            <summary>
            Returns all currently open commands on this connection
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfiler.ExecuteFinishImpl(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType,System.Data.Common.DbDataReader)">
            <summary>
            Finishes profiling for 'command', recording durations.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfiler.ReaderFinishedImpl(System.Data.Common.DbDataReader)">
            <summary>
            Called when 'reader' finishes its iterations and is closed.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlProfiler.Profiler">
            <summary>
            The profiling session this SqlProfiler is part of.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlProfilerExtensions">
            <summary>
            Helper methods that allow operation on SqlProfilers, regardless of their instantiation.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfilerExtensions.ExecuteStart(ServiceStack.MiniProfiler.SqlProfiler,System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType)">
            <summary>
            Tracks when 'command' is started.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfilerExtensions.ExecuteFinish(ServiceStack.MiniProfiler.SqlProfiler,System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType,System.Data.Common.DbDataReader)">
            <summary>
            Finishes profiling for 'command', recording durations.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfilerExtensions.ReaderFinish(ServiceStack.MiniProfiler.SqlProfiler,System.Data.Common.DbDataReader)">
            <summary>
            Called when 'reader' finishes its iterations and is closed.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlTiming">
            <summary>
            Profiles a single sql execution.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.#ctor(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType,ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Creates a new SqlTiming to profile 'command'.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.#ctor">
            <summary>
            Obsolete - used for serialization.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.ToString">
            <summary>
            Returns a snippet of the sql command and the duration.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.Equals(System.Object)">
            <summary>
            Returns true if Ids match.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.GetHashCode">
            <summary>
            Returns hashcode of Id.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.ExecutionComplete(System.Boolean)">
            <summary>
            Called when command execution is finished to determine this SqlTiming's duration.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.ReaderFetchComplete">
            <summary>
            Called when database reader is closed, ending profiling for <see cref="F:ServiceStack.MiniProfiler.Data.ExecuteType.Reader"/> SqlTimings.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.AddSpacesToParameters(System.String)">
            <summary>
            To help with display, put some space around sammiched commas
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.Id">
            <summary>
            Unique identifier for this SqlTiming.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.ExecuteType">
            <summary>
            Category of sql statement executed.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.CommandString">
            <summary>
            The sql that was executed.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.FormattedCommandString">
            <summary>
            The command string with special formatting applied based on MiniProfiler.Settings.SqlFormatter
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.StackTraceSnippet">
            <summary>
            Roughly where in the calling code that this sql was executed.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.StartMilliseconds">
            <summary>
            Offset from main MiniProfiler start that this sql began.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.DurationMilliseconds">
            <summary>
            How long this sql statement took to execute.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.FirstFetchDurationMilliseconds">
            <summary>
            When executing readers, how long it took to come back initially from the database, 
            before all records are fetched and reader is closed.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.Parameters">
            <summary>
            Stores any parameter names and values used by the profiled DbCommand.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.ParentTimingId">
            <summary>
            Id of the Timing this statement was executed in.
            </summary>
            <remarks>
            Needed for database deserialization.
            </remarks>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.ParentTiming">
            <summary>
            The Timing step that this sql execution occurred in.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.IsDuplicate">
            <summary>
            True when other identical sql statements have been executed during this MiniProfiler session.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlTimingParameter">
            <summary>
            Information about a DbParameter used in the sql statement profiled by SqlTiming.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTimingParameter.Equals(System.Object)">
            <summary>
            Returns true if this has the same parent <see cref="P:ServiceStack.MiniProfiler.SqlTiming.Id"/>, <see cref="P:ServiceStack.MiniProfiler.SqlTimingParameter.Name"/> and <see cref="P:ServiceStack.MiniProfiler.SqlTimingParameter.Value"/> as <paramref name="obj"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTimingParameter.GetHashCode">
            <summary>
            Returns the XOR of certain properties.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTimingParameter.ParentSqlTimingId">
            <summary>
            Which SqlTiming this Parameter was executed with.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTimingParameter.Name">
            <summary>
            Parameter name, e.g. "@routeName"
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTimingParameter.Value">
            <summary>
            The value submitted to the database.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTimingParameter.DbType">
            <summary>
            System.Data.DbType, e.g. "String", "Bit"
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTimingParameter.Size">
            <summary>
            How large the type is, e.g. for string, size could be 4000
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase">
            <summary>
            Understands how to save MiniProfiler results to a MSSQL database, allowing more permanent storage and
            querying of slow results.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Storage.IStorage">
            <summary>
            Provides saving and loading <see cref="T:ServiceStack.MiniProfiler.Profiler"/>s to a storage medium.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.IStorage.Save(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Stores <paramref name="profiler"/> under its <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>.
            </summary>
            <param name="profiler">The results of a profiling session.</param>
            <remarks>
            Should also ensure the profiler is stored as being unviewed by its profiling <see cref="P:ServiceStack.MiniProfiler.Profiler.User"/>.
            </remarks>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.IStorage.Load(System.Guid)">
            <summary>
            Returns a <see cref="T:ServiceStack.MiniProfiler.Profiler"/> from storage based on <paramref name="id"/>, which should map to <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>.
            </summary>
            <remarks>
            Should also update that the resulting profiler has been marked as viewed by its profiling <see cref="P:ServiceStack.MiniProfiler.Profiler.User"/>.
            </remarks>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.IStorage.GetUnviewedIds(System.String)">
            <summary>
            Returns a list of <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <see cref="P:ServiceStack.MiniProfiler.Profiler.Settings.UserProvider"/>.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.#ctor(System.String)">
            <summary>
            Returns a new SqlServerDatabaseStorage object that will insert into the database identified by connectionString.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.Save(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Saves 'profiler' to a database under its <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.Load(System.Guid)">
            <summary>
            Returns the MiniProfiler identified by 'id' from the database or null when no MiniProfiler exists under that 'id'.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.GetUnviewedIds(System.String)">
            <summary>
            Returns a list of <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <see cref="P:ServiceStack.MiniProfiler.Profiler.Settings.UserProvider"/>.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.GetConnection">
            <summary>
            Returns a DbConnection for your specific provider.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.GetOpenConnection">
            <summary>
            Returns a DbConnection already opened for execution.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.MapTimings(ServiceStack.MiniProfiler.Profiler,System.Collections.Generic.List{ServiceStack.MiniProfiler.Timing},System.Collections.Generic.List{ServiceStack.MiniProfiler.SqlTiming},System.Collections.Generic.List{ServiceStack.MiniProfiler.SqlTimingParameter})">
            <summary>
            Giving freshly selected collections, this method puts them in the correct
            hierarchy under the 'result' MiniProfiler.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.ConnectionString">
            <summary>
            How we connect to the database used to save/load MiniProfiler results.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage">
            <summary>
            Understands how to store a <see cref="T:ServiceStack.MiniProfiler.Profiler"/> to the <see cref="P:System.Web.HttpRuntime.Cache"/> with absolute expiration.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.CacheKeyPrefix">
            <summary>
            The string that prefixes all keys that MiniProfilers are saved under, e.g.
            "mini-profiler-ecfb0050-7ce8-4bf1-bf82-2cb38e90e31e".
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.#ctor(System.TimeSpan)">
            <summary>
            Returns a new HttpRuntimeCacheStorage class that will cache MiniProfilers for the specified duration.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.Save(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Saves <paramref name="profiler"/> to the HttpRuntime.Cache under a key concated with <see cref="F:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.CacheKeyPrefix"/>
            and the parameter's <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.Load(System.Guid)">
            <summary>
            Returns the saved <see cref="T:ServiceStack.MiniProfiler.Profiler"/> identified by <paramref name="id"/>. Also marks the resulting
            profiler <see cref="P:ServiceStack.MiniProfiler.Profiler.HasUserViewed"/> to true.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.GetUnviewedIds(System.String)">
            <summary>
            Returns a list of <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <see cref="P:ServiceStack.MiniProfiler.Profiler.Settings.UserProvider"/>.</param>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.AddPerUserUnviewedIdsLock">
            <summary>
            Syncs access to runtime cache when adding a new list of ids for a user.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.CacheDuration">
            <summary>
            How long to cache each <see cref="T:ServiceStack.MiniProfiler.Profiler"/> for (i.e. the absolute expiration parameter of 
            <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemUpdateCallback)"/>)
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Timing">
            <summary>
            An individual profiling step that can contain child steps.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.RebuildParentTimings">
            <summary>
            Rebuilds all the parent timings on deserialization calls
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Timing._startTicks">
            <summary>
            Offset from parent MiniProfiler's creation that this Timing was created.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.#ctor(ServiceStack.MiniProfiler.Profiler,ServiceStack.MiniProfiler.Timing,System.String)">
            <summary>
            Creates a new Timing named 'name' in the 'profiler's session, with 'parent' as this Timing's immediate ancestor.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.#ctor">
            <summary>
            Obsolete - used for serialization.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.ToString">
            <summary>
            Returns this Timing's Name.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.Equals(System.Object)">
            <summary>
            Returns true if Ids match.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.GetHashCode">
            <summary>
            Returns hashcode of Id.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.AddKeyValue(System.String,System.String)">
            <summary>
            Adds arbitrary string 'value' under 'key', allowing custom properties to be stored in this Timing step.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.Stop">
            <summary>
            Completes this Timing's duration and sets the MiniProfiler's Head up one level.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.AddChild(ServiceStack.MiniProfiler.Timing)">
            <summary>
            Add the parameter 'timing' to this Timing's Children collection.
            </summary>
            <remarks>
            Used outside this assembly for custom deserialization when creating an <see cref="T:ServiceStack.MiniProfiler.Storage.IStorage"/> implementation.
            </remarks>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.AddSqlTiming(ServiceStack.MiniProfiler.SqlTiming)">
            <summary>
            Adds the parameter 'sqlTiming' to this Timing's SqlTimings collection.
            </summary>
            <param name="sqlTiming">A sql statement profiling that was executed in this Timing step.</param>
            <remarks>
            Used outside this assembly for custom deserialization when creating an <see cref="T:ServiceStack.MiniProfiler.Storage.IStorage"/> implementation.
            </remarks>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.GetExecutedCount(ServiceStack.MiniProfiler.Data.ExecuteType)">
            <summary>
            Returns the number of sql statements of <paramref name="type"/> that were executed in this <see cref="T:ServiceStack.MiniProfiler.Timing"/>.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.Id">
            <summary>
            Unique identifer for this timing; set during construction.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.Name">
            <summary>
            Text displayed when this Timing is rendered.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.DurationMilliseconds">
            <summary>
            How long this Timing step took in ms; includes any <see cref="P:ServiceStack.MiniProfiler.Timing.Children"/> Timings' durations.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.StartMilliseconds">
            <summary>
            The offset from the start of profiling.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.Children">
            <summary>
            All sub-steps that occur within this Timing step. Add new children through <see cref="M:ServiceStack.MiniProfiler.Timing.AddChild(ServiceStack.MiniProfiler.Timing)"/>
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.KeyValues">
            <summary>
            Stores arbitrary key/value strings on this Timing step. Add new tuples through <see cref="M:ServiceStack.MiniProfiler.Timing.AddKeyValue(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.SqlTimings">
            <summary>
            Any queries that occurred during this Timing step.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.ParentTimingId">
            <summary>
            Needed for database deserialization and JSON serialization.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.ParentTiming">
            <summary>
            Which Timing this Timing is under - the duration that this step takes will be added to its parent's duration.
            </summary>
            <remarks>This will be null for the root (initial) Timing.</remarks>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.DurationWithoutChildrenMilliseconds">
            <summary>
            Gets the elapsed milliseconds in this step without any children's durations.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.SqlTimingsDurationMilliseconds">
            <summary>
            Gets the aggregate elapsed milliseconds of all SqlTimings executed in this Timing, excluding Children Timings.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.IsTrivial">
            <summary>
            Returns true when this <see cref="P:ServiceStack.MiniProfiler.Timing.DurationWithoutChildrenMilliseconds"/> is less than the configured
            <see cref="P:ServiceStack.MiniProfiler.Profiler.Settings.TrivialDurationThresholdMilliseconds"/>, by default 2.0 ms.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.Profiler">
            <summary>
            Reference to the containing profiler, allowing this Timing to affect the Head and get Stopwatch readings.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.HasChildren">
            <summary>
            Returns true when this Timing has inner Timing steps.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.HasSqlTimings">
            <summary>
            Returns true if this Timing step collected sql execution timings.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.HasDuplicateSqlTimings">
            <summary>
            Returns true if any <see cref="T:ServiceStack.MiniProfiler.SqlTiming"/>s executed in this step are detected as duplicate statements.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.IsRoot">
            <summary>
            Returns true when this Timing is the first one created in a MiniProfiler session.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.Depth">
            <summary>
            How far away this Timing is from the Profiler's Root.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.ExecutedReaders">
            <summary>
            How many sql data readers were executed in this Timing step. Does not include queries in any child Timings.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.ExecutedScalars">
            <summary>
            How many sql scalar queries were executed in this Timing step. Does not include queries in any child Timings.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.ExecutedNonQueries">
            <summary>
            How many sql non-query statements were executed in this Timing step. Does not include queries in any child Timings.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.UI.MiniProfilerHandler">
            <summary>
            Understands how to route and respond to MiniProfiler UI urls.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.UI.MiniProfilerHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Returns either includes' css/javascript or results' html.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.UI.MiniProfilerHandler.Includes(ServiceStack.ServiceHost.IHttpRequest,ServiceStack.ServiceHost.IHttpResponse,System.String)">
            <summary>
            Handles rendering static content files.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.UI.MiniProfilerHandler.Results(ServiceStack.ServiceHost.IHttpRequest,ServiceStack.ServiceHost.IHttpResponse)">
            <summary>
            Handles rendering a previous MiniProfiler session, identified by its "?id=GUID" on the query.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.UI.MiniProfilerHandler._ResourceCache">
            <summary>
            Embedded resource contents keyed by filename.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.UI.MiniProfilerHandler.NotFound(ServiceStack.ServiceHost.IHttpResponse,System.String,System.String)">
            <summary>
            Helper method that sets a proper 404 response code.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.UI.MiniProfilerHandler.IsReusable">
            <summary>
            Try to keep everything static so we can easily be reused.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.WebRequestProfilerProvider">
            <summary>
            HttpContext based profiler provider.  This is the default provider to use in a web context.
            The current profiler is associated with a HttpContext.Current ensuring that profilers are 
            specific to a individual HttpRequest.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.WebRequestProfilerProvider.#ctor">
            <summary>
            Public constructor.  This also registers any UI routes needed to display results
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.WebRequestProfilerProvider.Start(ServiceStack.MiniProfiler.ProfileLevel)">
            <summary>
            Starts a new MiniProfiler and associates it with the current <see cref="P:System.Web.HttpContext.Current"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.WebRequestProfilerProvider.Stop(System.Boolean)">
            <summary>
            Ends the current profiling session, if one exists.
            </summary>
            <param name="discardResults">
            When true, clears the <see cref="P:ServiceStack.MiniProfiler.Profiler.Current"/> for this HttpContext, allowing profiling to 
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.WebRequestProfilerProvider.EnsureName(ServiceStack.MiniProfiler.Profiler,System.Web.HttpRequest)">
            <summary>
            Makes sure 'profiler' has a Name, pulling it from route data or url.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.WebRequestProfilerProvider.GetCurrentProfiler">
            <summary>
            Returns the current profiler
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.MiniProfiler.WebRequestProfilerProvider.Current">
            <summary>
            Gets the currently running MiniProfiler for the current HttpContext; null if no MiniProfiler was <see cref="M:ServiceStack.MiniProfiler.WebRequestProfilerProvider.Start(ServiceStack.MiniProfiler.ProfileLevel)"/>ed.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.WebRequestProfilerProvider.Settings">
            <summary>
            WebRequestProfilerProvider specific configurations
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.WebRequestProfilerProvider.Settings.UserProvider">
            <summary>
            Provides user identification for a given profiling request.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.ContainerResolveCache.CreateInstance(System.Type)">
            <summary>
            Creates instance using straight Resolve approach.
            This will throw an exception if resolution fails
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.ContainerResolveCache.CreateInstance(System.Type,System.Boolean)">
            <summary>
            Creates instance using the TryResolve approach if tryResolve = true.
            Otherwise uses Resolve approach, which will throw an exception if resolution fails
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.Cookies.AddPermanentCookie(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Sets a persistent cookie which never expires
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.Cookies.AddSessionCookie(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Sets a session cookie which expires after the browser session closes
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.Cookies.DeleteCookie(System.String)">
            <summary>
            Deletes a specified cookie by setting its value to empty and expiration to -1 days
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.Cookies.AddCookie(System.Net.Cookie)">
            <summary>
            Sets a persistent cookie which expires after the given time
            </summary>
        </member>
        <member name="T:ServiceStack.ServiceHost.DefaultRequestAttribute">
            <summary>
            Lets you Register new Services and the optional restPaths will be registered against 
            this default Request Type
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceHost.DtoUtils.ResponseStatusPropertyName">
            <summary>
            Naming convention for the ResponseStatus property name on the response DTO
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceHost.DtoUtils.UrnServiceErrorType">
            <summary>
            Service error logs are kept in 'urn:ServiceErrors:{ServiceName}'
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceHost.DtoUtils.CombinedServiceLogId">
            <summary>
            Combined service error logs are maintained in 'urn:ServiceErrors:All'
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.DtoUtils.CreateResponseDto(System.Object,ServiceStack.ServiceInterface.ServiceModel.ResponseStatus)">
            <summary>
            Create an instance of the service response dto type and inject it with the supplied responseStatus
            </summary>
            <param name="request"></param>
            <param name="responseStatus"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceHost.DtoUtils.HandleException(ServiceStack.ServiceHost.IResolver,System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="iocResolver"></param>
            <param name="request"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceHost.DtoUtils.GetRequestErrorBody(System.Object)">
            <summary>
            Override to provide additional/less context about the Service Exception. 
            By default the request is serialized and appended to the ResponseStatus StackTrace.
            </summary>
        </member>
        <member name="T:ServiceStack.VirtualPath.InMemoryVirtualPathProvider">
            <summary>
            In Memory repository for files. Useful for testing.
            </summary>
        </member>
        <member name="T:ServiceStack.WebHost.Endpoints.ActionContext">
            <summary>
            Context to capture IService action
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.AppHostExtensions.GetContainer(ServiceStack.WebHost.Endpoints.IAppHost)">
            <summary>
            Get an IAppHost container. 
            Note: Registering dependencies should only be done during setup/configuration 
            stage and remain immutable there after for thread-safety.
            </summary>
            <param name="appHost"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.GetHtmlHelper">
            <summary>
            Ensure the same instance is used for subclasses
            </summary>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.InitHelpers">
            <summary>
            Called before page is executed
            </summary>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.OnLoad">
            <summary>
            Called after page is executed but before it's merged with the 
            website template if any.
            </summary>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.Raw(System.String)">
            <summary>
            Don't HTML encode safe output
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.Partial(System.String,System.Object)">
            <summary>
            Return the output of a different view with the specified name 
            using the supplied model
            </summary>
            <param name="viewName"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.Get``1">
            <summary>
            Resolve registered Assemblies
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.ViewEngine">
            <summary>
            Reference to MarkdownViewEngine
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.AppHost">
            <summary>
            The AppHost so you can access configuration and resolve dependencies, etc.
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.MarkdownPage">
            <summary>
            This precompiled Markdown page with Metadata
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.Html">
            <summary>
            ASP.NET MVC's HtmlHelper
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.ScopeArgs">
            <summary>
            All variables passed to and created by your page. 
            The Response DTO is stored and accessible via the 'Model' variable.
             
            All variables and outputs created are stored in ScopeArgs which is what's available
            to your website template. The Generated page is stored in the 'Body' variable.
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.RenderHtml">
            <summary>
            Whether HTML or Markdown output is requested
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.Model">
            <summary>
            The Response DTO
            </summary>
        </member>
        <member name="T:ServiceStack.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.Registration_CantRegisterContainer">
            <summary>
              Looks up a localized string similar to Container service is built-in and read-only..
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.Registration_IncompatibleAsType">
            <summary>
              Looks up a localized string similar to Service type {0} does not inherit or implement {1}..
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.ResolutionException_MissingNamedType">
            <summary>
              Looks up a localized string similar to Required dependency of type {0} named &apos;{1}&apos; could not be resolved..
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.ResolutionException_MissingType">
            <summary>
              Looks up a localized string similar to Required dependency of type {0} could not be resolved..
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.ResolutionException_UnknownScope">
            <summary>
              Looks up a localized string similar to Unknown scope..
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.HttpRequestExtensions.GetItemOrCookie(ServiceStack.ServiceHost.IHttpRequest,System.String)">
            <summary>
            Gets string value from Items[name] then Cookies[name] if exists.
            Useful when *first* setting the users response cookie in the request filter.
            To access the value for this initial request you need to set it in Items[].
            </summary>
            <returns>string value or null if it doesn't exist</returns>
        </member>
        <member name="M:ServiceStack.ServiceHost.HttpRequestExtensions.GetParam(ServiceStack.ServiceHost.IHttpRequest,System.String)">
            <summary>
            Gets request paramater string value by looking in the following order:
            - QueryString[name]
            - FormData[name]
            - Cookies[name]
            - Items[name]
            </summary>
            <returns>string value or null if it doesn't exist</returns>
        </member>
        <member name="M:ServiceStack.ServiceHost.HttpResponseExtensions.SetPermanentCookie(ServiceStack.ServiceHost.IHttpResponse,System.String,System.String)">
            <summary>
            Sets a persistent cookie which never expires
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.HttpResponseExtensions.SetSessionCookie(ServiceStack.ServiceHost.IHttpResponse,System.String,System.String)">
            <summary>
            Sets a session cookie which expires after the browser session closes
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.HttpResponseExtensions.SetCookie(ServiceStack.ServiceHost.IHttpResponse,System.String,System.String,System.TimeSpan)">
            <summary>
            Sets a persistent cookie which expires after the given time
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.HttpResponseExtensions.SetCookie(ServiceStack.ServiceHost.IHttpResponse,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Sets a persistent cookie with an expiresAt date
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.HttpResponseExtensions.DeleteCookie(ServiceStack.ServiceHost.IHttpResponse,System.String)">
            <summary>
            Deletes a specified cookie by setting its value to empty and expiration to -1 days
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.RequestContextExtensions.ToOptimizedResult``1(ServiceStack.ServiceHost.IRequestContext,``0)">
            <summary>
            Returns the optimized result for the IRequestContext. 
            Does not use or store results in any cache.
            </summary>
            <param name="requestContext"></param>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceHost.RequestContextExtensions.ToOptimizedResultUsingCache``1(ServiceStack.ServiceHost.IRequestContext,ServiceStack.CacheAccess.ICacheClient,System.String,System.Func{``0})">
            <summary>
            Overload for the <see cref="!:ContentCacheManager.Resolve"/> method returning the most
            optimized result based on the MimeType and CompressionType from the IRequestContext.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.RequestContextExtensions.ToOptimizedResultUsingCache``1(ServiceStack.ServiceHost.IRequestContext,ServiceStack.CacheAccess.ICacheClient,System.String,System.Nullable{System.TimeSpan},System.Func{``0})">
            <summary>
            Overload for the <see cref="!:ContentCacheManager.Resolve"/> method returning the most
            optimized result based on the MimeType and CompressionType from the IRequestContext.
            <param name="expireCacheIn">How long to cache for, null is no expiration</param>
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.RequestContextExtensions.RemoveFromCache(ServiceStack.ServiceHost.IRequestContext,ServiceStack.CacheAccess.ICacheClient,System.String[])">
            <summary>
            Clears all the serialized and compressed caches set 
            by the 'Resolve' method for the cacheKey provided
            </summary>
            <param name="requestContext"></param>
            <param name="cacheClient"></param>
            <param name="cacheKeys"></param>
        </member>
        <member name="M:ServiceStack.ServiceHost.RestPath.IsMatch(System.String,System.String[])">
            <summary>
            For performance withPathInfoParts should already be a lower case string
            to minimize redundant matching operations.
            </summary>
            <param name="httpMethod"></param>
            <param name="withPathInfoParts"></param>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.ServiceHost.RestPath.PathComponentsCount">
            <summary>
            The number of segments separated by '/' determinable by path.Split('/').Length
            e.g. /path/to/here.ext == 3
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceHost.RestPath.TotalComponentsCount">
            <summary>
            The total number of segments after subparts have been exploded ('.') 
            e.g. /path/to/here.ext == 4
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceHost.RestPath.FirstMatchHashKey">
            <summary>
            Provide for quick lookups based on hashes that can be determined from a request url
            </summary>
        </member>
        <member name="T:ServiceStack.ServiceHost.ServiceControllerReflection">
            <summary>
            Keeping around just to compare how slow it is
            </summary>
        </member>
        <member name="T:ServiceStack.ServiceHost.ServiceExecOperations">
            <summary>
            Static type constants for referring to service exec methods
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.ServiceManager.#ctor(Funq.Container,ServiceStack.ServiceHost.ServiceController)">
            <summary>
            Inject alternative container and strategy for resolving Service Types
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceHost.XsdMetadata.GetBaseTypeWithTheSameName(System.Type)">
            <summary>
            Gets the name of the base most type in the heirachy tree with the same.
            
            We get an exception when trying to create a schema with multiple types of the same name
            like when inheriting from a DataContract with the same name.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.WebHost.Endpoints.AppHostBase">
            <summary>
            Inherit from this class if you want to host your web services inside an
            ASP.NET application.
            </summary>
        </member>
        <member name="T:ServiceStack.WebHost.Endpoints.IAppHost">
            <summary>
            ASP.NET or HttpListener ServiceStack host
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.IAppHost.Register``1(``0)">
            <summary>
            Register dependency in AppHost IOC on Startup
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.IAppHost.RegisterAs``2">
            <summary>
            AutoWired Registration of an interface with a concrete type in AppHost IOC on Startup.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAs"></typeparam>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.IAppHost.Release(System.Object)">
            <summary>
            Allows the clean up for executed autowired services and filters.
            Calls directly after services and filters are executed.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.IAppHost.OnEndRequest">
            <summary>
            Called at the end of each request. Enables Request Scope.
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.IAppHost.RegisterService(System.Type,System.String[])">
            <summary>
            Register an Adhoc web service on Startup
            </summary>
            <param name="serviceType"></param>
            <param name="atRestPaths"></param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.IAppHost.LoadPlugin(ServiceStack.WebHost.Endpoints.IPlugin[])">
            <summary>
            Apply plugins to this AppHost
            </summary>
            <param name="plugins"></param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.IAppHost.CreateServiceRunner``1(ServiceStack.WebHost.Endpoints.ActionContext)">
            <summary>
            Create a service runner for IService actions
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.IAppHost.ResolveAbsoluteUrl(System.String,ServiceStack.ServiceHost.IHttpRequest)">
            <summary>
            Resolve the absolute url for this request
            </summary>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.IAppHost.Routes">
            <summary>
            Register user-defined custom routes.
            </summary>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.IAppHost.ContentTypeFilters">
            <summary>
            Register custom ContentType serializers
            </summary>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.IAppHost.PreRequestFilters">
            <summary>
            Add Request Filters, to be applied before the dto is deserialized
            </summary>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.IAppHost.RequestFilters">
            <summary>
            Add Request Filters
            </summary>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.IAppHost.ResponseFilters">
            <summary>
            Add Response Filters
            </summary>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.IAppHost.ViewEngines">
            <summary>
            Add alternative HTML View Engines
            </summary>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.IAppHost.ExceptionHandler">
            <summary>
            Provide an exception handler for un-caught exceptions
            </summary>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.IAppHost.ServiceExceptionHandler">
            <summary>
            Provide an exception handler for unhandled exceptions
            </summary>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.IAppHost.CatchAllHandlers">
            <summary>
            Provide a catch-all handler that doesn't match any routes
            </summary>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.IAppHost.RequestBinders">
            <summary>
            Provide a custom model minder for a specific Request DTO
            </summary>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.IAppHost.Config">
            <summary>
            The AppHost config
            </summary>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.IAppHost.Plugins">
            <summary>
            List of pre-registered and user-defined plugins to be enabled in this AppHost
            </summary>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.IAppHost.VirtualPathProvider">
            <summary>
            Virtual access to file resources
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.AppHostBase.Resolve``1">
            <summary>
            Resolves from IoC container a specified type instance.
            </summary>
            <typeparam name="T">Type to be resolved.</typeparam>
            <returns>Instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.AppHostBase.ResolveService``1(System.Web.HttpContext)">
            <summary>
            Resolves and auto-wires a ServiceStack Service
            </summary>
            <typeparam name="T">Type to be resolved.</typeparam>
            <returns>Instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:ServiceStack.WebHost.Endpoints.AppHostHttpListenerBase">
            <summary>
            Inherit from this class if you want to host your web services inside a 
            Console Application, Windows Service, etc.
            
            Usage of HttpListener allows you to host webservices on the same port (:80) as IIS 
            however it requires admin user privillages.
            </summary>
        </member>
        <member name="T:ServiceStack.WebHost.Endpoints.Support.HttpListenerBase">
            <summary>
            Wrapper class for the HTTPListener to allow easier access to the
            server, for start and stop management and event routing of the actual
            inbound requests.
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.HttpListenerBase.Start(System.String)">
            <summary>
            Starts the Web Service
            </summary>
            <param name="urlBase">
            A Uri that acts as the base that the server is listening on.
            Format should be: http://127.0.0.1:8080/ or http://127.0.0.1:8080/somevirtual/
            Note: the trailing slash is required! For more info see the
            HttpListener.Prefixes property on MSDN.
            </param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.HttpListenerBase.Stop">
            <summary>
            Shut down the Web Service
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.HttpListenerBase.ProcessRequest(System.Net.HttpListenerContext)">
            <summary>
            Overridable method that can be used to implement a custom hnandler
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.HttpListenerBase.Resolve``1">
            <summary>
            Resolves from IoC container a specified type instance.
            </summary>
            <typeparam name="T">Type to be resolved.</typeparam>
            <returns>Instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.HttpListenerBase.ResolveService``1(System.Net.HttpListenerContext)">
            <summary>
            Resolves and auto-wires a ServiceStack Service
            </summary>
            <typeparam name="T">Type to be resolved.</typeparam>
            <returns>Instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.Support.HttpListenerBase.Plugins">
            TODO: plugin added with .Add method after host initialization won't be configured. Each plugin should have state so we can invoke Register method if host was already started.  
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.AppHostHttpListenerLongRunningBase.Start(System.String)">
            <summary>
            Starts the Web Service
            </summary>
            <param name="urlBase">
            A Uri that acts as the base that the server is listening on.
            Format should be: http://127.0.0.1:8080/ or http://127.0.0.1:8080/somevirtual/
            Note: the trailing slash is required! For more info see the
            HttpListener.Prefixes property on MSDN.
            </param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.AppHostHttpListenerLongRunningBase.ThreadPoolManager.Dispose">
            <summary>
            Exécute les tâches définies par l'application associées à la libération ou à la redéfinition des ressources non managées.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.AutoHyperlink">
            <summary>
            when true, (most) bare plain URLs are auto-hyperlinked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.AutoNewlines">
            <summary>
            when true, RETURN becomes a literal newline  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.EmptyElementSuffix">
            <summary>
            use ">" for HTML output, or " />" for XHTML output
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.EncodeProblemUrlCharacters">
            <summary>
            when true, problematic URL characters like [, ], (, and so forth will be encoded 
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.LinkEmails">
            <summary>
            when false, email addresses will never be auto-linked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.StrictBoldItalic">
            <summary>
            when true, bold and italic require non-word characters on either side  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="T:MarkdownSharp.Markdown">
            <summary>
            Markdown is a text-to-HTML conversion tool for web writers. 
            Markdown allows you to write using an easy-to-read, easy-to-write plain text format, 
            then convert it to structurally valid XHTML (or HTML).
            </summary>
        </member>
        <member name="F:MarkdownSharp.Markdown._tabWidth">
            <summary>
            Tabs are automatically converted to spaces as part of the transform  
            this constant determines how "wide" those tabs become in spaces  
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor">
            <summary>
            Create a new Markdown instance using default options
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor(System.Boolean)">
            <summary>
            Create a new Markdown instance and optionally load options from a configuration
            file. There they should be stored in the appSettings section, available options are:
            
                Markdown.StrictBoldItalic (true/false)
                Markdown.EmptyElementSuffix (">" or " />" without the quotes)
                Markdown.LinkEmails (true/false)
                Markdown.AutoNewLines (true/false)
                Markdown.AutoHyperlink (true/false)
                Markdown.EncodeProblemUrlCharacters (true/false) 
                
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor(MarkdownSharp.MarkdownOptions)">
            <summary>
            Create a new Markdown instance and set the options from the MarkdownOptions object.
            </summary>
        </member>
        <member name="F:MarkdownSharp.Markdown._nestDepth">
            <summary>
            maximum nested depth of [] and () supported by the transform; implementation detail
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#cctor">
            <summary>
            In the static constuctor we'll initialize what stays the same across all transforms.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Transform(System.String)">
            <summary>
            Transforms the provided Markdown-formatted text to HTML;  
            see http://en.wikipedia.org/wiki/Markdown
            </summary>
            <remarks>
            The order in which other subs are called here is
            essential. Link and image substitutions need to happen before
            EscapeSpecialChars(), so that any *'s or _'s in the a
            and img tags get encoded.
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.RunBlockGamut(System.String,System.Boolean)">
            <summary>
            Perform transformations that form block-level tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.RunSpanGamut(System.String)">
            <summary>
            Perform transformations that occur *within* block-level tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.FormParagraphs(System.String,System.Boolean)">
            <summary>
            splits on two or more newlines, to form "paragraphs";    
            each paragraph is then unhashed (if it is a hash and unhashing isn't turned off) or wrapped in HTML p tag
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetNestedBracketsPattern">
            <summary>
            Reusable pattern to match balanced [brackets]. See Friedl's 
            "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetNestedParensPattern">
            <summary>
            Reusable pattern to match balanced (parens). See Friedl's 
            "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.StripLinkDefinitions(System.String)">
            <summary>
            Strips link definitions from text, stores the URLs and titles in hash references.
            </summary>
            <remarks>
            ^[id]: url "optional title"
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetBlockPattern">
            <summary>
            derived pretty much verbatim from PHP Markdown
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.HashHTMLBlocks(System.String)">
            <summary>
            replaces any block-level HTML blocks with hash entries
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.TokenizeHTML(System.String)">
            <summary>
            returns an array of HTML tokens comprising the input string. Each token is 
            either a tag (possibly with nested, tags contained therein, such 
            as &lt;a href="&lt;MTFoo&gt;"&gt;, or a run of text between tags. Each element of the 
            array is a two-element array; the first is either 'tag' or 'text'; the second is 
            the actual value.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoAnchors(System.String)">
            <summary>
            Turn Markdown link shortcuts into HTML anchor tags
            </summary>
            <remarks>
            [link text](url "title") 
            [link text][id] 
            [id] 
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoImages(System.String)">
            <summary>
            Turn Markdown image shortcuts into HTML img tags. 
            </summary>
            <remarks>
            ![alt text][id]
            ![alt text](url "optional title")
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHeaders(System.String)">
            <summary>
            Turn Markdown headers into HTML header tags
            </summary>
            <remarks>
            Header 1  
            ========  
            
            Header 2  
            --------  
            
            # Header 1  
            ## Header 2  
            ## Header 2 with closing hashes ##  
            ...  
            ###### Header 6  
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHorizontalRules(System.String)">
            <summary>
            Turn Markdown horizontal rules into HTML hr tags
            </summary>
            <remarks>
            ***  
            * * *  
            ---
            - - -
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoLists(System.String)">
            <summary>
            Turn Markdown lists into HTML ul and ol and li tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.ProcessListItems(System.String,System.String)">
            <summary>
            Process the contents of a single ordered or unordered list, splitting it
            into individual list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoCodeBlocks(System.String)">
            <summary>
            /// Turn Markdown 4-space indented code into HTML pre code blocks
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoCodeSpans(System.String)">
            <summary>
            Turn Markdown `code spans` into HTML code tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoItalicsAndBold(System.String)">
            <summary>
            Turn Markdown *italics* and **bold** into HTML strong and em tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHardBreaks(System.String)">
            <summary>
            Turn markdown line breaks (two space at end of line) into HTML break tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoBlockQuotes(System.String)">
            <summary>
            Turn Markdown > quoted blocks into HTML blockquote blocks
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoAutoLinks(System.String)">
            <summary>
            Turn angle-delimited URLs into HTML anchor tags
            </summary>
            <remarks>
            &lt;http://www.example.com&gt;
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.Outdent(System.String)">
            <summary>
            Remove one level of line-leading spaces
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeEmailAddress(System.String)">
            <summary>
            encodes email address randomly  
            roughly 10% raw, 45% hex, 45% dec 
            note that @ is always encoded and : never is
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeCode(System.String)">
            <summary>
            Encode/escape certain Markdown characters inside code blocks and spans where they are literals
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeAmpsAndAngles(System.String)">
            <summary>
            Encode any ampersands (that aren't part of an HTML entity) and left or right angle brackets
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeBackslashes(System.String)">
            <summary>
            Encodes any escaped characters such as \`, \*, \[ etc
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Unescape(System.String)">
            <summary>
            swap back in all the special characters we've hidden
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeBoldItalic(System.String)">
            <summary>
            escapes Bold [ * ] and Italic [ _ ] characters
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeProblemUrlChars(System.String)">
            <summary>
            hex-encodes some unusual "problem" chars in URLs to avoid URL detection problems 
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeSpecialCharsWithinTagAttributes(System.String)">
            <summary>
            Within tags -- meaning between &lt; and &gt; -- encode [\ ` * _] so they 
            don't conflict with their use in Markdown for code, italics and strong. 
            We're replacing each such character with its corresponding hash 
            value; this is likely overkill, but it should prevent us from colliding 
            with the escape values by accident.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Normalize(System.String)">
            <summary>
            convert all tabs to _tabWidth spaces; 
            standardizes line endings from DOS (CR LF) or Mac (CR) to UNIX (LF); 
            makes sure text ends with a couple of newlines; 
            removes any blank lines (only spaces) in the text
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.RepeatString(System.String,System.Int32)">
            <summary>
            this is to emulate what's evailable in PHP
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.EmptyElementSuffix">
            <summary>
            use ">" for HTML output, or " />" for XHTML output
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.LinkEmails">
            <summary>
            when false, email addresses will never be auto-linked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.StrictBoldItalic">
            <summary>
            when true, bold and italic require non-word characters on either side  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.AutoNewLines">
            <summary>
            when true, RETURN becomes a literal newline  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.AutoHyperlink">
            <summary>
            when true, (most) bare plain URLs are auto-hyperlinked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.EncodeProblemUrlCharacters">
            <summary>
            when true, problematic URL characters like [, ], (, and so forth will be encoded 
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.Version">
            <summary>
            current version of MarkdownSharp;  
            see http://code.google.com/p/markdownsharp/ for the latest code or to contribute
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Formats.MarkdownFormat.SerializeToStream(ServiceStack.ServiceHost.IRequestContext,System.Object,System.IO.Stream)">
            <summary>
            Render Markdown for text/markdown and text/plain ContentTypes
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.RestHandler.CreateRequest(ServiceStack.ServiceHost.IHttpRequest,System.String)">
            <summary>
            Used in Unit tests
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.WebHost.Endpoints.Ext.AllFilesHandler">
            <summary>
            Summary description for $codebehindclassname$
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.RedirectHttpHandler.ProcessRequest(ServiceStack.ServiceHost.IHttpRequest,ServiceStack.ServiceHost.IHttpResponse,System.String)">
            <summary>
            Non ASP.NET requests
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <param name="operationName"></param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.RedirectHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            ASP.NET requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Extensions.HttpResponseExtensions.WriteToResponse(ServiceStack.ServiceHost.IHttpResponse,System.Object,ServiceStack.ServiceHost.ResponseSerializerDelegate,ServiceStack.ServiceHost.IRequestContext,System.Byte[],System.Byte[])">
            <summary>
            Writes to response.
            Response headers are customizable by implementing IHasOptions an returning Dictionary of Http headers.
            </summary>
            <param name="response">The response.</param>
            <param name="result">Whether or not it was implicity handled by ServiceStack's built-in handlers.</param>
            <param name="defaultAction">The default action.</param>
            <param name="serializerCtx">The serialization context.</param>
            <param name="bodyPrefix">Add prefix to response body if any</param>
            <param name="bodySuffix">Add suffix to response body if any</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.WebHost.Endpoints.Extensions.HttpRequestExtensions">
            	 * 
            		 Input: http://localhost:96/Cambia3/Temp/Test.aspx/path/info?q=item#fragment
            
            		Some HttpRequest path and URL properties:
            		Request.ApplicationPath:	/Cambia3
            		Request.CurrentExecutionFilePath:	/Cambia3/Temp/Test.aspx
            		Request.FilePath:			/Cambia3/Temp/Test.aspx
            		Request.Path:				/Cambia3/Temp/Test.aspx/path/info
            		Request.PathInfo:			/path/info
            		Request.PhysicalApplicationPath:	D:\Inetpub\wwwroot\CambiaWeb\Cambia3\
            		Request.QueryString:		/Cambia3/Temp/Test.aspx/path/info?query=arg
            		Request.Url.AbsolutePath:	/Cambia3/Temp/Test.aspx/path/info
            		Request.Url.AbsoluteUri:	http://localhost:96/Cambia3/Temp/Test.aspx/path/info?query=arg
            		Request.Url.Fragment:	
            		Request.Url.Host:			localhost
            		Request.Url.LocalPath:		/Cambia3/Temp/Test.aspx/path/info
            		Request.Url.PathAndQuery:	/Cambia3/Temp/Test.aspx/path/info?query=arg
            		Request.Url.Port:			96
            		Request.Url.Query:			?query=arg
            		Request.Url.Scheme:			http
            		Request.Url.Segments:		/
            									Cambia3/
            									Temp/
            									Test.aspx/
            									path/
            									info
            	 * 
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Extensions.HttpRequestExtensions.ResolveItem(ServiceStack.ServiceHost.IHttpRequest,System.String,System.Func{ServiceStack.ServiceHost.IHttpRequest,System.Object})">
            <summary>
            Use this to treat Request.Items[] as a cache by returning pre-computed items to save 
            calculating them multiple times.
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.ServiceStackHttpHandlerFactory.ReturnRequestInfo(System.Web.HttpRequest)">
            <summary>
            If enabled, just returns the Request Info as it understands
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.WebHost.Endpoints.Support.GzipOptimizationTest">
            <summary>
            Highly optimized code to find if GZIP is supported from:
             - http://dotnetperls.com/gzip-request
            
            Other resources for GZip, deflate resources:
            - http://www.west-wind.com/Weblog/posts/10564.aspx
            	- http://www.west-wind.com/WebLog/posts/102969.aspx
            - ICSharpCode 
            </summary>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.ServiceEndpointsMetadataConfig.Create(System.String)">
            <summary>
            Changes the links for the servicestack/metadata page
            </summary>
            <param name="serviceStackHandlerPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.IndexPageHttpHandler.ProcessRequest(ServiceStack.ServiceHost.IHttpRequest,ServiceStack.ServiceHost.IHttpResponse,System.String)">
            <summary>
            Non ASP.NET requests
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <param name="operationName"></param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.IndexPageHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            ASP.NET requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.Support.StaticFileHandler.SetDefaultFile(System.String)">
            <summary>
            Keep default file contents in-memory
            </summary>
            <param name="defaultFilePath"></param>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.EndpointHost.ApplyPreRequestFilters(ServiceStack.ServiceHost.IHttpRequest,ServiceStack.ServiceHost.IHttpResponse)">
            <summary>
            Applies the raw request filters. Returns whether or not the request has been handled 
            and no more processing should be done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.EndpointHost.ApplyRequestFilters(ServiceStack.ServiceHost.IHttpRequest,ServiceStack.ServiceHost.IHttpResponse,System.Object)">
            <summary>
            Applies the request filters. Returns whether or not the request has been handled 
            and no more processing should be done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.EndpointHost.ApplyResponseFilters(ServiceStack.ServiceHost.IHttpRequest,ServiceStack.ServiceHost.IHttpResponse,System.Object)">
            <summary>
            Applies the response filters. Returns whether or not the request has been handled 
            and no more processing should be done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.WebHost.Endpoints.EndpointHost.CompleteRequest">
            <summary>
            Call to signal the completion of a ServiceStack-handled Request
            </summary>
        </member>
        <member name="P:ServiceStack.WebHost.Endpoints.EndpointHost.Container">
            <summary>
            The AppHost.Container. Note: it is not thread safe to register dependencies after AppStart.
            </summary>
        </member>
        <member name="F:ServiceStack.WebHost.Endpoints.EndpointHostConfig.SkipRouteValidation">
            <summary>
            Use: \[Route\("[^\/]  regular expression to find violating routes in your sln
            </summary>
        </member>
    </members>
</doc>
