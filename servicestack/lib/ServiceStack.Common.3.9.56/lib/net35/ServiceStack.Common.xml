<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack.Common</name>
    </assembly>
    <members>
        <member name="T:ServiceStack.Common.CryptUtils">
            <summary>
            Useful .NET Encryption Utils from:
            http://andrewlocatelliwoodcock.com/2011/08/01/implementing-rsa-asymmetric-public-private-key-encryption-in-c-encrypting-under-the-public-key/
            </summary>
        </member>
        <member name="M:ServiceStack.Common.CryptUtils.Encrypt(System.String,System.String,ServiceStack.Common.RsaKeyLengths)">
            <summary>
            Encrypt an arbitrary string of data under the supplied public key
            </summary>
            <param name="publicKey">The public key to encrypt under</param>
            <param name="data">The data to encrypt</param>
            <param name="length">The bit length or strength of the public key: 1024, 2048 or 4096 bits. This must match the 
            value actually used to create the publicKey</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            Gets the textual description of the enum if it has one. e.g.
            
            <code>
            enum UserColors
            {
                [Description("Bright Red")]
                BrightRed
            }
            UserColors.BrightRed.ToDescription();
            </code>
            </summary>
            <param name="enum"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Common.Extensions.EnumerableExtensions">
            <summary>
            These extensions have a potential to conflict with the LINQ extensions methods so
            leaving the implmentation in the 'Extensions' sub-namespace to force explicit opt-in
            </summary>
        </member>
        <member name="M:ServiceStack.Common.HostContext.TrackDisposable(System.IDisposable)">
            <summary>
            Track any IDisposable's to dispose of at the end of the request in IAppHost.OnEndRequest()
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:ServiceStack.Common.HostContext.Items">
            <summary>
            Gets a list of items for this request. 
            </summary>
            <remarks>This list will be cleared on every request and is specific to the original thread that is handling the request.
            If a handler uses additional threads, this data will not be available on those threads.
            </remarks>
        </member>
        <member name="T:ServiceStack.Common.Extensions.IPAddressExtensions">
            <summary>
            Useful IPAddressExtensions from: 
            http://blogs.msdn.com/knom/archive/2008/12/31/ip-address-calculations-with-c-subnetmasks-networks.aspx
            
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Extensions.IPAddressExtensions.GetAllNetworkInterfaceIpv4Addresses">
            <summary>
            Gets the ipv4 addresses from all Network Interfaces that have Subnet masks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Extensions.IPAddressExtensions.GetAllNetworkInterfaceIpv6Addresses">
            <summary>
            Gets the ipv6 addresses from all Network Interfaces.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Messaging.IMessageHandler">
            <summary>
            Single threaded message handler that can process all messages
            of a particular message type.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageHandler.Process(ServiceStack.Messaging.IMessageQueueClient)">
            <summary>
            Process all messages pending
            </summary>
            <param name="mqClient"></param>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageHandler.ProcessQueue(ServiceStack.Messaging.IMessageQueueClient,System.String,System.Func{System.Boolean})">
            <summary>
            Process messages from a single queue.
            </summary>
            <param name="mqClient"></param>
            <param name="queueName">The queue to process</param>
            <param name="doNext">A predicate on whether to continue processing the next message if any</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageHandler.GetStats">
            <summary>
            Get Current Stats for this Message Handler
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Messaging.IMessageHandler.MessageType">
            <summary>
            The type of the message this handler processes
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.IMessageHandlerFactory">
            <summary>
            Encapsulates creating a new message handler
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.MessageHandler`1">
            <summary>
            Processes all messages in a Normal and Priority Queue.
            Expects to be called in 1 thread. i.e. Non Thread-Safe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.Messaging.MessageQueueClientFactory.GetMessageAsync(System.String)">
            <summary>
            Returns the next message from queueName or null if no message
            </summary>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.Client">
            <summary>
            Base rcon class.
            </summary>
        </member>
        <member name="F:ServiceStack.Messaging.Rcon.Client._sock">
            <summary>
            Rcon connection socket. Always set to null when not connected.
            </summary>
        </member>
        <member name="F:ServiceStack.Messaging.Rcon.Client._sequenceID">
            <summary>
            Unique ID for each message.
            </summary>
        </member>
        <member name="F:ServiceStack.Messaging.Rcon.Client._registeredCallbacks">
            <summary>
            Registered callbacks.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.#ctor(System.Net.IPEndPoint)">
            <summary>
            Create a new instance of rcon.
            </summary>
            <param name="rconEndpoint">Endpoint to connect to, usually the game server with query port.</param>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.Connect">
            <summary>
            Attempts to connect to the game server for rcon operations.
            </summary>
            <returns>True if connection established, false otherwise.</returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.ProcessPacket(System.Byte[],ServiceStack.Messaging.Rcon.ClientSocketState)">
            <summary>
            Processes a received packet.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.Disconnect">
            <summary>
            Disconnects from rcon.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.InternalSend(System.Byte[][])">
            <summary>
            Sends message to the server.
            </summary>
            <param name="words">Words to send.</param>
        </member>
        <member name="E:ServiceStack.Messaging.Rcon.Client.OnDisconnected">
            <summary>
            Disconnected event.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.Endpoint">
            <summary>
            Game server endpoint.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.LastException">
            <summary>
            Last exception that occured during operation.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.Connected">
            <summary>
            Connected?
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.SequenceID">
            <summary>
            Gets the next unique ID to be used for transmisson. Read this before sending to pair responses to sent messages.
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.Client.OnDisconnectedHandler">
            <summary>
            Event delegate when disconnected from the server.
            </summary>
            <param name="rcon"></param>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.Client.AsyncCallback">
            <summary>
            Delegate for async callbacks.
            </summary>
            <param name="rcon"></param>
            <param name="packet"></param>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.NotConnectedException">
            <summary>
            Exception thrown when attempting to send on a non-connected service client.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.FromServer">
            <summary>
            True if the packet originated on the server.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.IsResponse">
            <summary>
            True if the packet is a response from a sent packet.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.Sequence">
            <summary>
            Sequence identifier. Unique to the connection.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.Words">
            <summary>
            Words.
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.PacketCodec">
            <summary>
            Contains methods required for encoding and decoding rcon packets.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.DecodePacket(System.Byte[])">
            <summary>
            Decodes a packet.
            </summary>
            <param name="packet">The packet.</param>
            <returns>A packet object.</returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.DecodeHeader(System.Byte[])">
            <summary>
            Decodes the packet header.
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.DecodeWords(System.Byte[])">
            <summary>
            Decodes words in a packet.
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.EncodePacket(System.Boolean,System.Boolean,System.UInt32,System.Byte[][])">
            <summary>
            Encodes a packet for transmission to the server.
            </summary>
            <param name="fromServer"></param>
            <param name="isResponse"></param>
            <param name="id"></param>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.EncodeHeader(System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Encodes a packet header.
            </summary>
            <param name="fromServer"></param>
            <param name="isResponse"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.EncodeWords(System.Byte[][])">
            <summary>
            Encodes words.
            </summary>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.ProcessingClient">
            <summary>
            Processing client used to interface with ServiceStack and allow a message to be processed.
            Not an actual client.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.ProcessingClient.Publish(System.String,System.Byte[])">
            <summary>
            Publish the specified message into the durable queue @queueName
            </summary>
            <param name="queueName"></param>
            <param name="messageBytes"></param>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.ProcessingClient.Notify(System.String,System.Byte[])">
            <summary>
            Publish the specified message into the transient queue @queueName
            </summary>
            <param name="queueName"></param>
            <param name="messageBytes"></param>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.ProcessingClient.Get(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Synchronous blocking get.
            </summary>
            <param name="queueName"></param>
            <param name="timeOut"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.ProcessingClient.GetAsync(System.String)">
            <summary>
            Non blocking get message
            </summary>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.ProcessingClient.WaitForNotifyOnAny(System.String[])">
            <summary>
            Blocking wait for notifications on any of the supplied channels
            </summary>
            <param name="channelNames"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.Server">
            <summary>
            Hosting services via a binary-safe TCP-based protocol.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.RegisterHandler``1(System.Func{ServiceStack.Messaging.IMessage{``0},System.Object})">
            <summary>
            Register DTOs and hanlders the MQ Host will process
            </summary>
            <typeparam name="T"></typeparam>
            <param name="processMessageFn"></param>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.GetStatus">
            <summary>
            Get Total Current Stats for all Message Handlers
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.GetStatsDescription">
            <summary>
            Get a Stats dump
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.Start">
            <summary>
            Start the MQ Host. Stops the server and restarts if already started.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.Stop">
            <summary>
            Stop the MQ Host if not already stopped. 
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.ProcessPacket(System.Byte[],System.Net.Sockets.Socket,ServiceStack.Messaging.Rcon.ClientSocketState)">
            <summary>
            Processes a received packet.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Server.MessageFactory">
            <summary>
            Factory to create consumers and producers that work with this service
            </summary>
        </member>
        <member name="T:ServiceStack.Net30.ExtendTuple">
            <summary>
            Helper extensions for tuples
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.PropertyAccessor`1.TypedGetPropertyFn``1">
            <summary>
            Func to get the Strongly-typed field
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.PropertyAccessor`1.ValueTypedGetPropertyFn``1">
            <summary>
            Required to cast the return ValueType to an object for caching
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.PropertyAccessor`1.TypedSetPropertyFn``1">
            <summary>
            Func to set the Strongly-typed field
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.PropertyAccessor`1.ValueTypesSetPropertyFn``1">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.PropertyAccessor`1.UnTypedSetPropertyFn``1">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.StaticAccessors`1.TypedGetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Func to get the Strongly-typed field
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.StaticAccessors`1.ValueUnTypedGetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Required to cast the return ValueType to an object for caching
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.StaticAccessors`1.TypedSetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Func to set the Strongly-typed field
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.StaticAccessors`1.ValueUnTypedSetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Reflection.StaticAccessors`1.UnTypedSetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="T:ServiceStack.ServiceClient.Web.AsyncServiceClient">
            Need to provide async request options
            http://msdn.microsoft.com/en-us/library/86wf6409(VS.71).aspx
        </member>
        <member name="P:ServiceStack.ServiceClient.Web.AsyncServiceClient.HttpWebRequestFilter">
            <summary>
            The request filter is called before any request.
            This request filter is executed globally.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClient.Web.AsyncServiceClient.HttpWebResponseFilter">
            <summary>
            The response action is called once the server response is available.
            It will allow you to access raw response information. 
            This response action is executed globally.
            Note that you should NOT consume the response stream as this is handled by ServiceStack
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClient.Web.AsyncServiceClient.OnAuthenticationRequired">
            <summary>
            Called before request resend, when the initial request required authentication
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClient.Web.AsyncServiceClient.LocalHttpWebRequestFilter">
            <summary>
            The request filter is called before any request.
            This request filter only works with the instance where it was set (not global).
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClient.Web.AsyncServiceClient.LocalHttpWebResponseFilter">
            <summary>
            The response action is called once the server response is available.
            It will allow you to access raw response information. 
            Note that you should NOT consume the response stream as this is handled by ServiceStack
            </summary>
        </member>
        <member name="T:ServiceStack.ServiceClient.Web.GenericProxy`1">
            <summary>
            Generic Proxy for service calls.
            </summary>
            <typeparam name="T">The service Contract</typeparam>
        </member>
        <member name="P:ServiceStack.ServiceClient.Web.GenericProxy`1.Proxy">
            <summary>
            Returns the transparent proxy for the service call
            </summary>
        </member>
        <member name="T:ServiceStack.ServiceClient.Web.ServiceClientBase">
            Need to provide async request options
            http://msdn.microsoft.com/en-us/library/86wf6409(VS.71).aspx
        </member>
        <member name="F:ServiceStack.ServiceClient.Web.ServiceClientBase.httpWebRequestFilter">
            <summary>
            The request filter is called before any request.
            This request filter is executed globally.
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClient.Web.ServiceClientBase.httpWebResponseFilter">
            <summary>
            The response action is called once the server response is available.
            It will allow you to access raw response information. 
            This response action is executed globally.
            Note that you should NOT consume the response stream as this is handled by ServiceStack
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceClient.Web.ServiceClientBase.SetBaseUri(System.String)">
            <summary>
            Sets all baseUri properties, using the Format property for the SyncReplyBaseUri and AsyncOneWayBaseUri
            </summary>
            <param name="baseUri">Base URI of the service</param>
        </member>
        <member name="M:ServiceStack.ServiceClient.Web.ServiceClientBase.SetBaseUri(System.String,System.String)">
            <summary>
            Sets all baseUri properties allowing for a temporary override of the Format property
            </summary>
            <param name="baseUri">Base URI of the service</param>
            <param name="format">Override of the Format property for the service</param>
        </member>
        <member name="F:ServiceStack.ServiceClient.Web.ServiceClientBase.disableAutoCompression">
            <summary>
            Whether to Accept Gzip,Deflate Content-Encoding and to auto decompress responses
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClient.Web.ServiceClientBase.username">
            <summary>
            The user name for basic authentication
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClient.Web.ServiceClientBase.password">
            <summary>
            The password for basic authentication
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceClient.Web.ServiceClientBase.SetCredentials(System.String,System.String)">
            <summary>
            Sets the username and the password for basic authentication.
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClient.Web.ServiceClientBase.alwaysSendBasicAuthHeader">
            <summary>
            Determines if the basic auth header should be sent with every request.
            By default, the basic auth header is only sent when "401 Unauthorized" is returned.
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClient.Web.ServiceClientBase.storeCookies">
            <summary>
            Specifies if cookies should be stored
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceClient.Web.ServiceClientBase.HandleResponseException``1(System.Exception,System.Object,System.String,System.Func{System.Net.WebRequest},System.Func{System.Net.WebRequest,System.Net.WebResponse},``0@)">
            <summary>
            Called by Send method if an exception occurs, for instance a System.Net.WebException because the server
            returned an HTTP error code. Override if you want to handle specific exceptions or always want to parse the
            response to a custom ErrorResponse DTO type instead of ServiceStack's ErrorResponse class. In case ex is a
            <c>System.Net.WebException</c>, do not use
            <c>createWebRequest</c>/<c>getResponse</c>/<c>HandleResponse&lt;TResponse&gt;</c> to parse the response
            because that will result in the same exception again. Use
            <c>ThrowWebServiceException&lt;YourErrorResponseType&gt;</c> to parse the response and to throw a
            <c>WebServiceException</c> containing the parsed DTO. Then override Send to handle that exception.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClient.Web.ServiceClientBase.Headers">
            <summary>
            Gets the collection of headers to be added to outgoing requests.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClient.Web.ServiceClientBase.Credentials">
            <summary>
            Gets or sets authentication information for the request.
            Warning: It's recommened to use <see cref="P:ServiceStack.ServiceClient.Web.ServiceClientBase.UserName"/> and <see cref="P:ServiceStack.ServiceClient.Web.ServiceClientBase.Password"/> for basic auth.
            This property is only used for IIS level authentication.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClient.Web.ServiceClientBase.onAuthenticationRequired">
            <summary>
            Called before request resend, when the initial request required authentication
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClient.Web.ServiceClientBase.localHttpWebRequestFilter">
            <summary>
            The request filter is called before any request.
            This request filter only works with the instance where it was set (not global).
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClient.Web.ServiceClientBase.localHttpWebResponseFilter">
            <summary>
            The response action is called once the server response is available.
            It will allow you to access raw response information. 
            Note that you should NOT consume the response stream as this is handled by ServiceStack
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClient.Web.WcfServiceClient.StoreCookies">
            <summary>
            Specifies if cookies should be stored
            </summary>
        </member>
        <member name="T:ServiceStack.ServiceClient.Web.UrlExtensions">
            <summary>
            Donated by Ivan Korneliuk from his post:
            http://korneliuk.blogspot.com/2012/08/servicestack-reusing-dtos.html
            
            Modified to only allow using routes matching the supplied HTTP Verb
            </summary>
        </member>
        <member name="T:ServiceStack.ServiceClient.Web.CookieManagerEndpointBehavior">
            <summary>
            Adds the singleton instance of <see cref="T:ServiceStack.ServiceClient.Web.CookieManagerMessageInspector"/> to an endpoint on the client.
            </summary>
            <remarks>
            Based on http://megakemp.wordpress.com/2009/02/06/managing-shared-cookies-in-wcf/
            </remarks>
        </member>
        <member name="M:ServiceStack.ServiceClient.Web.CookieManagerEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Adds the singleton of the <see cref="!:ClientIdentityMessageInspector"/> class to the client endpoint's message inspectors.
            </summary>
            <param name="endpoint">The endpoint that is to be customized.</param>
            <param name="clientRuntime">The client runtime to be customized.</param>
        </member>
        <member name="T:ServiceStack.ServiceClient.Web.CookieManagerMessageInspector">
            <summary>
            Maintains a copy of the cookies contained in the incoming HTTP response received from any service
            and appends it to all outgoing HTTP requests.
            </summary>
            <remarks>
            This class effectively allows to send any received HTTP cookies to different services,
            reproducing the same functionality available in ASMX Web Services proxies with the <see cref="T:System.Net.CookieContainer"/> class.
            Based on http://megakemp.wordpress.com/2009/02/06/managing-shared-cookies-in-wcf/
            </remarks>
        </member>
        <member name="M:ServiceStack.ServiceClient.Web.CookieManagerMessageInspector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:ClientIdentityMessageInspector"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceClient.Web.CookieManagerMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Inspects a message after a reply message is received but prior to passing it back to the client application.
            </summary>
            <param name="reply">The message to be transformed into types and handed back to the client application.</param>
            <param name="correlationState">Correlation state data.</param>
        </member>
        <member name="M:ServiceStack.ServiceClient.Web.CookieManagerMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
            Inspects a message before a request message is sent to a service.
            </summary>
            <param name="request">The message to be sent to the service.</param>
            <param name="channel">The client object channel.</param>
            <returns>
            <strong>Null</strong> since no message correlation is used.
            </returns>
        </member>
        <member name="P:ServiceStack.ServiceClient.Web.CookieManagerMessageInspector.Instance">
            <summary>
            Gets the singleton <see cref="!:ClientIdentityMessageInspector"/> instance.
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClient.Web.WebRequestUtils.ResponseDtoSuffix">
            <summary>
            Naming convention for the request's Response DTO
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceModel.Serialization.DataContractDeserializer.quotas">
            <summary>
            Default MaxStringContentLength is 8k, and throws an exception when reached
            </summary>
        </member>
        <member name="T:ServiceStack.ServiceModel.Serialization.StringMapTypeDeserializer">
            <summary>
            Serializer cache of delegates required to create a type from a string map (e.g. for REST urls)
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceModel.Support.XmlSerializerWrapper.GetNamespace(System.Type)">
            <summary>
            Gets the namespace from an attribute marked on the type's definition
            </summary>
            <param name="type"></param>
            <returns>Namespace of type</returns>
        </member>
        <member name="T:ServiceStack.Validation.ValidationError">
            <summary>
            The exception which is thrown when a validation error occurred.
            This validation is serialized in a extra clean and human-readable way by ServiceStack.
            </summary>
        </member>
        <member name="M:ServiceStack.Validation.ValidationError.ToXml">
            <summary>
            Used if we need to serialize this exception to XML
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Validation.ValidationError.ErrorCode">
            <summary>
            Returns the first error code
            </summary>
            <value>The error code.</value>
        </member>
        <member name="T:ServiceStack.Validation.ValidationErrorResult">
            <summary>
            Encapsulates a validation result.
            </summary>
        </member>
        <member name="M:ServiceStack.Validation.ValidationErrorResult.#ctor">
            <summary>
            Constructs a new ValidationResult
            </summary>
        </member>
        <member name="M:ServiceStack.Validation.ValidationErrorResult.#ctor(System.Collections.Generic.IList{ServiceStack.Validation.ValidationErrorField})">
            <summary>
            Constructs a new ValidationResult
            </summary>
            <param name="errors">A list of validation results</param>
        </member>
        <member name="M:ServiceStack.Validation.ValidationErrorResult.#ctor(System.Collections.Generic.IList{ServiceStack.Validation.ValidationErrorField},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Validation.ValidationErrorResult"/> class.
            </summary>
            <param name="errors">The errors.</param>
            <param name="successCode">The success code.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:ServiceStack.Validation.ValidationErrorResult.Merge(ServiceStack.Validation.ValidationErrorResult)">
            <summary>
            Merge errors from another <see cref="T:ServiceStack.Validation.ValidationErrorResult"/>
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:ServiceStack.Validation.ValidationErrorResult.SuccessCode">
            <summary>
            Gets or sets the success code.
            </summary>
            <value>The success code.</value>
        </member>
        <member name="P:ServiceStack.Validation.ValidationErrorResult.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:ServiceStack.Validation.ValidationErrorResult.SuccessMessage">
            <summary>
            Gets or sets the success message.
            </summary>
            <value>The success message.</value>
        </member>
        <member name="P:ServiceStack.Validation.ValidationErrorResult.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:ServiceStack.Validation.ValidationErrorResult.Errors">
            <summary>
            The errors generated by the validation.
            </summary>
        </member>
        <member name="P:ServiceStack.Validation.ValidationErrorResult.IsValid">
            <summary>
            Returns True if the validation was successful (errors list is empty).
            </summary>
        </member>
        <member name="M:ServiceStack.Common.StreamExtensions.Compress(System.String,System.String)">
            <summary>
            Compresses the specified text using the default compression method: Deflate
            </summary>
            <param name="text">The text.</param>
            <param name="compressionType">Type of the compression.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.StreamExtensions.Decompress(System.Byte[],System.String)">
            <summary>
            Decompresses the specified gz buffer using the default compression method: Inflate
            </summary>
            <param name="gzBuffer">The gz buffer.</param>
            <param name="compressionType">Type of the compression.</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Common.Support.AdapterBase">
            <summary>
            Common functionality when creating adapters
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Support.AdapterBase.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified expression. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Support.AdapterBase.Execute(System.Action)">
            <summary>
            Executes the specified action (for void methods).
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:ServiceStack.Common.Support.InMemoryLogFactory">
            <summary>
            Note: InMemoryLog keeps all logs in memory, so don't use it long running exceptions
            
            Returns a thread-safe InMemoryLog which you can use while *TESTING*
            to provide a detailed analysis of your logs.
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Support.LogicFacadeBase.Execute``1(ServiceStack.DesignPatterns.Command.ICommand{``0})">
            <summary>
            Executes the specified action.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Common.Support.LogicFacadeBase.CurrentContext">
            <summary>
            Gets the current context (or null if none).
            </summary>
        </member>
        <member name="P:ServiceStack.Common.Support.LogicFacadeBase.IsCurrentlyInitializeOnly">
            <summary>
            Checks if the current context is set to "initialize only".
            </summary>
        </member>
        <member name="F:ServiceStack.Common.Support.LogicFacadeBase.InitialisationContext.initOptions">
            <summary>
            Determines whether this context is initialise only or not
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Support.LogicFacadeBase.InitialisationContext.#ctor(ServiceStack.Common.Support.LogicFacadeBase,ServiceStack.LogicFacade.InitOptions)">
            <summary>
            Constructs a new InitialiseOnlyContext
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Support.LogicFacadeBase.InitialisationContext.Dispose">
            <summary>
            Call to remove this current context and reveal the previous context (if any).
            </summary>
        </member>
        <member name="P:ServiceStack.Common.Support.LogicFacadeBase.InitialisationContext.InitialisedObject">
            <summary>
            Gets or sets the object that has been initialized only.
            </summary>
        </member>
        <member name="T:ServiceStack.Common.UrnId">
            <summary>
            Creates a Unified Resource Name (URN) with the following formats:
            
            	- urn:{TypeName}:{IdFieldValue}						e.g. urn:UserSession:1
            	- urn:{TypeName}:{IdFieldName}:{IdFieldValue}		e.g. urn:UserSession:UserId:1			
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServiceStack.Common.Utils.AssertUtils.AreNotNull(System.Collections.Generic.IDictionary{System.String,System.Object})" -->
        <member name="M:ServiceStack.Common.Utils.CommandsUtils.ExecuteAsyncCommandExec(System.Collections.Generic.IEnumerable{ServiceStack.DesignPatterns.Command.ICommandExec})">
            <summary>
            Provide the an option for the callee to block until all commands are executed
            </summary>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Utils.ResponseStatusUtils.CreateResponseStatus(System.String,System.String,System.Collections.Generic.IEnumerable{ServiceStack.Validation.ValidationErrorField})">
            <summary>
            Creates the error response from the values provided.
            
            If the errorCode is empty it will use the first validation error code, 
            if there is none it will throw an error.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="errorMessage">The error message.</param>
            <param name="validationErrors">The validation errors.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Utils.FuncUtils.TryExec(System.Action)">
            <summary>
            Invokes the action provided and returns true if no excpetion was thrown.
            Otherwise logs the exception and returns false if an exception was thrown.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Utils.PathUtils.MapProjectPath(System.String)">
            <summary>
            Maps the path of a file in the context of a VS project
            </summary>
            <param name="relativePath">the relative path</param>
            <returns>the absolute path</returns>
            <remarks>Assumes static content is two directories above the /bin/ directory,
            eg. in a unit test scenario  the assembly would be in /bin/Debug/.</remarks>
        </member>
        <member name="M:ServiceStack.Common.Utils.PathUtils.MapAbsolutePath(System.String)">
            <summary>
            Maps the path of a file in a self-hosted scenario
            </summary>
            <param name="relativePath">the relative path</param>
            <returns>the absolute path</returns>
            <remarks>Assumes static content is copied to /bin/ folder with the assemblies</remarks>
        </member>
        <member name="M:ServiceStack.Common.Utils.PathUtils.MapHostAbsolutePath(System.String)">
            <summary>
            Maps the path of a file in an Asp.Net hosted scenario
            </summary>
            <param name="relativePath">the relative path</param>
            <returns>the absolute path</returns>
            <remarks>Assumes static content is in the parent folder of the /bin/ directory</remarks>
        </member>
        <member name="M:ServiceStack.Common.Utils.ReflectionUtils.PopulateObject(System.Object)">
            <summary>
            Populate an object with Example data.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Utils.ReflectionUtils.PopulateObjectInternal(System.Object,System.Collections.Generic.Dictionary{System.Type,System.Int32})">
            <summary>
            Populates the object with example data.
            </summary>
            <param name="obj"></param>
            <param name="recursionInfo">Tracks how deeply nested we are</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Web.HttpResultExtensions.ToDto(System.Object)">
            <summary>
            Shortcut to get the ResponseDTO whether it's bare or inside a IHttpResult
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Web.HttpResultExtensions.ToResponseDto(System.Object)">
            <summary>
            Alias of ToDto
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Web.HttpResultExtensions.ToDto``1(System.Object)">
            <summary>
            Shortcut to get the ResponseDTO whether it's bare or inside a IHttpResult
            </summary>
            <param name="response"></param>
            <returns>TResponse if found; otherwise null</returns>
        </member>
        <member name="M:ServiceStack.Common.Web.HttpResultExtensions.ToResponseDto``1(System.Object)">
            <summary>
            Alias of ToDto
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Web.HttpResultExtensions.ToResponseStatus(System.Object)">
            <summary>
            Shortcut to get the ResponseStatus whether it's bare or inside a IHttpResult
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Common.Web.HttpResultExtensions.IsErrorResponse(System.Object)">
            <summary>
            Whether the response is an IHttpError or Exception
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Web.HttpResultExtensions.ExtractHttpRanges(System.String,System.Int64,System.Int64@,System.Int64@)">
            <summary>
            rangeHeader should be of the format "bytes=0-" or "bytes=0-12345" or "bytes=123-456"
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Web.HttpResultExtensions.AddHttpRangeResponseHeaders(ServiceStack.ServiceHost.IHttpResponse,System.Int64,System.Int64,System.Int64)">
            <summary>
            Adds 206 PartialContent Status, Content-Range and Content-Length headers
            </summary>
        </member>
        <member name="M:ServiceStack.Common.Web.HttpResultExtensions.WritePartialTo(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Writes partial range as specified by start-end, from fromStream to toStream.
            </summary>
        </member>
        <member name="M:ServiceStack.Common.RequestContextExtensions.SetItem(ServiceStack.ServiceHost.IRequestContext,System.String,System.Object)">
            <summary>
            Store an entry in the IHttpRequest.Items Dictionary
            </summary>
        </member>
        <member name="M:ServiceStack.Common.RequestContextExtensions.SetItem(ServiceStack.ServiceHost.IHttpRequest,System.String,System.Object)">
            <summary>
            Store an entry in the IHttpRequest.Items Dictionary
            </summary>
        </member>
        <member name="M:ServiceStack.Common.RequestContextExtensions.GetItem(ServiceStack.ServiceHost.IRequestContext,System.String)">
            <summary>
            Get an entry from the IHttpRequest.Items Dictionary
            </summary>
        </member>
        <member name="M:ServiceStack.Common.RequestContextExtensions.GetItem(ServiceStack.ServiceHost.IHttpRequest,System.String)">
            <summary>
            Get an entry from the IHttpRequest.Items Dictionary
            </summary>
        </member>
    </members>
</doc>
